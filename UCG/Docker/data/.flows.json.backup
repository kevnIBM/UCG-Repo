[
    {
        "id": "3fad3621.99e442",
        "type": "tab",
        "label": "Load",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1b19f8b1.08de9f",
        "type": "tab",
        "label": "Mobile",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5c4d249a.7988f4",
        "type": "tab",
        "label": "Alexa",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e85cff5a.1f786",
        "type": "tab",
        "label": "Slack",
        "disabled": false
    },
    {
        "id": "c1e9a4dc.c42cf8",
        "type": "tab",
        "label": "Smooch",
        "disabled": false
    },
    {
        "id": "d284a7e7.ca3e08",
        "type": "tab",
        "label": "GoogleHome",
        "disabled": false
    },
    {
        "id": "19f40361.5ecea5",
        "type": "tab",
        "label": "GoogleHomeV2",
        "disabled": false,
        "info": ""
    },
    {
        "id": "17eb59dd.9ff326",
        "type": "tab",
        "label": "SIP",
        "disabled": false,
        "info": ""
    },
    {
        "id": "15c6f20.6b9dd0e",
        "type": "tab",
        "label": "LivePerson",
        "disabled": false,
        "info": ""
    },
    {
        "id": "14d2f552.3522fb",
        "type": "tab",
        "label": "TwilioSMS",
        "disabled": false
    },
    {
        "id": "cb400db2.feb1d8",
        "type": "tab",
        "label": "MSSQL",
        "disabled": false
    },
    {
        "id": "6e97b3ee.89fce4",
        "type": "tab",
        "label": "Discovery",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5b6fab52.9eae84",
        "type": "tab",
        "label": "General",
        "disabled": false
    },
    {
        "id": "bf65cfa5.bbe868",
        "type": "tab",
        "label": "FD-SIP",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e6126968.dddaa",
        "type": "subflow",
        "name": "Set NodeRed Session",
        "info": "",
        "in": [
            {
                "x": 53.5,
                "y": 55,
                "wires": [
                    {
                        "id": "c8620933.bc367"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "adec5d86.540a1",
        "type": "subflow",
        "name": "Set Cloundant Session",
        "info": "",
        "in": [
            {
                "x": 35,
                "y": 46,
                "wires": [
                    {
                        "id": "1c813ef0.4b9109"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "99f74819.77fb08",
        "type": "subflow",
        "name": "Set Redis Session",
        "info": "",
        "in": [
            {
                "x": 51.76470947265625,
                "y": 56.88235092163086,
                "wires": [
                    {
                        "id": "a0d36cca.2643b"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "52457267.ef5464",
        "type": "subflow",
        "name": "Set Session",
        "info": "",
        "in": [
            {
                "x": 64.9444580078125,
                "y": 40.222259521484375,
                "wires": [
                    {
                        "id": "eddc016.e71f68"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 384.9444580078125,
                "y": 40.222259521484375,
                "wires": [
                    {
                        "id": "eddc016.e71f68",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "9a3e1887.082ce",
        "type": "subflow",
        "name": "Get NodeRed Session",
        "info": "",
        "in": [
            {
                "x": 65.5,
                "y": 62,
                "wires": [
                    {
                        "id": "66106324.674b8c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 365.5,
                "y": 62,
                "wires": [
                    {
                        "id": "66106324.674b8c",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "2388240a.50e91c",
        "type": "subflow",
        "name": "Get Cloudant Session",
        "info": "",
        "in": [
            {
                "x": 41,
                "y": 45,
                "wires": [
                    {
                        "id": "c50406ed.2c817"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 734,
                "y": 45,
                "wires": [
                    {
                        "id": "d25d9cc7.111198",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "be024f13.40d248",
        "type": "subflow",
        "name": "Get Redis Session",
        "info": "",
        "in": [
            {
                "x": 33.48760986328125,
                "y": 71.6234130859375,
                "wires": [
                    {
                        "id": "45e18f63.d4984"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 789.051643371582,
                "y": 74.23785018920898,
                "wires": [
                    {
                        "id": "42337c2f.812434",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "f48845d6.67899",
        "type": "subflow",
        "name": "Get Session",
        "info": "",
        "in": [
            {
                "x": 53.983917236328125,
                "y": 43.61785888671875,
                "wires": [
                    {
                        "id": "1b432e31.ea73ba"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 393.9839172363281,
                "y": 43.61785888671875,
                "wires": [
                    {
                        "id": "1b432e31.ea73ba",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "39871438.0ff45c",
        "type": "subflow",
        "name": "Get Mssql Session",
        "info": "",
        "in": [
            {
                "x": 43,
                "y": 41,
                "wires": [
                    {
                        "id": "56356c99.dd1294"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 41,
                "wires": [
                    {
                        "id": "9f4e53b4.242b38",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "83c7f68e.9a469",
        "type": "subflow",
        "name": "Set Mssql Session",
        "info": "",
        "in": [
            {
                "x": 62,
                "y": 47,
                "wires": [
                    {
                        "id": "50c0bed3.1ab1e8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 647,
                "y": 47,
                "wires": [
                    {
                        "id": "17a347ff.7749e",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "87530aab.adb068",
        "type": "subflow",
        "name": "Dynamic WCS Router",
        "info": "",
        "in": [
            {
                "x": 43.499996185302734,
                "y": 37.069942474365234,
                "wires": [
                    {
                        "id": "1fcc52c6.73e405"
                    },
                    {
                        "id": "1532d79c.35cdd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1097.2349081039429,
                "y": 105.98232078552246,
                "wires": [
                    {
                        "id": "5b6b2ab4.c3115c",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "a0e2e197.345df",
        "type": "subflow",
        "name": "Override Workspace",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "c01a54c3.6e10e8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 60,
                "wires": [
                    {
                        "id": "c01a54c3.6e10e8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "73d26c58.2475cc",
        "type": "subflow",
        "name": "Log Error",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "c19c9e60.baa25"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 310.92309951782227,
                "y": 29.692319869995117,
                "wires": [
                    {
                        "id": "c19c9e60.baa25",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "3c30ab94.447d3c",
        "type": "subflow",
        "name": "Add Tone",
        "info": "",
        "in": [
            {
                "x": 36.000003814697266,
                "y": 33.33333396911621,
                "wires": [
                    {
                        "id": "8028d1ba.6d4238"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 456.00000381469727,
                "y": 33.33333396911621,
                "wires": [
                    {
                        "id": "9a74bd1c.3dec38",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "75456024.34a398",
        "type": "subflow",
        "name": "Get Answer",
        "info": "",
        "in": [
            {
                "x": 47.92173194885254,
                "y": 74.29412078857422,
                "wires": [
                    {
                        "id": "6a2e837c.7b841c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1484.5320510864258,
                "y": 63.48297119140625,
                "wires": [
                    {
                        "id": "77767850.bd513",
                        "port": 0
                    },
                    {
                        "id": "25c719ea.a89abe",
                        "port": 0
                    },
                    {
                        "id": "a6f4e402.de9dd8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "16730253.13013e",
        "type": "subflow",
        "name": "Do Actions",
        "info": "",
        "in": [
            {
                "x": 52.52941131591797,
                "y": 80.41175842285156,
                "wires": [
                    {
                        "id": "e7f48a58.728088"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1310,
                "y": 87,
                "wires": [
                    {
                        "id": "ccea10b3.40dd48",
                        "port": 0
                    },
                    {
                        "id": "a772042b.0f792",
                        "port": 1
                    }
                ]
            }
        ]
    },
    {
        "id": "5c51ec75.e126c4",
        "type": "twilio-api",
        "z": "",
        "sid": "AC01bb5650b0ed32794375e201a2ed542d",
        "from": "+18442310002",
        "name": ""
    },
    {
        "id": "ac1a4c8a.00367",
        "type": "MSSQL-CN",
        "z": "",
        "name": "ucg-mssql",
        "server": "ucg-mssql.database.windows.net",
        "encyption": true,
        "database": "ucg"
    },
    {
        "id": "fc597431.b0b028",
        "type": "MSSQL-UCG-CN",
        "z": "",
        "name": "",
        "server": "",
        "port": "",
        "encyption": true,
        "database": ""
    },
    {
        "id": "c8620933.bc367",
        "type": "function",
        "z": "e6126968.dddaa",
        "name": "Set Session",
        "func": "global.set(\"session_\" + msg.payload.convoUser, msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 179.5,
        "y": 54,
        "wires": [
            []
        ]
    },
    {
        "id": "1c813ef0.4b9109",
        "type": "http request",
        "z": "adec5d86.540a1",
        "name": "Cloudant-HTTPS",
        "method": "POST",
        "ret": "txt",
        "url": "https://bdea5362-c793-408b-9b0a-698c42002903-bluemix.cloudant.com/session",
        "tls": "",
        "x": 205,
        "y": 46,
        "wires": [
            []
        ]
    },
    {
        "id": "eddc016.e71f68",
        "type": "function",
        "z": "52457267.ef5464",
        "name": "Define Session",
        "func": "//New Database Seesion Mgt\n// convoUser - Unique user id across channels\n// ConvoTS - Timestamp of actual WCS Call\n// convoSource - Source Channel Name, will be used in Convo\n//             - Examples (Alexa,Google Home, Slack, Phone, WebChat, Mobile)\n//convoPayload - actual return from WCS\n// Database document will be calles session\n// -- Index on convoUser and convoTS\n// -- We will write all WCS turns into the table\n// -- On retrieval  of the user session\n//    -- We will search by index put back last 5 documents sorted by convoTS descending\n//    -- assures first document will be the latest WCS user convo\n//\n// New fields for Reporting\n// convoDialog - <context.system.dialog_stack[0].dialog_node> from WSC\n// convoIntent - Root Vertical node. (Set ROOT-<name> in root vertical dialog node title in WCS that are applicable)\n// convoDialogType - Type of node - for business scoring SUCCESS, FAIL, etc. (Set SUCCESS-<name> or FAIL-<name> in dialog node title in WCS) \n// convoCounter - unique counter after change of Root Vertical\n// convoDialogElement - Intent or Entity name\n// conovDialogConfidence - confidence score\n// convoTransID = <username><convoIntent><date><convoCounter>     example:  dennisnoto-ROOT-ClaimStatus201701010823\n//   Unique ID for convo to summarize statistics\n// convoUtterance - user utterance\n// convoAnswer - Watson answer\n\n// Can chain  ROOT and FAIL  example ROOT-FAIL-<name>  This would signify a ROOT Vertical node with FAIL as the Type\n// Can chain  ROOT and SUCCESS  example ROOT-SUCCESS-<name>  This would signify a ROOT Vertical node with SUCCESS as the Type\n\nvar d = new Date();\n// MST Time Zone - 6 hours off UTC/GMT\nvar milliMST = 6*60*60*1000;\nvar localeDate = new Date(d.getTime()-milliMST);\nvar foundIntent = false;\nvar foundEntity = false;\nmsg.convoDialogIntents = \" \";\nmsg.convoDialogEntities = \" \";\n\n// Set Utterance\nif (typeof msg.payload.input !== \"undefined\") \n {msg.convoUtterance = msg.payload.input.text;}\n\n//Set Answer\nif (typeof msg.payload.output !== \"undefined\") \n { //msg.convoAnswer = msg.payload.output.text[0]\n  msg.convoAnswer = \"\";\n  var texts = msg.payload.output.text;\n  for (i = 0; i < texts.length; i++) \n    {msg.convoAnswer = msg.convoAnswer + \" \" + texts[i]; }\n     msg.convoAnswer = msg.convoAnswer.replace(/\\[(.*?)\\]/g, \"\");\n  }\n// Set DialogIntents and DialogEntities\nif (typeof msg.payload.intents[0] !== \"undefined\")\n { foundIntent = true;\n   for (i = 0; i < msg.payload.intents.length; i++) \n   { msg.convoDialogIntents = msg.convoDialogIntents + msg.payload.intents[i].intent + \",\"; }  \n }\n\nif (typeof msg.payload.entities[0] !== \"undefined\")\n { foundEntity = true;\n   for (i = 0; i < msg.payload.entities.length; i++) \n   { msg.convoDialogEntities = msg.convoDialogEntities + msg.payload.entities[i].entity + \",\"; }\n }\n// Set confidence\nif (foundIntent === true && foundEntity === true) \n    {msg.convoDialogConfidence = (msg.payload.intents[0].confidence + msg.payload.entities[0].confidence)/2; }\nelse if (foundIntent === true)  \n    {msg.convoDialogConfidence = msg.payload.intents[0].confidence;}\nelse if (foundEntity === true)     \n    {msg.convoDialogConfidence = msg.payload.entities[0].confidence;}\nelse \n    {msg.convoDialogConfidence = 0;}\n\n// Set and change convoIntent by identifying Root Vertical Nodes. (Set ROOT-<name> in root vertical dialog node title in WCS that are applicable)\n// Could find if node is ROOT by calling WCS api for dialog-node, but would be an extra api\nif (typeof msg.payload.context.system.dialog_stack[0] !== \"undefined\") \n {msg.convoDialogNode = msg.payload.context.system.dialog_stack[msg.payload.context.system.dialog_stack.length - 1].dialog_node;\n  \n  if (msg.convoDialogNode === \"root\")\n    {msg.convoDialogNode = msg.payload.output.nodes_visited[msg.payload.output.nodes_visited.length - 1];}   \n }\nelse\n  msg.convoDialogNode = \" \";\n  \n// Find convoIntent\nif (typeof msg.session == \"undefined\") \n     if (msg.convoDialogNode.match(/ROOT-/g) )\n         {msg.convoIntent = msg.convoDialogNode;\n          msg.convoCounter = 1;}   \n    else \n         {msg.convoIntent = \"\";\n          msg.convoCounter = 0;} \n       \nelse if (msg.convoDialogNode.match(/ROOT-/g) )\n   \n   if (msg.convoDialogNode !== msg.session.convoIntent || msg.session.convoIntent === \"\") \n       {msg.convoIntent = msg.convoDialogNode;\n        msg.convoCounter = msg.session.convoCounter + 1;}\n    else  \n       {msg.convoIntent = msg.session.convoIntent;\n        msg.convoCounter = msg.session.convoCounter;}\nelse\n   {msg.convoIntent = msg.session.convoIntent;\n    msg.convoCounter = msg.session.convoCounter;}\n\n// Set node type for scoring. (Set SUCCESS-<name> or FAIL-<name> in dialog node title in WCS) \nif (msg.convoDialogNode.match(/SUCCESS-/g) )\n    {msg.convoDialogType = \"SUCCESS\";\n     msg.convoContainmentScore = 100;}\nelse if (msg.convoDialogNode.match(/FAIL-/g) )\n         {msg.convoDialogType = \"FAIL\";\n          msg.convoContainmentScore = -100;}\nelse if (msg.convoDialogConfidence >= 0.7 )\n         {msg.convoDialogType = \"High_Confidence\";\n          msg.convoContainmentScore = 10;}\nelse if (msg.convoDialogConfidence >= 0.4 && msg.convoDialogConfidence < 0.7)\n         {msg.convoDialogType = \"Medium_Confidence\";\n          msg.convoContainmentScore = 5;}\nelse if (msg.convoDialogConfidence >= 0.2 && msg.convoDialogConfidence < 0.4)\n         {msg.convoDialogType = \"Low_Confidence\";\n          msg.convoContainmentScore = -5;}\nelse if (msg.convoDialogConfidence > 0 && msg.convoDialogConfidence < 0.2)\n         {msg.convoDialogType = \"No_Confidence\";\n          msg.convoContainmentScore = -10;}\nelse {msg.convoDialogType = \"UNKNOWN\";\n      msg.convoContainmentScore = 0;}\n         \n         \nvar sessionMsg = {\n    payload : {\n    convoUser : msg.user,\n    wcs_user_name : msg.params.username,\n    wcs_password : msg.params.password,\n    workspace_id : msg.params.workspace_id,\n    convoTS : localeDate,\n    convoSource : msg.source,\n    convoIntent : msg.convoIntent,\n    convoDialogNode : msg.convoDialogNode,\n    convoDialogType : msg.convoDialogType,\n    convoDialogIntents : msg.convoDialogIntents,\n    convoDialogEntities : msg.convoDialogEntities,\n    convoDialogConfidence : msg.convoDialogConfidence,\n    convoContainmentScore : msg.convoContainmentScore,\n    convoCounter : msg.convoCounter,\n    convoTransID : msg.user + msg.convoIntent + localeDate.getFullYear()+ localeDate.getMonth()+1 + localeDate.getDate() + localeDate.getHours() + msg.convoCounter.toString(), \n    convoUtterance : msg.convoUtterance,\n    convoAnswer : msg.convoAnswer,\n    convoPayload : msg.payload\n    }\n};\n\nreturn [msg,sessionMsg];",
        "outputs": "2",
        "noerr": 0,
        "x": 224.9444580078125,
        "y": 40.222259521484375,
        "wires": [
            [],
            [
                "c5dfed90.5ad1c8"
            ]
        ]
    },
    {
        "id": "c5dfed90.5ad1c8",
        "type": "subflow:99f74819.77fb08",
        "z": "52457267.ef5464",
        "x": 441.9765625,
        "y": 101.17121887207031,
        "wires": []
    },
    {
        "id": "38a84ddb.1b109a",
        "type": "subflow:adec5d86.540a1",
        "z": "52457267.ef5464",
        "name": "SetCloudantSession",
        "x": 456,
        "y": 156,
        "wires": []
    },
    {
        "id": "31360d1b.b235f2",
        "type": "subflow:e6126968.dddaa",
        "z": "52457267.ef5464",
        "x": 456.5,
        "y": 214,
        "wires": []
    },
    {
        "id": "3ae6296.72d81d6",
        "type": "comment",
        "z": "52457267.ef5464",
        "name": "Wire up a Session storage subflow",
        "info": "For prototyping use SetNodeRedSession\n\nFor Enterprise use either Redis or Cloudant\n\nNote you will need a Redis/Cloudant service if\npick one of the Enterprise methods.",
        "x": 164.5,
        "y": 148,
        "wires": []
    },
    {
        "id": "66106324.674b8c",
        "type": "function",
        "z": "9a3e1887.082ce",
        "name": "Get Session",
        "func": "msg.session = global.get(\"session_\" + msg.user); \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 215.5,
        "y": 62,
        "wires": [
            []
        ]
    },
    {
        "id": "6b17feee.d81d48",
        "type": "comment",
        "z": "2388240a.50e91c",
        "name": "Must have cloudant Index on convoUser and convoTS ",
        "info": "",
        "x": 329.48028564453125,
        "y": 99.02044677734375,
        "wires": []
    },
    {
        "id": "c50406ed.2c817",
        "type": "function",
        "z": "2388240a.50e91c",
        "name": "Get Session",
        "func": "msg.savePayload = msg.payload\n\nmsg.headers = {\"Content-type\" : \"application/json\"}\n\n\n//testing new users\n//msg.user = \"dennisnoto@gmail.com\"\n\nmsg.payload = {selector: {\n     convoUser: {$eq: msg.user}     },\n     sort: [{convoUser:\"desc\"},{convoTS: \"desc\"}],    \n     limit: 5\n}\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 174.3333396911621,
        "y": 45.44444561004639,
        "wires": [
            [
                "a6db8e07.937ce8"
            ]
        ]
    },
    {
        "id": "d25d9cc7.111198",
        "type": "function",
        "z": "2388240a.50e91c",
        "name": "Set Session",
        "func": "//sesion object from Cloudant DB\n\nif (typeof msg.payload.docs !== \"undefined\")\n  {msg.session = msg.payload.docs[0]}\nelse \n  { \n      \n}\n   \n//reset payload from channel to continue flow\nmsg.payload = msg.savePayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 584,
        "y": 45,
        "wires": [
            []
        ]
    },
    {
        "id": "a6db8e07.937ce8",
        "type": "http request",
        "z": "2388240a.50e91c",
        "name": "Cloudant-HTTPS",
        "method": "POST",
        "ret": "obj",
        "url": "https://bdea5362-c793-408b-9b0a-698c42002903-bluemix.cloudant.com/session/_find",
        "tls": "",
        "x": 392,
        "y": 46,
        "wires": [
            [
                "d25d9cc7.111198"
            ]
        ]
    },
    {
        "id": "45e18f63.d4984",
        "type": "function",
        "z": "be024f13.40d248",
        "name": "Save payload",
        "func": "msg.savePayload = msg.payload\n\n//msg.payload = [msg.user]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 170.20188903808594,
        "y": 73.05198097229004,
        "wires": [
            [
                "3c007db5.49f5a2"
            ]
        ]
    },
    {
        "id": "42337c2f.812434",
        "type": "function",
        "z": "be024f13.40d248",
        "name": "Set Session",
        "func": "if (typeof msg.payload.convoUser !== \"undefined\" )\n  {msg.session = msg.payload\n  \n  }\nelse \n  { \n      \n}\n   \n//reset payload from channel to continue flow\nmsg.payload = msg.savePayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 657.7659225463867,
        "y": 73.88070869445801,
        "wires": [
            []
        ]
    },
    {
        "id": "92ab3b31.ce168",
        "type": "json",
        "z": "be024f13.40d248",
        "name": "",
        "pretty": false,
        "x": 500.9051742553711,
        "y": 74.14072799682617,
        "wires": [
            [
                "42337c2f.812434"
            ]
        ]
    },
    {
        "id": "1b432e31.ea73ba",
        "type": "subflow:be024f13.40d248",
        "z": "f48845d6.67899",
        "name": "",
        "x": 222.872802734375,
        "y": 43.61785697937012,
        "wires": [
            []
        ]
    },
    {
        "id": "309ede5e.264572",
        "type": "subflow:2388240a.50e91c",
        "z": "f48845d6.67899",
        "x": 231.92857360839844,
        "y": 109.01022052764893,
        "wires": [
            []
        ]
    },
    {
        "id": "772b2051.cf3d78",
        "type": "subflow:9a3e1887.082ce",
        "z": "f48845d6.67899",
        "name": "",
        "x": 227.92857360839844,
        "y": 177.85714530944824,
        "wires": [
            []
        ]
    },
    {
        "id": "50064fe5.6d1a4",
        "type": "comment",
        "z": "f48845d6.67899",
        "name": "Wire up at least one of the Session functions",
        "info": "Choose \n   GetNodeRedSession for prototyping\n   \nEnterprise use\nChoose \n   GetCloudantSeesion for DB Session\nor\n   GetRedisSession for Memory Cache\n   \nPlease note that you will need to wire up the\ncorresponding Set Session subflow",
        "x": 227.5,
        "y": 349,
        "wires": []
    },
    {
        "id": "2f4f9043.32134",
        "type": "http in",
        "z": "1b19f8b1.08de9f",
        "name": "Mobile HTTP in",
        "url": "/mobile",
        "method": "post",
        "swaggerDoc": "",
        "x": 100,
        "y": 101.25000190734863,
        "wires": [
            [
                "e56a6852.51062"
            ]
        ]
    },
    {
        "id": "60377fd8.b60ca",
        "type": "function",
        "z": "1b19f8b1.08de9f",
        "name": "Set Params",
        "func": "msg.source = \"Mobile\"\nvar temp_msg = msg.payload.input\nvar workspace_id = msg.payload.workspace_id\nvar wcs_user_name = msg.payload.wcs_username\nvar wcs_password = msg.payload.wcs_password\n\n// Uncomment when New param to added to all front-ends and delete the default\n//var region = msg.req.query.primary_region\nmsg.region = \"US-SOUTH\";\n//Passed params are the primary config, will be used in the dynamic WCS router subflow to switch back\nmsg.primary_workspace_id = workspace_id;\nmsg.primary_wcs_user_name = wcs_user_name;\nmsg.primary_wcs_password = wcs_password;\nmsg.primary_region = msg.region;\n\nvar fname = msg.payload.fname\nvar lname = msg.payload.lname\nvar nname = msg.payload.nname\nvar cvalue1 = msg.payload.cvalue1\nvar cvalue2 = msg.payload.cvalue2\nvar cvalue3 = msg.payload.cvalue3\n\n\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context\n    wcs_user_name = msg.session.wcs_user_name\n    wcs_password  = msg.session.wcs_password\n    workspace_id  = msg.session.workspace_id \n   }\n   \nif (typeof context.button == \"object\"){\n    delete context.button\n}\nif (typeof context.map == \"object\"){\n    delete context.map\n}\nif (typeof context.movie == \"object\"){\n    delete context.movie\n}\nif (typeof context.checkbox == \"object\"){\n    delete context.checkbox\n}\nif (typeof context.barscore == \"object\"){\n    delete context.barscore\n}\n\n\nif (temp_msg.substring(0,2) == 'Hi') {\n   //Uncomment if you want the convo to start at begining when app starts\n   //context = {}\n}\n\ncontext.username = msg.user\ncontext.fname = fname\ncontext.lname = lname\ncontext.nname = nname\ncontext.cvalue1 = cvalue1\ncontext.cvalue2 = cvalue2\ncontext.cvalue3 = cvalue3 \ncontext.source = msg.source\n\n//node.log(JSON.stringify(msg.payload));\nmsg.payload = temp_msg;\n\nvar params = {\n     context: context, \n     workspace_id : workspace_id,\n     username : wcs_user_name,\n     password : wcs_password\n}\n\nmsg.payload = temp_msg\nmsg.params = params\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "x": 643.333366394043,
        "y": 100.0694408416748,
        "wires": [
            [
                "cbea3e01.242f1",
                "c125793b.82fa78"
            ]
        ]
    },
    {
        "id": "b035f29b.cd81a",
        "type": "function",
        "z": "1b19f8b1.08de9f",
        "name": "Response Msg",
        "func": "var Watson_msg = msg.payload;\n\nvar Watson_response = JSON.stringify(msg.payload.output.text);\nvar Watson_context = JSON.stringify(msg.payload.context);\nnode.log(Watson_response)\n\nMyresponse = Watson_response.substring(2,Watson_response.length-2);\n\nif (Myresponse.substring(0,Myresponse,2) == \"\\\",\\\"\") {\n     Myresponse = Myresponse.substring(3,Myresponse.length)\n}\n    \n// Dennis added because SSML tag was escaping the \" with \\\" and the replace command fixes it!!!!\nMyresponse = Myresponse.replace(/\\\\/g, \"\");\n\nvar response = {\n    text: Myresponse,\n    username: \"Watson\",\n    context: Watson_context\n};\n\nnode.log(\"User ** \" + msg.user + \" Says ** \" +  msg.payload.input.text +  \" ** Response ** \" + Myresponse)\n\nmsg.payload = response\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 1052.958366394043,
        "y": 219.88888549804688,
        "wires": [
            [
                "55ff4025.e8fc88",
                "4bc99db6.3b3c5c"
            ]
        ]
    },
    {
        "id": "55ff4025.e8fc88",
        "type": "http response",
        "z": "1b19f8b1.08de9f",
        "name": "Http Response",
        "statusCode": "",
        "headers": {},
        "x": 1304.9722709655762,
        "y": 217.66665935516357,
        "wires": []
    },
    {
        "id": "9a74bd1c.3dec38",
        "type": "function",
        "z": "3c30ab94.447d3c",
        "name": "add Tone",
        "func": "\n\nmsg.params.context.angerName = msg.response.document_tone.tone_categories[0].tones[0].tone_name;\nmsg.params.context.angerScore = msg.response.document_tone.tone_categories[0].tones[0].score.toFixed(3);\nmsg.params.context.disgustName = msg.response.document_tone.tone_categories[0].tones[1].tone_name;\nmsg.params.context.disgustScore = msg.response.document_tone.tone_categories[0].tones[1].score.toFixed(3);\nmsg.params.context.fearName = msg.response.document_tone.tone_categories[0].tones[2].tone_name;\nmsg.params.context.fearScore = msg.response.document_tone.tone_categories[0].tones[2].score.toFixed(3);\nmsg.params.context.joyName = msg.response.document_tone.tone_categories[0].tones[3].tone_name;\nmsg.params.context.joyScore = msg.response.document_tone.tone_categories[0].tones[3].score.toFixed(3);\nmsg.params.context.sadnessName = msg.response.document_tone.tone_categories[0].tones[4].tone_name;\nmsg.params.context.sadnessScore = msg.response.document_tone.tone_categories[0].tones[4].score.toFixed(3);\n\nmsg.params.context.analyticalName = msg.response.document_tone.tone_categories[1].tones[0].tone_name;\nmsg.params.context.analyticalScore = msg.response.document_tone.tone_categories[1].tones[0].score.toFixed(3);\nmsg.params.context.confidentName = msg.response.document_tone.tone_categories[1].tones[1].tone_name;\nmsg.params.context.confidentScore = msg.response.document_tone.tone_categories[1].tones[1].score.toFixed(3);\nmsg.params.context.tentativeName = msg.response.document_tone.tone_categories[1].tones[2].tone_name;\nmsg.params.context.tentativeScore = msg.response.document_tone.tone_categories[1].tones[2].score.toFixed(3);\n\nmsg.params.context.OpenName = msg.response.document_tone.tone_categories[2].tones[0].tone_name;\nmsg.params.context.OpenScore = msg.response.document_tone.tone_categories[2].tones[0].score.toFixed(3);\nmsg.params.context.conTitle = msg.response.document_tone.tone_categories[2].tones[1].tone_name;\nmsg.params.context.conScore = msg.response.document_tone.tone_categories[2].tones[1].score.toFixed(3);\nmsg.params.context.extName = msg.response.document_tone.tone_categories[2].tones[2].tone_name;\nmsg.params.context.extScore = msg.response.document_tone.tone_categories[2].tones[2].score.toFixed(3);\nmsg.params.context.agreeName = msg.response.document_tone.tone_categories[2].tones[3].tone_name;\nmsg.params.context.agreeScore = msg.response.document_tone.tone_categories[2].tones[3].score.toFixed(3);\nmsg.params.context.emoName = msg.response.document_tone.tone_categories[2].tones[4].tone_name;\nmsg.params.context.emoScore = msg.response.document_tone.tone_categories[2].tones[4].score.toFixed(3);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 316.00000381469727,
        "y": 33.33333396911621,
        "wires": [
            []
        ]
    },
    {
        "id": "e56a6852.51062",
        "type": "function",
        "z": "1b19f8b1.08de9f",
        "name": "Get User",
        "func": "\nmsg.user = msg.payload.username;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "baac9a61.dc6cc"
            ]
        ]
    },
    {
        "id": "b25d888c.dfcac8",
        "type": "http in",
        "z": "3fad3621.99e442",
        "name": "Load HTTP in",
        "url": "/load",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 97.47254180908203,
        "y": 117.63736057281494,
        "wires": [
            [
                "125118f3.9c6aff"
            ]
        ]
    },
    {
        "id": "a7a4b8cb.3748f8",
        "type": "function",
        "z": "3fad3621.99e442",
        "name": "Set Params",
        "func": "msg.source = \"Load\";\n\nvar workspace_id = msg.req.query.workspace_id;\nvar wcs_user_name = msg.req.query.wcs_username;\nvar wcs_password = msg.req.query.wcs_password;\n\n// Uncomment when New param is added to all front-ends and delete the default\n//var region = msg.req.query.primary_region\nmsg.region = \"US-SOUTH\";\n//Passed params are the primary config, will be used in the dynamic WCS router subflow to switch back\nmsg.primary_workspace_id = workspace_id;\nmsg.primary_wcs_user_name = wcs_user_name;\nmsg.primary_wcs_password = wcs_password;\nmsg.primary_region = msg.region;\n\nvar fname = msg.req.query.fname;\n\n//create a null context and test for session existance\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context\n    wcs_user_name = msg.session.wcs_user_name\n    wcs_password  = msg.session.wcs_password\n    workspace_id  = msg.session.workspace_id \n   }\n \nvar newmsg = msg.req.query.text\nnewmsg = newmsg.replace(/'/g, \"\");  \nmsg.payload = newmsg\n\ncontext.fname = fname\n\nvar params = {\n    context: context,\n    workspace_id : workspace_id,\n    username : wcs_user_name,\n    password : wcs_password\n};\n\nmsg.payload = newmsg\nmsg.params = params\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "x": 610.3296813964844,
        "y": 117.63736915588379,
        "wires": [
            [
                "d607cfa4.6f61",
                "858b7538.3af7"
            ]
        ]
    },
    {
        "id": "a2bae10d.ddec8",
        "type": "function",
        "z": "3fad3621.99e442",
        "name": "Respone Msg",
        "func": "var Watson_msg = msg.payload;\nvar Watson_response = JSON.stringify(msg.payload.output.text);\n\nvar texts = msg.payload.output.text\ntotalText = \"\"\nfor (i = 0; i < texts.length; i++) {\n    \n    if (texts[i].lastIndexOf(\"[\") >= 0 ) {\n       findindex = texts[i].lastIndexOf(\"[\");\n       texts[i] = texts[i].substring(0,findindex);\n    } \n \n  // Dennis added because SSML tag was escaping the \" with \\\" and the replace command fixes it!!!!\n   texts[i] = texts[i].replace(/\\\\/g, \"\");\n  //Dennis - Remove XML SSML tags from chat systems\n   texts[i] =  texts[i].replace(/<[^>]+>/g, \"\");\n \n  if (texts[i].lastIndexOf(\"InsMap\") >= 0 ) {\n     findindex = texts[i].lastIndexOf(\"InsMap\")\n     texts[i] = texts[i].substring(0,findindex)\n  } \n  \n  totalText = totalText + \" \" + texts[i]\n}\n\nnode.log(\"User ** \" + msg.user + \" Says ** \" +  msg.payload.input.text +  \" ** Response ** \" + totalText)\n\nmsg.payload = totalText;\n\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 1087.154037475586,
        "y": 237.0989170074463,
        "wires": [
            [
                "f9ebd654.0abf38",
                "bfe109be.2128e8"
            ]
        ]
    },
    {
        "id": "125118f3.9c6aff",
        "type": "function",
        "z": "3fad3621.99e442",
        "name": "Get User",
        "func": "\nmsg.user =  msg.req.query.user_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 254.61540985107422,
        "y": 116.92308044433594,
        "wires": [
            [
                "2f4a8e9a.d0de9a"
            ]
        ]
    },
    {
        "id": "f9ebd654.0abf38",
        "type": "http response",
        "z": "3fad3621.99e442",
        "name": "Http Response",
        "x": 1322.8498992919922,
        "y": 235.00366020202637,
        "wires": []
    },
    {
        "id": "10f4103c.ce5908",
        "type": "http in",
        "z": "5c4d249a.7988f4",
        "name": "Alexa Request",
        "url": "/Alexa",
        "method": "post",
        "swaggerDoc": "",
        "x": 81.42857360839844,
        "y": 140.15872192382812,
        "wires": [
            [
                "f433a5aa.f3a5c8"
            ]
        ]
    },
    {
        "id": "f433a5aa.f3a5c8",
        "type": "switch",
        "z": "5c4d249a.7988f4",
        "name": "Sort Request",
        "property": "payload.request.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "LaunchRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IntentRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SessionEndedRequest",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 4,
        "x": 257.8253936767578,
        "y": 138.84127044677734,
        "wires": [
            [
                "fefc0181.ac8d4"
            ],
            [
                "66c544aa.40fca4"
            ],
            [],
            []
        ]
    },
    {
        "id": "837fbb5a.054098",
        "type": "function",
        "z": "5c4d249a.7988f4",
        "name": "Set Params",
        "func": "msg.source = \"Alexa\"\nvar fname = msg.req.query.fname;\nvar workspace_id = msg.req.query.workspace_id;\nvar wcs_user_name = msg.req.query.wcs_username\nvar wcs_password = msg.req.query.wcs_password\n\n// Uncomment when New param is added to all front-ends and delete the default\n//var region = msg.req.query.primary_region\nmsg.region = \"US-SOUTH\";\n//Passed params are the primary config, will be used in the dynamic WCS router subflow to switch back\nmsg.primary_workspace_id = workspace_id;\nmsg.primary_wcs_user_name = wcs_user_name;\nmsg.primary_wcs_password = wcs_password;\nmsg.primary_region = msg.region;\n\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context\n    wcs_user_name = msg.session.wcs_user_name\n    wcs_password  = msg.session.wcs_password\n    workspace_id  = msg.session.workspace_id    \n   }\n\nif (msg.payload.request.type ==\"LaunchRequest\") {\n   var temp_msg = \"Hello\";\n   //Uncomment if you want the convo to start at begining when a Launch is dedected\n   //context = {}\n}\nelse {\n   var temp_msg = msg.payload.request.intent.slots.command.value; \n}\n\n//Zero out maps \nvar map = JSON.parse(\"{}\");  \n\nvar newmsg = temp_msg.replace(\"Watson\", \"\");\nmsg.payload = newmsg;\n\n\nglobal.set(\"last_question\",newmsg);\n\ncontext.fname = fname\ncontext.map = map\n\nvar params = {\n    context : context,\n    workspace_id : workspace_id,\n    username : wcs_user_name,\n    password : wcs_password,\n    source : msg.source\n};\n\nmsg.payload = newmsg\nmsg.params = params\n\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 910.0893135070801,
        "y": 121.51785087585449,
        "wires": [
            [
                "a29f3273.fc84b",
                "23df69e2.9c5cde"
            ]
        ]
    },
    {
        "id": "66c544aa.40fca4",
        "type": "switch",
        "z": "5c4d249a.7988f4",
        "name": "Sort by Intent",
        "property": "payload.request.intent.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CallWatson",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Fradulent_Trancation",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 405.3332824707031,
        "y": 247.11111450195312,
        "wires": [
            [
                "fefc0181.ac8d4"
            ],
            [
                "fefc0181.ac8d4"
            ],
            []
        ]
    },
    {
        "id": "a29f3273.fc84b",
        "type": "debug",
        "z": "5c4d249a.7988f4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1071.2360649108887,
        "y": 45,
        "wires": []
    },
    {
        "id": "67f2bc62.f0ee3c",
        "type": "function",
        "z": "5c4d249a.7988f4",
        "name": "Response Msg",
        "func": "//var Watson_msg = msg.payload;\n//var Watson_response = JSON.stringify(msg.payload.output.text);\n//var Watson_context = JSON.stringify(msg.payload.context);\nvar Watson_contextOBJ = msg.payload.context;\n//node.log(Watson_response);\n//Myresponse = Watson_response.substring(2,Watson_response.length-2);\n\nvar texts = msg.payload.output.text\n\ntotalText = \"\"\nfor (i = 0; i < texts.length; i++) {\n    \n    if (texts[i].lastIndexOf(\"[\") >= 0 ) {\n       findindex = texts[i].lastIndexOf(\"[\");\n       texts[i] = texts[i].substring(0,findindex);\n    } \n  \n  texts[i] = texts[i].replace(/\\\\/g, \"\");\n  texts[i] = texts[i].replace('=\\\"number\\\" format=\\\"telephone\\\"', '=\\\"digits\\\"');\n  \n  totalText = totalText + \" \" + texts[i]\n}\n\nvar myquestion = global.get(\"last_question\");\n\nvar myEndSession = false;    \n\nif (myquestion.lastIndexOf(\"goodbye\") >= 0 )\n   {myEndSession = true}\n\n\nvar response = {\n    version : \"1.0\",\n    response : { \n       outputSpeech : { \n          //type : \"PlainText\",\n          type : \"SSML\",\n          ssml: \"<speak>\" + totalText + \"</speak>\"\n        },        \n    shouldEndSession : myEndSession,\n   // context: Watson_context\n    }\n};\n\n\n//json map\n//var mapjsonStr = Watson_context.match(/\\\"map.*Yes\\\"/);\nvar mapjsonObj = Watson_contextOBJ.map;\nif (typeof mapjsonObj.values != \"undefined\") {\n//node.log(\"mapjson: \" + mapjsonStr);\n//if (mapjsonStr  !== null){\n    component = \"map\";\n    for (var c in mapjsonObj.values) {\n      mapStr = mapjsonObj.values[c] + \"&size=500x300\";\n    \n    response = {\n      version : \"1.0\",\n      response : { \n         outputSpeech : { \n            type : \"SSML\",\n            ssml: \"<speak>\" + totalText + \" Check your Alexa app for the map\" + \"</speak>\"\n          },        \n      card: {\n        type: \"Standard\",\n        title: \"Google Map\",\n        text: \"\",\n        image: {\n          smallImageUrl: mapjsonObj.values[c] + \"&size=500x300\",\n          largeImageUrl: mapjsonObj.values[c] + \"&size=600x400\"\n        }\n      },\n      shouldEndSession : myEndSession,\n   // context: Watson_context\n      }\n    \n     };   \n    \n   }\n}\n\nnode.log(\"User ** \" + msg.user + \" Says ** \" +  msg.payload.input.text +  \" ** Response ** \" + totalText)\n\nmsg.payload = response\n\nreturn  msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1290.7856750488281,
        "y": 237.571439743042,
        "wires": [
            [
                "405b64ad.ffce54",
                "984190c0.a1f1a8"
            ]
        ]
    },
    {
        "id": "405b64ad.ffce54",
        "type": "http response",
        "z": "5c4d249a.7988f4",
        "name": "Http Response",
        "statusCode": "",
        "headers": {},
        "x": 1522.7499885559082,
        "y": 238.9999942779541,
        "wires": []
    },
    {
        "id": "984190c0.a1f1a8",
        "type": "debug",
        "z": "5c4d249a.7988f4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1484.8066291809082,
        "y": 169.78635597229004,
        "wires": []
    },
    {
        "id": "fefc0181.ac8d4",
        "type": "function",
        "z": "5c4d249a.7988f4",
        "name": "Get User",
        "func": "\nvar user_temp = msg.payload.session.user.userId;\nmsg.user =  user_temp.substring(user_temp.length-10, user_temp.length);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 567.8571166992188,
        "y": 120,
        "wires": [
            [
                "84b2e08e.78d8a8"
            ]
        ]
    },
    {
        "id": "9f4357ee.4b5cd",
        "type": "http in",
        "z": "e85cff5a.1f786",
        "name": "Slack HTTP in",
        "url": "/slack",
        "method": "post",
        "swaggerDoc": "",
        "x": 85,
        "y": 121.25000095367432,
        "wires": [
            [
                "363c032.aba1ffc"
            ]
        ]
    },
    {
        "id": "363c032.aba1ffc",
        "type": "function",
        "z": "e85cff5a.1f786",
        "name": "slackVars",
        "func": "var channel = msg.payload.channel_name;\nvar username = msg.payload.user_name;\nvar team = msg.payload.team_domain;\nvar text = msg.payload.text;\n\nnode.log(\"Team:\" + team);\nnode.log(\"username:\" + username);\nnode.log(\"channel:\" + channel);\nnode.log(\"text:\" + text);\n\nif(username == \"slackbot\") {\n    global.set(\"tlength\",0);}\nelse\n{global.set(\"tlength\",text.length); }\n\nvar test = global.get(\"tlength\")\nnode.log(\"length:\" + test);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 261.25,
        "y": 121.25,
        "wires": [
            [
                "eb4608fa.2e4d18"
            ]
        ]
    },
    {
        "id": "eb4608fa.2e4d18",
        "type": "switch",
        "z": "e85cff5a.1f786",
        "name": "",
        "property": "tlength",
        "propertyType": "global",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 428.75,
        "y": 120.62500095367432,
        "wires": [
            [
                "1e82810b.cbc8c7"
            ],
            [
                "30f137a4.ba517"
            ]
        ]
    },
    {
        "id": "99430d47.227e48",
        "type": "function",
        "z": "e85cff5a.1f786",
        "name": "Set Params",
        "func": "msg.source = \"Slack\"\nvar channel = msg.payload.channel_name;\nvar team = msg.payload.team_domain;\nvar workspace_id = msg.req.query.workspace_id;\nvar wcs_user_name = msg.req.query.wcs_username;\nvar wcs_password = msg.req.query.wcs_password;\n\n// Uncomment when New param is added to all front-ends and delete the default\n//var region = msg.req.query.primary_region\nmsg.region = \"US-SOUTH\";\n//Passed params are the primary config, will be used in the dynamic WCS router subflow to switch back\nmsg.primary_workspace_id = workspace_id;\nmsg.primary_wcs_user_name = wcs_user_name;\nmsg.primary_wcs_password = wcs_password;\nmsg.primary_region = msg.region;\n\nvar fname = msg.req.query.fname;\n\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context\n    wcs_user_name = msg.session.wcs_user_name\n    wcs_password  = msg.session.wcs_password\n    workspace_id  = msg.session.workspace_id    \n   }\n   \nvar temp_msg = msg.payload.text;\nvar newmsg = temp_msg.replace(\"Watson\", \"\");\nmsg.payload = newmsg;\n\nglobal.set(\"last_question\",newmsg);\nglobal.set(\"user\",msg.user);\ncontext.fname = fname\n\nvar params = {\n    context: context,\n    workspace_id : workspace_id,\n    username : wcs_user_name,\n    password : wcs_password,\n    source : msg.source\n};\n\nmsg.payload = newmsg\nmsg.params = params\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 921.2499771118164,
        "y": 100.62500190734863,
        "wires": [
            [
                "9decb34.6b0ab5",
                "761db850.dd9db8"
            ]
        ]
    },
    {
        "id": "30f137a4.ba517",
        "type": "function",
        "z": "e85cff5a.1f786",
        "name": "unhandled chat",
        "func": "node.log(msg.payload.text);",
        "outputs": 1,
        "noerr": 0,
        "x": 598.75,
        "y": 160.62500095367432,
        "wires": [
            []
        ]
    },
    {
        "id": "5ec2009e.4793d",
        "type": "function",
        "z": "e85cff5a.1f786",
        "name": "1st Level msg",
        "func": "//var Watson_msg = msg.payload;\n//var Watson_response = JSON.stringify(msg.payload.output.text);\n//Myresponse = Watson_response.substring(2,Watson_response.length-2);\n// Dennis added because SSML tag was escaping the \" with \\\" and the replace command fixes it!!!!\n//Myresponse = Myresponse.replace(/\\\\/g, \"\");\n//Dennis - Remove XML SSML tags from chat systems\n//Myresponse = Myresponse.replace(/<[^>]+>/g, \"\");\n//var texts = Myresponse.split(\"\\\",\\\"\");\n\nvar texts = msg.payload.output.text\n\nfor (i = 0; i < texts.length; i++) {\n   Myresponse = texts[i];\n\n// causing issues for multiple output responses\n//if (Myresponse.match(\"\\\",\\\"\")) {\n  if (Myresponse.substring(0,Myresponse,2) == \"\\\",\\\"\") {\n     Myresponse = Myresponse.substring(3,Myresponse.length)\n}\n \nif (Myresponse.lastIndexOf(\"[\") >= 0 ) {\n     findindex = Myresponse.lastIndexOf(\"[\")\n     Myresponse = Myresponse.substring(0,findindex)\n} \nif (Myresponse.lastIndexOf(\"InsMap\") >= 0 ) {\n     findindex = Myresponse.lastIndexOf(\"InsMap\")\n     Myresponse = Myresponse.substring(0,findindex)\n} \n\n\nif (Myresponse.lastIndexOf(\"future training\") >= 0) {\n var response = {\n    text: \"Sorry I can't answer this question. Escalating to Second Level Support, please stand by\" ,\n    question: Myresponse,\n    escalate: \"Yes\",\n    username: \"Watson\",\n    icon_url: \"https://developer.ibm.com/watson/wp-content/uploads/sites/19/2015/01/IBM_Watson_avatar_pos.png\"\n};}\n\nelse {\n var response = {\n    text: Myresponse,\n    username: \"Watson\",\n    icon_url: \"https://developer.ibm.com/watson/wp-content/uploads/sites/19/2015/01/IBM_Watson_avatar_pos.png\"\n};}\n\nnode.log(\"User ** \" + msg.user + \" Says ** \" +  msg.payload.input.text +  \" ** Response ** \" + Myresponse)\nmsg.payload = response;\n\nnode.send([msg,msg]);\n}\nreturn null;\n",
        "outputs": "2",
        "noerr": 0,
        "x": 1167.7499923706055,
        "y": 261.6250057220459,
        "wires": [
            [
                "dd47a31b.84b06",
                "c519dca6.0abc18"
            ],
            [
                "d26e94df.141c48"
            ]
        ]
    },
    {
        "id": "dd47a31b.84b06",
        "type": "http request",
        "z": "e85cff5a.1f786",
        "name": "Slack Response",
        "method": "POST",
        "ret": "txt",
        "url": "https://hooks.slack.com/services/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",
        "tls": "",
        "x": 1422.527847290039,
        "y": 256.06947898864746,
        "wires": [
            []
        ]
    },
    {
        "id": "c519dca6.0abc18",
        "type": "debug",
        "z": "e85cff5a.1f786",
        "name": "Level 1 message",
        "active": true,
        "console": "false",
        "complete": "payload.text",
        "x": 1429.7501373291016,
        "y": 305.9027919769287,
        "wires": []
    },
    {
        "id": "d26e94df.141c48",
        "type": "function",
        "z": "e85cff5a.1f786",
        "name": "2nd Level Msg",
        "func": "\nnode.log(\"text:\" + msg.payload.text);\n\nif (msg.payload.escalate == \"Yes\"){\n  \nvar response = {\n    text: \"Level 1 Support member, \" + global.get(\"user\") + \", asked: \" + global.get(\"last_question\"),\n    username: \"Watson\",\n    icon_url: \"https://developer.ibm.com/watson/wp-content/uploads/sites/19/2015/01/IBM_Watson_avatar_pos.png\"\n};\n\nvar newMsg = {payload: response};}\n\nelse {\n    newMsg = null;\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1167.7499923706055,
        "y": 361.6250057220459,
        "wires": [
            [
                "a2975f5b.6161b8",
                "f6469b3e.38fa38"
            ]
        ]
    },
    {
        "id": "a2975f5b.6161b8",
        "type": "http request",
        "z": "e85cff5a.1f786",
        "name": "Escalate 2ndLevell",
        "method": "POST",
        "ret": "txt",
        "url": "https://hooks.slack.com/services/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",
        "tls": "",
        "x": 1437.7499923706055,
        "y": 361.6250057220459,
        "wires": [
            []
        ]
    },
    {
        "id": "f6469b3e.38fa38",
        "type": "debug",
        "z": "e85cff5a.1f786",
        "name": "Level 2 message",
        "active": true,
        "console": "false",
        "complete": "payload.text",
        "x": 1437.7499923706055,
        "y": 421.6250057220459,
        "wires": []
    },
    {
        "id": "1e82810b.cbc8c7",
        "type": "function",
        "z": "e85cff5a.1f786",
        "name": "Get User",
        "func": "\nmsg.user = msg.payload.user_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 578.75,
        "y": 100.62500095367432,
        "wires": [
            [
                "a9e362d4.a71038"
            ]
        ]
    },
    {
        "id": "31d94b6c.9677dc",
        "type": "http in",
        "z": "c1e9a4dc.c42cf8",
        "name": "Mobile HTTP in",
        "url": "/smooch",
        "method": "post",
        "swaggerDoc": "",
        "x": 85,
        "y": 188.00000286102295,
        "wires": [
            [
                "3578e40e.b2c1f4",
                "9fa363da.b78838"
            ]
        ]
    },
    {
        "id": "b632470d.abaae",
        "type": "function",
        "z": "c1e9a4dc.c42cf8",
        "name": "Set Params",
        "func": "msg.source = \"WebChat\"\nvar workspace_id = msg.req.query.workspace_id;\nvar wcs_user_name = msg.req.query.wcs_username\nvar wcs_password = msg.req.query.wcs_password\n\n// Uncomment when New param to added to all front-ends and delete the default\n//var region = msg.req.query.primary_region\nmsg.region = \"US-SOUTH\";\n//Passed params are the primary config, will be used in the dynamic WCS router subflow to switch back\nmsg.primary_workspace_id = workspace_id;\nmsg.primary_wcs_user_name = wcs_user_name;\nmsg.primary_wcs_password = wcs_password;\nmsg.primary_region = msg.region;\n\nmsg.fromUrl = msg.payload.appUser.devices[0].info.currentUrl;\nvar fname = msg.req.query.fname;\n\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context\n    wcs_user_name = msg.session.wcs_user_name\n    wcs_password  = msg.session.wcs_password\n    workspace_id  = msg.session.workspace_id    \n   }\n\nif (typeof(msg.actionPayload) !== \"undefined\"){\n   input = msg.actionPayload;  \n  \n}else {\n   input = msg.payload.messages[0].text; \n}\n\n//Zero out map Json \nvar map = JSON.parse(\"{}\");  \nvar button = JSON.parse(\"{}\");\n\n\ncontext.fname = fname\ncontext.map = map\ncontext.button = button\ncontext.source = msg.source\n\nvar params = {\n     context: context,\n     workspace_id : workspace_id,\n     username : wcs_user_name,\n     password : wcs_password\n}\n\nmsg.payload = input;\nmsg.params = params;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 631.2499771118164,
        "y": 139.99998569488525,
        "wires": [
            [
                "489a7c28.7a3e1c",
                "b58bc39b.05dad8"
            ]
        ]
    },
    {
        "id": "94d54387.4561f8",
        "type": "function",
        "z": "c1e9a4dc.c42cf8",
        "name": "Response Msg",
        "func": "\nmsg.headers = {\n    'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFwcF81ODc5YWQ3NWQ2Y2MwMjJkMDAzOWQ4MzkifQ.eyJzY29wZSI6ImFwcCJ9.B3vjbL3IP1nZwndfWF9jr8V9XzsGIiRfQ_Hoq5ya9p8'\n     };\n\nvar Watson_msg = JSON.stringify(msg.payload.output.text);\nvar Watson_context = JSON.stringify(msg.payload.context);\nvar Watson_contextOBJ = msg.payload.context;\n\nvar Myresponse = Watson_msg.substring(2,Watson_msg.length-2);\n\n// Dennis added because SSML tag was escaping the \" with \\\" and the replace command fixes it!!!!\nMyresponse = Myresponse.replace(/\\\\/g, \"\");\n//Dennis - Remove XML SSML tags from chat systems\nMyresponse = Myresponse.replace(/<[^>]+>/g, \"\");\n\nvar Newmsg = \"\";\nvar response = {};\nvar component = \"\";\n\n//Remove old maps\nif (Myresponse.lastIndexOf(\"InsMap\") >= 0 ) {\n     findindex = Myresponse.lastIndexOf(\"InsMap\");\n     Myresponse = Myresponse.substring(0,findindex);\n}\n//Found an array of outputs\nvar texts = msg.payload.output.text\n//var texts = Myresponse.split(\"\\\",\\\"\");\nfor (i = 0; i < texts.length; i++) {\n Newmsg = texts[i]; \n var component = \"\";\n var mapStr = \"\";\n var actions = {};\n var actionsArr = [];\n var actionsRArr = [];\n var buttonMTArr = [\"Here's your street view map\", \"Here's your satellite view map\"];\n //simple buttons\n if (Newmsg.lastIndexOf(\"[\") >= 0 ) {\n     component = \"button\";\n     findindex = Newmsg.lastIndexOf(\"[\");\n     findLastindex = Newmsg.lastIndexOf(\"]\");\n     tempStr = Newmsg;\n     Newmsg = Newmsg.substring(0,findindex); // Message without buttons\n     var buttonArr = tempStr.substring(findindex+1, findLastindex).split(\",\");\n    \n     for (a = 0; a < buttonArr.length; a++) { \n        actionsArr.push({\"type\": \"reply\",\"text\": buttonArr[a],\"payload\": buttonArr[a]});\n     }\n     actions = {\"actions\" : actionsArr};\n }\n\n //json map\n //var mapjsonStr = Watson_context.match(/\\\"map.*Yes\\\"/);\n mapjsonObj = Watson_contextOBJ.map;\n if (typeof mapjsonObj.values != \"undefined\") {\n //node.log(\"mapjson: \" + mapjsonStr);\n //if (mapjsonStr  !== null){\n    component = \"map\";\n    for (var c in mapjsonObj.values) {\n      mapStr = mapjsonObj.values[c] + \"&size=500x300\";\n      actionsArr.push({\"text\": buttonMTArr[c] +\" \",\"type\":\"link\",\"uri\": mapStr});\n    }\n }\n\n //json button - Note for WCS - can't have a mixed array of Link and Reply. Smooch-limitation\n // Can implement postback buttons, but must handle postback api call. Stubbed at the moment.\n //var buttonjsonStr = Watson_context.match(/\\\"button.*Yes\\\"/);\n var found_link = 0;\n //node.log(\"buttonjson: \" + buttonjsonStr);\n buttonjsonObj = Watson_contextOBJ.button;\n if (typeof buttonjsonObj.values != \"undefined\") {\n  \n    for (var c in buttonjsonObj.values) {\n      buttonStr = buttonjsonObj.values[c];\n      if (buttonStr.lastIndexOf(\"|\") >= 0 ) {\n        found_link = 1;\n        buttonItems = buttonStr.split(\"|\");\n        button_title = buttonItems[0];\n        button_url = buttonItems[1];\n        \n        actionsArr.push({\"type\": \"link\",\"text\": button_title,\"uri\": button_url}); \n      }\n      else {\n        button_title = buttonStr;  \n        actionsRArr.push({\"type\": \"reply\",\"text\": button_title,\"payload\": button_title}); \n      }\n    }  \n    if (found_link > 0) {\n       component = \"buttonLink\"; \n    }else {\n      component = \"buttonReply\";   \n    }\n }\n\n //old maps\n if (Newmsg.lastIndexOf(\"InsMap\") >= 0 ) {\n     findindex = Newmsg.lastIndexOf(\"InsMap\");\n     Newmsg = Newmsg.substring(0,findindex);\n } \n\n // Dennis added because SSML tag was escaping the \" with \\\" and the replace command fixes it!!!!\n Newmsg = Newmsg.replace(/\\\\/g, \"\");\n //Dennis - Remove XML SSML tags from chat systems\n Newmsg = Newmsg.replace(/<[^>]+>/g, \"\");\n\n node.log(\"User ** \" + msg.user + \" Says ** \" +  msg.payload.input.text +  \" ** Response ** \" + Newmsg)\n\n msg.url = \"https://api.smooch.io/v1/appusers/\" + msg.user + \"/messages\";\n\n switch(component) {\n    case 'buttonReply':\n     response = {\n        role : \"appMaker\",\n        type : \"text\",\n        text : Newmsg,\n        email: \"dennisnoto@gmail.com\",\n        actions : actionsRArr\n        };\n        break;\n    case 'buttonLink':\n     response = {\n        role : \"appMaker\",\n        type : \"text\",\n        text : Newmsg,\n        email: \"dennisnoto@gmail.com\",\n        actions : actionsArr\n        };\n        break;\n    case 'map':\n    response = {\n        role : \"appMaker\",\n        type : \"image\",\n        text : Newmsg,\n        email: \"dennisnoto@gmail.com\",\n        mediaUrl: mapStr,\n        mediaType: \"image/jpeg\",\n        actions : actionsArr\n        };\n        break;\n    default:\n    response = {\n        role : \"appMaker\",\n        type : \"text\",\n        text : Newmsg,\n        email: \"dennisnoto@gmail.com\",\n        actions : actionsArr};\n }\n\n if (i != texts.length -1) {\n   response.actions = [];  \n }     \n\n  msg.payload = response;\n  node.send(msg);\n  \n if (actionsRArr.length > 0 &&  component == \"buttonLink\"){\n  response = {\n        role : \"appMaker\",\n        type : \"text\",\n        text : \"\",\n        email: \"dennisnoto@gmail.com\",\n        actions : actionsRArr\n      \n  };\n \n  if (i == texts.length -1) {\n    msg.payload = response;\n    node.send(msg);  \n  }\n }\n}\n\nreturn null;",
        "outputs": "1",
        "noerr": 0,
        "x": 1280,
        "y": 280,
        "wires": [
            [
                "2aec4c9b.cd963c",
                "1f6a18d9.68566f"
            ]
        ]
    },
    {
        "id": "4d6e27c.bb5ed58",
        "type": "http request",
        "z": "c1e9a4dc.c42cf8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 1721.2499885559082,
        "y": 279.9999952316284,
        "wires": [
            [
                "7bdb68df.47d5b8"
            ]
        ]
    },
    {
        "id": "7bdb68df.47d5b8",
        "type": "debug",
        "z": "c1e9a4dc.c42cf8",
        "name": "Call to Smooch",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1760,
        "y": 180,
        "wires": []
    },
    {
        "id": "2fe85c6a.4318e4",
        "type": "function",
        "z": "c1e9a4dc.c42cf8",
        "name": "Send post message",
        "func": "\nmsg.headers = {\n    'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFwcF81ODc5YWQ3NWQ2Y2MwMjJkMDAzOWQ4MzkifQ.eyJzY29wZSI6ImFwcCJ9.B3vjbL3IP1nZwndfWF9jr8V9XzsGIiRfQ_Hoq5ya9p8'\n     };\n\nmsg.url = \"https://api.smooch.io/v1/appusers/\" + \"2e62e92fdee34a6ebd225c5a\" + \"/messages\";\n\nvar response = {\n    role : \"appMaker\",\n    type : \"text\",\n    text : \"hey what's up!!!\",\n    email: \"dennisnoto@gmail.com\",\n    actions : []\n};\n\nmsg.payload = response;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 600,
        "wires": [
            [
                "4bc3c94b.bd985"
            ]
        ]
    },
    {
        "id": "3714976a.327838",
        "type": "inject",
        "z": "c1e9a4dc.c42cf8",
        "name": "",
        "topic": "go",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 600,
        "wires": [
            [
                "2fe85c6a.4318e4"
            ]
        ]
    },
    {
        "id": "3578e40e.b2c1f4",
        "type": "http response",
        "z": "c1e9a4dc.c42cf8",
        "name": "",
        "x": 270,
        "y": 240,
        "wires": []
    },
    {
        "id": "2aec4c9b.cd963c",
        "type": "debug",
        "z": "c1e9a4dc.c42cf8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1430,
        "y": 160,
        "wires": []
    },
    {
        "id": "a89f8c62.5b702",
        "type": "http in",
        "z": "c1e9a4dc.c42cf8",
        "name": "Postbacks",
        "url": "/smooch-postback",
        "method": "post",
        "swaggerDoc": "",
        "x": 87.50003051757812,
        "y": 297.12502574920654,
        "wires": [
            [
                "3578e40e.b2c1f4",
                "91e79f27.32741"
            ]
        ]
    },
    {
        "id": "91e79f27.32741",
        "type": "function",
        "z": "c1e9a4dc.c42cf8",
        "name": "actionPayload",
        "func": "msg.headers = {\n    'app-token': '7788i215s5s6si7bp23uv33o9'\n     };\n\nmsg.user = msg.payload.appUser.userId;\nmsg.url = \"https://api.smooch.io/v1/appusers/\" + msg.user + \"/messages\";\nmsg.actionPayload = msg.payload.postbacks[0].action.payload;\n\nresponse = {\n        role : \"appUser\",\n        type : \"text\",\n        text : msg.actionPayload\n};\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 141.76921844482422,
        "y": 389.9999990463257,
        "wires": [
            [
                "3c546e03.50546a"
            ]
        ]
    },
    {
        "id": "3c546e03.50546a",
        "type": "http request",
        "z": "c1e9a4dc.c42cf8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 360.53843688964844,
        "y": 391.4615783691406,
        "wires": [
            []
        ]
    },
    {
        "id": "1f6a18d9.68566f",
        "type": "delay",
        "z": "c1e9a4dc.c42cf8",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1490,
        "y": 280,
        "wires": [
            [
                "4d6e27c.bb5ed58"
            ]
        ]
    },
    {
        "id": "2c322e9c.ce95ea",
        "type": "function",
        "z": "c1e9a4dc.c42cf8",
        "name": "Possible Reg only Response Message",
        "func": "\nvar incomingTexts = msg.payload.output.text\n\nif (typeof(msg.actionPayload) !== \"undefined\"){\n   currentCommand = msg.actionPayload;  \n}else {\n   currentCommand = \"\"; \n}\ncurrentCommand = currentCommand.toUpperCase();\nfor (i = 0; i < incomingTexts.length; i++) {\n     var instring = incomingTexts[i];\n     if ((instring.includes(\"my name is \")||instring.includes(\"my name's \")||instring.includes(\"I name is \")||instring.includes(\"My name is \")||instring.includes(\"My name's \"))&&( currentCommand == \"HELLO REGIONS ASSIST\")){\n    if (instring.includes(\"my name is \"))instring = instring.replace(\"my name is \",\"\");\n    if (instring.includes(\"my name's \"))instring = instring.replace(\"my name's \",\"\");\n    if (instring.includes(\"My name is \"))instring = instring.replace(\"My name is \",\"\");\n    if (instring.includes(\"My name's \"))instring = instring.replace(\"My name's \",\"\");\n    if (instring.includes(\"I name is\"))instring = instring.replace(\"I name is \",\"\");\n    node.warn(\"before parse msg is \"+instring);\n    msg.payload.output.text[i] = instring;\n    \n    }\n}\n\nmsg.headers = {\n    'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImFwcF81ODc5YWQ3NWQ2Y2MwMjJkMDAzOWQ4MzkifQ.eyJzY29wZSI6ImFwcCJ9.B3vjbL3IP1nZwndfWF9jr8V9XzsGIiRfQ_Hoq5ya9p8'\n     };\n\nvar Watson_msg = JSON.stringify(msg.payload.output.text);\nvar Watson_context = JSON.stringify(msg.payload.context);\nvar Watson_contextOBJ = msg.payload.context;\n\nvar Myresponse = Watson_msg.substring(2,Watson_msg.length-2);\nnode.log(\"****context**** \" + Watson_context);\n\n// Dennis added because SSML tag was escaping the \" with \\\" and the replace command fixes it!!!!\nMyresponse = Myresponse.replace(/\\\\/g, \"\");\n//Dennis - Remove XML SSML tags from chat systems\nMyresponse = Myresponse.replace(/<[^>]+>/g, \"\");\n\nvar Newmsg = \"\";\nvar response = {};\nvar component = \"\";\nnode.log(\"*********** Output is ************\" + Myresponse);\n//Remove old maps\nif (Myresponse.lastIndexOf(\"InsMap\") >= 0 ) {\n     findindex = Myresponse.lastIndexOf(\"InsMap\");\n     Myresponse = Myresponse.substring(0,findindex);\n     node.log(\"Found a old maps at index:\", findindex);\n     node.log(Myresponse);\n}\n//Found an array of outputs\nvar texts = msg.payload.output.text\n//var texts = Myresponse.split(\"\\\",\\\"\");\nfor (i = 0; i < texts.length; i++) {\n     Newmsg = texts[i]; \n     node.log(\"**********  length ******* \" + texts.length);\n     node.log(\"start with \" + Newmsg);\nvar component = \"\";\nvar mapStr = \"\";\nvar actions = {};\nvar actionsArr = [];\nvar actionsRArr = [];\nvar buttonMTArr = [\"Here's your street view map\", \"Here's your satellite view map\"];\n//simple buttons\nif (Newmsg.lastIndexOf(\"[\") >= 0 ) {\n     component = \"button\";\n     findindex = Newmsg.lastIndexOf(\"[\");\n     node.log(\"Found a buttons at index:\", findindex);\n     findLastindex = Newmsg.lastIndexOf(\"]\");\n     tempStr = Newmsg;\n     Newmsg = Newmsg.substring(0,findindex); // Message without buttons\n     var buttonArr = tempStr.substring(findindex+1, findLastindex).split(\",\");\n    \n     for (a = 0; a < buttonArr.length; a++) { \n        actionsArr.push({\"type\": \"reply\",\"text\": buttonArr[a],\"payload\": buttonArr[a]});\n     }\n     actions = {\"actions\" : actionsArr};\n}\n\n//json map\nnode.log(\"context: \" + Watson_context);\n//var mapjsonStr = Watson_context.match(/\\\"map.*Yes\\\"/);\nmapjsonObj = Watson_contextOBJ.map;\nif (typeof mapjsonObj.values != \"undefined\") {\n//node.log(\"mapjson: \" + mapjsonStr);\n//if (mapjsonStr  !== null){\n    component = \"map\";\n    for (var c in mapjsonObj.values) {\n      mapStr = mapjsonObj.values[c] + \"&size=500x300\";\n      node.log(\"Found Json map str: \" + mapStr);\n      actionsArr.push({\"text\": buttonMTArr[c] +\" \",\"type\":\"link\",\"uri\": mapStr});\n //     actions = {\"actions\" : actionsArr };\n    }\n}\n\n//json button - Note for WCS - can't have a mixed array of Link and Reply. Smooch-limitation\n// Can implement postback buttons, but must handle postback api call. Stubbed at the moment.\n//var buttonjsonStr = Watson_context.match(/\\\"button.*Yes\\\"/);\nvar found_link = 0;\n//node.log(\"buttonjson: \" + buttonjsonStr);\nbuttonjsonObj = Watson_contextOBJ.button;\nif (typeof buttonjsonObj.values != \"undefined\") {\n  \n    for (var c in buttonjsonObj.values) {\n      buttonStr = buttonjsonObj.values[c];\n      if (buttonStr.lastIndexOf(\"|\") >= 0 ) {\n        found_link = 1;\n        buttonItems = buttonStr.split(\"|\");\n        button_title = buttonItems[0];\n        button_url = buttonItems[1];\n        \n        actionsArr.push({\"type\": \"link\",\"text\": button_title,\"uri\": button_url}); \n      }\n      else {\n        button_title = buttonStr;  \n        actionsRArr.push({\"type\": \"reply\",\"text\": button_title,\"payload\": button_title}); \n       //actionsArr.push({\"type\": \"postback\",\"text\": button_title,\"payload\": button_title}); \n      }\n    }  \n    if (found_link > 0) {\n       component = \"buttonLink\"; \n    }else {\n      component = \"buttonReply\";   \n    }\n}\n\n//old maps\nif (Newmsg.lastIndexOf(\"InsMap\") >= 0 ) {\n     findindex = Newmsg.lastIndexOf(\"InsMap\");\n     Newmsg = Newmsg.substring(0,findindex);\n     node.log(\"Found a maps at index:\", findindex);\n     node.log(Newmsg);\n} \n\n// Dennis added because SSML tag was escaping the \" with \\\" and the replace command fixes it!!!!\nNewmsg = Newmsg.replace(/\\\\/g, \"\");\n//Dennis - Remove XML SSML tags from chat systems\nNewmsg = Newmsg.replace(/<[^>]+>/g, \"\");\n\nmsg.url = \"https://api.smooch.io/v1/appusers/\" + msg.user + \"/messages\";\n\nswitch(component) {\n    case 'buttonReply':\n     response = {\n        role : \"appMaker\",\n        type : \"text\",\n        text : Newmsg,\n        email: \"dennisnoto@gmail.com\",\n        actions : actionsRArr\n        };\n        break;\n    case 'buttonLink':\n     response = {\n        role : \"appMaker\",\n        type : \"text\",\n        text : Newmsg,\n        email: \"dennisnoto@gmail.com\",\n        actions : actionsArr\n        };\n        break;\n    case 'map':\n    response = {\n        role : \"appMaker\",\n        type : \"image\",\n        text : Newmsg,\n        email: \"dennisnoto@gmail.com\",\n        mediaUrl: mapStr,\n        mediaType: \"image/jpeg\",\n        actions : actionsArr\n        };\n        break;\n    default:\n    response = {\n        role : \"appMaker\",\n        type : \"text\",\n        text : Newmsg,\n        email: \"dennisnoto@gmail.com\",\n        actions : actionsArr};\n}\n\n if (i != texts.length -1) {\n   response.actions = [];  \n }     \n node.log(\"****First Send: ******* \" + JSON.stringify(response));\n  msg.payload = response;\n  node.send(msg);\n  \n if (actionsRArr.length > 0 &&  component == \"buttonLink\"){\n  response = {\n        role : \"appMaker\",\n        type : \"text\",\n        text : \"\",\n        email: \"dennisnoto@gmail.com\",\n        actions : actionsRArr\n      \n  };\n \n  if (i == texts.length -1) {\n    node.log(\"****Second Send: ******* \" + JSON.stringify(response));\n    msg.payload = response;\n    node.send(msg);  \n  }\n }\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 193.75000762939453,
        "y": 674.3749675750732,
        "wires": [
            []
        ]
    },
    {
        "id": "4bc3c94b.bd985",
        "type": "http response",
        "z": "c1e9a4dc.c42cf8",
        "name": "",
        "x": 490,
        "y": 600,
        "wires": []
    },
    {
        "id": "9fa363da.b78838",
        "type": "function",
        "z": "c1e9a4dc.c42cf8",
        "name": "Get User",
        "func": "\nif (typeof(msg.actionPayload) !== \"undefined\"){\n   input = msg.actionPayload;  \n   msg.user = msg.user;\n}else {\n   input = msg.payload.messages[0].text; \n   if (typeof msg.payload.appUser.userId !== \"undefined\") {\n     \n     msg.user = msg.payload.appUser.userId;\n       \n   }\n   else { \n     msg.user = msg.payload.appUser._id;  \n   }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 140,
        "wires": [
            [
                "ade399a0.ebfb98"
            ]
        ]
    },
    {
        "id": "bd7ef5d1.59e628",
        "type": "http in",
        "z": "d284a7e7.ca3e08",
        "name": "GoogleHome",
        "url": "/GoogleHome",
        "method": "post",
        "swaggerDoc": "",
        "x": 90,
        "y": 100,
        "wires": [
            [
                "6fe6e5b0.c979ec",
                "839b527a.195d2"
            ]
        ]
    },
    {
        "id": "b7c515f1.9cc36",
        "type": "function",
        "z": "d284a7e7.ca3e08",
        "name": "Response Msg",
        "func": "/* Example Payload for Google\n{\n  \"speech\": \"...\",  // ASCII characters only\n  \"displayText\": \"...\",\n  \"data\": {\n    \"google\": {\n      \"expect_user_response\": true,\n      \"is_ssml\": true,\n      \"permissions_request\": {\n        \"opt_context\": \"...\",\n        \"permissions\": [\n          \"NAME\",\n          \"DEVICE_COARSE_LOCATION\",\n          \"DEVICE_PRECISE_LOCATION\"\n        ]\n      }\n    }\n  },\n  \"contextOut\": [...],\n}*/\n\nmsg.headers = {\"Content-type\" : \"application/json\"}\nvar input = msg.payload.input.text\nvar texts = msg.payload.output.text\n\nvar myEndSession = true;    \n\ntotalText = \"\"\nfor (i = 0; i < texts.length; i++) {\n    \n    if (texts[i].lastIndexOf(\"[\") >= 0 ) {\n       findindex = texts[i].lastIndexOf(\"[\");\n       texts[i] = texts[i].substring(0,findindex);\n    } \n  totalText = totalText + \" \" + texts[i]\n}\n\nif (msg.tellGoogleNoWorries) \n{totalText = \"Okay, you're information is safe with me.\" + totalText\n  msg.tellGoogleNoWorries = false  \n}\n\n\nif (input.toUpperCase().substring(0,5) == \"LATER\" ||\n    totalText.lastIndexOf(\"wonderful day\") >= 0 ||\n    totalText.lastIndexOf(\"great day\") >= 0\n)\n   {myEndSession = false}\n\n\n\nmyResponse = {\n    \"speech\": totalText,  // ASCII characters only\n    \"displayText\": \"\",\n    \"data\": {\n      \"google\": {\n        \"expect_user_response\": myEndSession,\n        \"is_ssml\": false\n        }\n     }\n}\n\nnode.log(\"User ** \" + msg.user + \" Says ** \" +  msg.payload.input.text +  \" ** Response ** \" + totalText)\nmsg.payload = myResponse \nnode.send(msg);\n    \n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1437.7916297912598,
        "y": 441.0833435058594,
        "wires": [
            [
                "4ae751b0.293c08",
                "4627184b.c64db"
            ]
        ]
    },
    {
        "id": "4ae751b0.293c08",
        "type": "http response",
        "z": "d284a7e7.ca3e08",
        "name": "Http Response",
        "statusCode": "",
        "headers": {},
        "x": 1659.8749885559082,
        "y": 302.12499618530273,
        "wires": []
    },
    {
        "id": "5dbf9033.ab2e",
        "type": "function",
        "z": "d284a7e7.ca3e08",
        "name": "Set Params",
        "func": "msg.source = \"GoogleHome\"\nvar workspace_id = msg.req.query.workspace_id\nvar wcs_user_name = msg.req.query.wcs_username\nvar wcs_password = msg.req.query.wcs_password\n\n// Uncomment when New param is added to all front-ends and delete the default\n//var region = msg.req.query.primary_region\nmsg.region = \"US-SOUTH\";\n//Passed params are the primary config, will be used in the dynamic WCS router subflow to switch back\nmsg.primary_workspace_id = workspace_id;\nmsg.primary_wcs_user_name = wcs_user_name;\nmsg.primary_wcs_password = wcs_password;\nmsg.primary_region = msg.region;\n\nvar fname = msg.req.query.fname;\n\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context\n    wcs_user_name = msg.session.wcs_user_name\n    wcs_password  = msg.session.wcs_password\n    workspace_id  = msg.session.workspace_id    \n   }\n\ncontext.flowName = \"GoogleHome\"\n\n\nvar params = {\n    context : context,\n    workspace_id : workspace_id,\n    username : wcs_user_name,\n    password : wcs_password,\n    source : msg.source\n};\n\nvar additional_context = {};\nvar googleIntent = \"\"\nvar googleIName = \"\"\nvar googleContext = \"\"\nif (typeof msg.payload.originalRequest.data.user.profile !== \"undefined\"){\n     context.fname = msg.payload.originalRequest.data.user.profile.given_name   \n    }\n\nif (typeof msg.payload.originalRequest.data.inputs !== \"undefined\"){\n     googleIntent = msg.payload.originalRequest.data.inputs[0].intent\n    }\n\nif (typeof msg.payload.originalRequest.data.inputs[0].arguments[0] !== \"undefined\"){\n     \n     if (typeof msg.payload.originalRequest.data.inputs[0].arguments[0].name !== \"undefined\"){\n       googleIName =  msg.payload.originalRequest.data.inputs[0].arguments[0].name \n     }\n    }\n\nif (typeof msg.payload.result.contexts[0] !== \"undefined\") {\n    \n     if (msg.payload.result.contexts[0].name.lastIndexOf(\"actions\") >= 0) {\n        \n        if (typeof msg.payload.result.contexts[1] !== \"undefined\"){\n           googleContext = msg.payload.result.contexts[1].name \n        }\n     }\n     else {\n        googleContext = msg.payload.result.contexts[0].name \n     }\n}\n\nmsg.payload = msg.payload.result.resolvedQuery\nmsg.params = params\nmsg.googleIntent = googleIntent\nmsg.googleIName = googleIName\nmsg.googleContext = googleContext\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 654.9999771118164,
        "y": 100,
        "wires": [
            [
                "359140e5.30fbf8",
                "c05e72e6.c3d9b8"
            ]
        ]
    },
    {
        "id": "4627184b.c64db",
        "type": "debug",
        "z": "d284a7e7.ca3e08",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1665.6249885559082,
        "y": 438.791654586792,
        "wires": []
    },
    {
        "id": "b43c5359.d93ff8",
        "type": "switch",
        "z": "d284a7e7.ca3e08",
        "name": "Intents",
        "property": "googleIntent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "assistant.intent.action.PERMISSION",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "assistant.intent.action.MAIN",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "claim-status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "claim-process",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "deductibles",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 6,
        "x": 245.625,
        "y": 366.87499618530273,
        "wires": [
            [
                "cc2860bd.7be628"
            ],
            [
                "4fd49bd7.df2734"
            ],
            [
                "a20a01a9.8d2d9"
            ],
            [
                "a20a01a9.8d2d9"
            ],
            [
                "a20a01a9.8d2d9"
            ],
            [
                "6657e485.95345c"
            ]
        ]
    },
    {
        "id": "4fd49bd7.df2734",
        "type": "function",
        "z": "d284a7e7.ca3e08",
        "name": "Ask Permission",
        "func": "\nmsg.headers = {\"Content-type\" : \"application/json\"}\n\nmyResponse = {\n    \"speech\": \"Send Permission Request\",  // ASCII characters only\n    \"displayText\": \"\",\n    \"data\": {\n      \"google\": {\n        \"expect_user_response\": false,\n        \"is_ssml\": false,\n        \"permissions_request\": {\n        \"opt_context\": \"Before we get started.\",\n        \"permissions\": [\"NAME\", \"DEVICE_COARSE_LOCATION\", \"DEVICE_PRECISE_LOCATION\"]\n         }\n        }\n     }\n}\n\nmsg.payload = myResponse \nnode.send(msg);\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 744.75,
        "y": 302.125,
        "wires": [
            [
                "4ae751b0.293c08"
            ]
        ]
    },
    {
        "id": "cc2860bd.7be628",
        "type": "function",
        "z": "d284a7e7.ca3e08",
        "name": "Handle Permission",
        "func": "if (msg.payload.toUpperCase().lastIndexOf(\"NO\") >= 0 \n)\n   {msg.tellGoogleNoWorries = true}\nelse\n   {msg.tellGoogleNoWorries = false}\n   \nif (msg.googleContext.lastIndexOf(\"claim-status\") >= 0 ) {\n    msg.payload = \"get a status of my claim\"\n}\n\nelse if (msg.googleContext.lastIndexOf(\"claim-process\") >= 0 ) {\n    msg.payload = \"how do claims work\"\n}\nelse if (msg.googleContext.lastIndexOf(\"claim-deductible\") >= 0 ) {\n    msg.payload = \"what are my deductibles and limits\"\n}\n\n\nelse {\n    msg.payload =  \"Hello\"\n}    \n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 748.7499771118164,
        "y": 249.37499523162842,
        "wires": [
            [
                "6657e485.95345c"
            ]
        ]
    },
    {
        "id": "a20a01a9.8d2d9",
        "type": "switch",
        "z": "d284a7e7.ca3e08",
        "name": "trigger?",
        "property": "googleIName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "trigger_query",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 580,
        "y": 380,
        "wires": [
            [
                "4fd49bd7.df2734"
            ],
            [
                "6657e485.95345c"
            ]
        ]
    },
    {
        "id": "6fe6e5b0.c979ec",
        "type": "function",
        "z": "d284a7e7.ca3e08",
        "name": "Get User",
        "func": "\nmsg.user = msg.payload.sessionId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 293.75,
        "y": 100.00000095367432,
        "wires": [
            [
                "5bd762da.46b27c"
            ]
        ]
    },
    {
        "id": "cb195e3f.4334d",
        "type": "http in",
        "z": "17eb59dd.9ff326",
        "name": "SIP HTTP in",
        "url": "/sip",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 87.99998474121094,
        "y": 107.30158996582031,
        "wires": [
            [
                "e4cbba6f.d6a58",
                "16fe4579.e7b423"
            ]
        ]
    },
    {
        "id": "bb72b47.dae0048",
        "type": "http response",
        "z": "17eb59dd.9ff326",
        "name": "Http Response",
        "x": 1440.6249694824219,
        "y": 225.35713815689087,
        "wires": []
    },
    {
        "id": "6f0e4576.42ac84",
        "type": "function",
        "z": "17eb59dd.9ff326",
        "name": "Set Params",
        "func": "msg.source = \"Phone\"\nvar workspace_id = msg.req.query.workspace_id\nvar wcs_user_name = msg.req.query.wcs_username\nvar wcs_password = msg.req.query.wcs_password\nvar stt_user_name = msg.req.query.stt_username\nvar stt_password = msg.req.query.stt_password\nvar tts_user_name = msg.req.query.tts_username\nvar tts_password = msg.req.query.tts_password\n\n// Uncomment when New param is added to all front-ends and delete the default\n//var region = msg.req.query.primary_region\nmsg.region = \"US-SOUTH\";\n//Passed params are the primary config, will be used in the dynamic WCS router subflow to switch back\nmsg.primary_workspace_id = workspace_id;\nmsg.primary_wcs_user_name = wcs_user_name;\nmsg.primary_wcs_password = wcs_password;\nmsg.primary_region = msg.region;\n\nvar input = msg.payload.input.text;\nvar fname = \"Jane\"; \n\nmsg.testPhone = \"\"\nmsg.testPhone = msg.payload.context.vgwSIPToURI.match(/\\b(18447276206|18442310002|18445047115|18552164158|18442011910|18445845275)\\b/g);\n\nif (input === \"\") {\n  if (msg.testPhone == \"18447276206\" || msg.testPhone == \"18442310002\"){\n    input = \"Ask Me Please\"\n  }\n  else {\n    input = \"Hi\" \n  }    \n\n}\n    \nif ((input == \"vgwHangUp\")||(input==\"cgwHangUp\")) {\n    input = \"goodbye from SIP\"\n} \n\nif ((input == \"vgwPostResponseTimeout\")||(input == \"cgwPostResponseTimeout\")) {\n    input = \"silence\"\n} \n\n\n//var context = msg.payload.context;\n\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context\n    wcs_user_name = msg.session.wcs_user_name\n    wcs_password  = msg.session.wcs_password\n    workspace_id  = msg.session.workspace_id \n   }\n   \ncontext.fname = fname\n\nif (typeof context.vgwIsDTMF !== \"undefined\"){\n  if (context.vgwIsDTMF.trim().toUpperCase() == \"NO\") {\n      context.dtmfCount = 0\n      context.dtmfValue = \"\"\n  }\n  else {if (input.trim() ==\"#\" || input.trim() ==\"*\" ){\n          input = context.dtmfValue\n      }\n      else {\n          context.dtmfCount = context.dtmfCount + 1\n          context.dtmfValue.concat(dtmfValue)\n      }\n  }\n}\n\ncontext.cgwPostResponseTimeoutCount = \"30000\"\ncontext.cgwSessionInactivityTimeout = \"5\"\ncontext.vgwPostResponseTimeoutCount = \"30000\"\ncontext.vgwSessionInactivityTimeout = \"5\"\ncontext.vgwAllowDTMF = \"YES\"\ncontext.vgwSIPToURI= msg.payload.context.vgwSIPToURI\ncontext.vgwSIPFromURI = msg.payload.context.vgwSIPFromURI\ncontext.vgwSessionID = msg.payload.context.vgwSessionID\ncontext.vgwSIPCallID = msg.payload.context.vgwSIPCallID\ncontext.vgwSIPRequestURI = msg.payload.context.vgwSIPRequestURI\ncontext.stt_user_name = stt_user_name\ncontext.stt_password = stt_password\ncontext.tts_user_name = tts_user_name\ncontext.tts_password = tts_password\nif (typeof msg.req.query.stt_customization_id !== \"undefined\") {\n  context.stt_customization_id = msg.req.query.stt_customization_id\n}\nelse {\n  context.stt_customization_id = \"NA\"  \n}\nif (typeof msg.req.query.tts_customization_id !== \"undefined\") {\n  context.tts_customization_id = msg.req.query.tts_customization_id\n}\nelse {\n  context.tts_customization_id = \"NA\"  \n}\n\n\nvar params = {\n     context: context,\n     workspace_id : workspace_id,\n     username : wcs_user_name,\n     password : wcs_password,\n     source : msg.source\n}\n\n\nmsg.payload = input;\nmsg.params = params;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 610.6249618530273,
        "y": 107.85714435577393,
        "wires": [
            [
                "3254107a.45b6f8",
                "1c65d777.c58401"
            ]
        ]
    },
    {
        "id": "23a8e29.7be259e",
        "type": "function",
        "z": "17eb59dd.9ff326",
        "name": "Response Msg",
        "func": "var Watson_msg = JSON.stringify(msg.payload.output.text);\nvar Mymsg = Watson_msg.substring(2,Watson_msg.length-2);\n\n//Going forward, if you want to add buttons for convo for sip, use JSON only. NO []!!!!\n\nnode.log(\"start with \" + Mymsg);\n\nif (Mymsg.lastIndexOf(\"[\") >= 0 ) {\n     findindex = Mymsg.lastIndexOf(\"[\")\n     msg.payload.output.text = [Mymsg.substring(0,findindex-1)]\n} \nif (Mymsg.lastIndexOf(\"InsMap\") >= 0 ) {\n     findindex = Mymsg.lastIndexOf(\"InsMap\")\n     msg.payload.output.text = '[\"' + Mymsg.substring(0,findindex-1) + '\"]'\n} \n\nnode.log(\"User ** \" + msg.user + \" Says ** \" +  msg.payload.input.text +  \" ** Response ** \" + msg.payload.output.text)\n\n//new actions array for VGW\nvar bargeIn = \"No\";\n\nif (typeof msg.payload.context.BargeIn !== 'undefined'){\n   bargeIn = msg.payload.context.BargeIn;\n}\n\n\n\nvar sttConfig = {\n      \"command\": \"vgwActSetSTTConfig\",\n      \"parameters\": {\n              \"credentials\": {\n                \"url\": \"https://stream.watsonplatform.net/speech-to-text/api\",\n                \"username\": msg.payload.context.stt_user_name,\n                \"password\": msg.payload.context.stt_password\n              },\n              \"config\": {\n                  \"x-watson-learning-opt-out\": true,\n                  \"model\": \"en-US_NarrowbandModel\",\n                  \"profanity_filter\": true,\n                  \"customization_id\": msg.payload.context.stt_customization_id,\n                  \"firmup_silence_time\": 1, \n                  \"max_alternatives\":6,\n                  \"smart_formatting\": true\n              }\n          }\n        }\nif (sttConfig.parameters.config.customization_id == \"NA\") {\n    delete sttConfig.parameters.config.customization_id\n}\n\nvar ttsConfig = {\n        \"command\": \"vgwActSetTTSConfig\",\n        \"parameters\": {\n              \"credentials\": {\n                \"url\":  \"https://stream.watsonplatform.net/text-to-speech/api\",\n                \"username\": msg.payload.context.tts_user_name,\n                \"password\": msg.payload.context.tts_password\n              },\n              \"config\": {\n                  \"x-watson-learning-opt-out\": true,\n                  \"customization_id\": msg.payload.context.tts_customization_id,                  \n                  \"voice\": \"en-US_MichaelVoice\"\n              },\n              \"jitterBufferDelay\": 200,\n              \"cacheTimeToLive\": 336\n            }\n        }\nif (ttsConfig.parameters.config.customization_id == \"NA\") {\n    delete ttsConfig.parameters.config.customization_id\n}\n\nvar dtmfConfig = {\n        \"command\": \"vgwActCollectDtmf\",\n           \"parameters\": {\n              \"dtmfCount\": 10 //example for a phone number, set based on what you want to wait for\n            }\n        }\n\n\nvar playText = {\n        \"command\":\"vgwActPlayText\",\n            \"parameters\": {\n                \"text\" : msg.payload.output.text\n            }\n        }\n\nvgAction = []\nvgAction.push(sttConfig)\nvgAction.push(ttsConfig)\n//vgAction.push(dtmfConfig) \n\nif (bargeIn === \"No\") {\n vgAction.push({\"command\":\"vgwActDisableSTTDuringPlayback\"})\n} \nvgAction.push(playText)\n\nmsg.payload.output.vgwActionSequence = vgAction;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1189.999984741211,
        "y": 227.8571434020996,
        "wires": [
            [
                "bb72b47.dae0048",
                "407147f1.d000d8"
            ]
        ]
    },
    {
        "id": "3254107a.45b6f8",
        "type": "debug",
        "z": "17eb59dd.9ff326",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 779.9999847412109,
        "y": 47.85714340209961,
        "wires": []
    },
    {
        "id": "9abff948.b15108",
        "type": "http in",
        "z": "14d2f552.3522fb",
        "name": "",
        "url": "/twiliosms",
        "method": "post",
        "swaggerDoc": "",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "6a1d03ab.63c1cc"
            ]
        ]
    },
    {
        "id": "a1ce551e.a9003",
        "type": "function",
        "z": "14d2f552.3522fb",
        "name": "Set Params",
        "func": "msg.source = \"SMS\"\nvar workspace_id = msg.req.query.workspace_id;\nvar wcs_user_name = msg.req.query.wcs_username\nvar wcs_password = msg.req.query.wcs_password\n\n// Uncomment when New param is added to all front-ends and delete the default\n//var region = msg.req.query.primary_region\nmsg.region = \"US-SOUTH\";\n//Passed params are the primary config, will be used in the dynamic WCS router subflow to switch back\nmsg.primary_workspace_id = workspace_id;\nmsg.primary_wcs_user_name = wcs_user_name;\nmsg.primary_wcs_password = wcs_password;\nmsg.primary_region = msg.region;\n\nvar fname = msg.req.query.fname;\n\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context\n    wcs_user_name = msg.session.wcs_user_name\n    wcs_password  = msg.session.wcs_password\n    workspace_id  = msg.session.workspace_id    \n   }\n\n//if (flow.get(msg.payload.From)){\n// msg.params.context = flow.get(msg.payload.From); \n//}\n\nflow.set ('From', msg.payload.From);\n\nvar params = {\n    context: context,\n    workspace_id : workspace_id,\n    username : wcs_user_name,\n    password : wcs_password\n};\n\ncontext.fname = fname\ncontext.source = msg.source\n\nmsg.payload = msg.payload.Body;\nmsg.user = user;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 378.75,
        "y": 159.9999942779541,
        "wires": [
            [
                "67ce6081.1aec98",
                "49458180.53d37"
            ]
        ]
    },
    {
        "id": "67ce6081.1aec98",
        "type": "debug",
        "z": "14d2f552.3522fb",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 470,
        "y": 80,
        "wires": []
    },
    {
        "id": "751ed9f2.dc2068",
        "type": "function",
        "z": "14d2f552.3522fb",
        "name": "Response Msg",
        "func": "var From = flow.get('From');\n\nvar Watson_msg = msg.payload;\nvar Watson_response = JSON.stringify(msg.payload.output.text.join());\nvar Watson_context = JSON.stringify(msg.payload.context);\nnode.log(Watson_response);\n\nMyresponse = Watson_response.substring(2,Watson_response.length-2);\n\n// Dennis added because SSML tag was escaping the \" with \\\" and the replace command fixes it!!!!\nMyresponse = Myresponse.replace(/\\\\/g, \"\");\n//Dennis - Remove XML SSML tags from chat systems\nMyresponse = Myresponse.replace(/<[^>]+>/g, \"\");\n\n\nnode.log(\"context-intents \" +  msg.payload.intents[0].intent + \" with confidence of \" + msg.payload.intents[0].confidence)\n\nmsg.topic = From;\nflow.set(From, msg.payload.context);\n\nmsg.payload = Watson_response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 900,
        "y": 280,
        "wires": [
            [
                "4df3afc9.57e1d8",
                "e48b4546.441e08"
            ]
        ]
    },
    {
        "id": "4df3afc9.57e1d8",
        "type": "twilio out",
        "z": "14d2f552.3522fb",
        "service": "_ext_",
        "twilio": "5c51ec75.e126c4",
        "from": "",
        "number": "",
        "name": "",
        "x": 1136.249984741211,
        "y": 278.7499952316284,
        "wires": []
    },
    {
        "id": "e48b4546.441e08",
        "type": "debug",
        "z": "14d2f552.3522fb",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1119.2307586669922,
        "y": 188.46153450012207,
        "wires": []
    },
    {
        "id": "6a1d03ab.63c1cc",
        "type": "function",
        "z": "14d2f552.3522fb",
        "name": "Get User",
        "func": "var user_temp = msg.payload.From;\nmsg.user = user_temp.substring(user_temp.length-7, user_temp.length);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 137.5,
        "y": 299,
        "wires": [
            [
                "c45fffc1.06acd8"
            ]
        ]
    },
    {
        "id": "2f4a8e9a.d0de9a",
        "type": "subflow:f48845d6.67899",
        "z": "3fad3621.99e442",
        "name": "Get Session",
        "x": 427.74041748046875,
        "y": 116.92308044433594,
        "wires": [
            [
                "a7a4b8cb.3748f8"
            ]
        ]
    },
    {
        "id": "45ecefd5.b04ee8",
        "type": "subflow:52457267.ef5464",
        "z": "3fad3621.99e442",
        "name": "",
        "x": 895.9866714477539,
        "y": 236.49575805664062,
        "wires": [
            [
                "a2bae10d.ddec8"
            ]
        ]
    },
    {
        "id": "baac9a61.dc6cc",
        "type": "subflow:f48845d6.67899",
        "z": "1b19f8b1.08de9f",
        "name": "",
        "x": 466.25,
        "y": 100.00000095367432,
        "wires": [
            [
                "60377fd8.b60ca"
            ]
        ]
    },
    {
        "id": "1f55c4cb.9fa1e3",
        "type": "subflow:52457267.ef5464",
        "z": "1b19f8b1.08de9f",
        "name": "",
        "x": 853.3749771118164,
        "y": 220.9999942779541,
        "wires": [
            [
                "b035f29b.cd81a"
            ]
        ]
    },
    {
        "id": "84b2e08e.78d8a8",
        "type": "subflow:f48845d6.67899",
        "z": "5c4d249a.7988f4",
        "x": 738.1249771118164,
        "y": 119.9999942779541,
        "wires": [
            [
                "837fbb5a.054098"
            ]
        ]
    },
    {
        "id": "3f015cc0.e030ac",
        "type": "subflow:52457267.ef5464",
        "z": "5c4d249a.7988f4",
        "x": 1089,
        "y": 239,
        "wires": [
            [
                "67f2bc62.f0ee3c"
            ]
        ]
    },
    {
        "id": "a9e362d4.a71038",
        "type": "subflow:f48845d6.67899",
        "z": "e85cff5a.1f786",
        "x": 748.75,
        "y": 100.62500095367432,
        "wires": [
            [
                "99430d47.227e48"
            ]
        ]
    },
    {
        "id": "e57bcf13.8ba63",
        "type": "subflow:52457267.ef5464",
        "z": "e85cff5a.1f786",
        "x": 977.3194351196289,
        "y": 261.791729927063,
        "wires": [
            [
                "5ec2009e.4793d"
            ]
        ]
    },
    {
        "id": "ade399a0.ebfb98",
        "type": "subflow:f48845d6.67899",
        "z": "c1e9a4dc.c42cf8",
        "x": 452.5,
        "y": 140.62499332427979,
        "wires": [
            [
                "b632470d.abaae"
            ]
        ]
    },
    {
        "id": "5c740e25.6d45b8",
        "type": "subflow:52457267.ef5464",
        "z": "c1e9a4dc.c42cf8",
        "x": 1090,
        "y": 280,
        "wires": [
            [
                "94d54387.4561f8"
            ]
        ]
    },
    {
        "id": "5bd762da.46b27c",
        "type": "subflow:f48845d6.67899",
        "z": "d284a7e7.ca3e08",
        "x": 473.125,
        "y": 100.62500095367432,
        "wires": [
            [
                "5dbf9033.ab2e"
            ]
        ]
    },
    {
        "id": "a824ce9a.796de",
        "type": "subflow:52457267.ef5464",
        "z": "d284a7e7.ca3e08",
        "x": 1241.1249618530273,
        "y": 441.7500305175781,
        "wires": [
            [
                "b7c515f1.9cc36"
            ]
        ]
    },
    {
        "id": "c45fffc1.06acd8",
        "type": "subflow:f48845d6.67899",
        "z": "14d2f552.3522fb",
        "x": 325.125,
        "y": 299.99999618530273,
        "wires": [
            [
                "a1ce551e.a9003"
            ]
        ]
    },
    {
        "id": "7d5c4c47.719f94",
        "type": "subflow:52457267.ef5464",
        "z": "14d2f552.3522fb",
        "x": 710,
        "y": 280,
        "wires": [
            [
                "751ed9f2.dc2068"
            ]
        ]
    },
    {
        "id": "1d697868.e5b09",
        "type": "MSSQL",
        "z": "cb400db2.feb1d8",
        "mssqlCN": "ac1a4c8a.00367",
        "name": "ucg-mssql",
        "query": "SELECT * FROM information_schema.tables;",
        "outField": "payload",
        "x": 281,
        "y": 49,
        "wires": [
            [
                "3e1a391b.e5f316"
            ]
        ]
    },
    {
        "id": "4fb6744d.c35f94",
        "type": "inject",
        "z": "cb400db2.feb1d8",
        "name": "List Tables",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 101,
        "y": 49,
        "wires": [
            [
                "1d697868.e5b09"
            ]
        ]
    },
    {
        "id": "3e1a391b.e5f316",
        "type": "debug",
        "z": "cb400db2.feb1d8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 457,
        "y": 50,
        "wires": []
    },
    {
        "id": "17a347ff.7749e",
        "type": "MSSQL",
        "z": "83c7f68e.9a469",
        "mssqlCN": "ac1a4c8a.00367",
        "name": "SetMssqlSession",
        "query": "insert into session_ver3 VALUES ('{{{payload.convoUser}}}',\n                            '{{{payload.wcs_user_name}}}',\n                            '{{{payload.wcs_password}}}',\n                            '{{{payload.workspace_id}}}',\n                            '{{{payload.convoTS}}}',\n                            '{{{payload.convoSource}}}',\n                            '{{{payload.convoIntent}}}',\n                            '{{{payload.convoDialogNode}}}',   \n                            '{{{payload.convoDialogType}}}',\n                            '{{{payload.convoDialogIntents}}}',\n                            '{{{payload.convoDialogEntities}}}',\n                            '{{{payload.convoDialogConfidence}}}',\n                            '{{{payload.convoContainmentScore}}}',\n                            '{{{payload.convoCounter}}}',\n                            '{{{payload.convoTransID}}}',\n                            '{{{payload.convoUtterance}}}',\n                            '{{payload.convoAnswer}}',\n                            '{{payload.convoPayload}}')\n",
        "outField": "payload",
        "x": 489,
        "y": 47,
        "wires": [
            []
        ]
    },
    {
        "id": "488816b2.2ab07",
        "type": "inject",
        "z": "cb400db2.feb1d8",
        "name": "sesion Json",
        "topic": "",
        "payload": "{\"convoUser\":\"Den1\",\"convoTS\":\"08/1/2017 11:15:37\",\"convoSource\":\"Load\",\"convoPayload\":\"contextstring2\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 98,
        "y": 130,
        "wires": [
            [
                "6469e032.696e3"
            ]
        ]
    },
    {
        "id": "8529a1cb.65889",
        "type": "debug",
        "z": "cb400db2.feb1d8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 480,
        "y": 130,
        "wires": []
    },
    {
        "id": "f68d892a.a55518",
        "type": "debug",
        "z": "cb400db2.feb1d8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 655,
        "y": 210,
        "wires": []
    },
    {
        "id": "9ae51648.46054",
        "type": "MSSQL",
        "z": "39871438.0ff45c",
        "mssqlCN": "ac1a4c8a.00367",
        "name": "GetMssqlSession",
        "query": "SELECT TOP 1\nconvoUser,\nwcs_user_name,\nwcs_password,\nworkspace_id,\nconvoTS,\nconvoSource,\nconvoIntent,\nconvoDialogNode,\nconvoDialogType,\nconvoDialogIntents,\nconvoDialogEntities,\nconvoDialogConfidence,\nconvoCounter,\nconvoTransID,\nconvoUtterance,\nREPLACE(convoAnswer,'&#39;','''') as convoAnswer,\nREPLACE(REPLACE(convoPayload,'&quot;','\"'),'&#39;','') as convoPayload\n\nFROM session_ver3  where convoUser = '{{{payload}}}'  ORDER BY convoTS DESC",
        "outField": "payload",
        "x": 364,
        "y": 41,
        "wires": [
            [
                "9f4e53b4.242b38"
            ]
        ]
    },
    {
        "id": "3e224d97.03408a",
        "type": "inject",
        "z": "cb400db2.feb1d8",
        "name": "User",
        "topic": "",
        "payload": "dfn2",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 116,
        "y": 210,
        "wires": [
            [
                "bae9ada8.9e305"
            ]
        ]
    },
    {
        "id": "7e9c8eee.2dd038",
        "type": "comment",
        "z": "cb400db2.feb1d8",
        "name": "Need the nodred-contrib-mssql node installed via the palette",
        "info": "",
        "x": 286.5,
        "y": 284,
        "wires": []
    },
    {
        "id": "abdc4d10.884698",
        "type": "debug",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "WDSResults",
        "x": 470,
        "y": 100,
        "wires": []
    },
    {
        "id": "b2b96ef2.fb3bb8",
        "type": "inject",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 90,
        "y": 100,
        "wires": [
            [
                "1ee523f9.033d7c"
            ]
        ]
    },
    {
        "id": "48922576.4442ac",
        "type": "subflow:39871438.0ff45c",
        "z": "cb400db2.feb1d8",
        "name": "",
        "x": 468,
        "y": 210,
        "wires": [
            [
                "f68d892a.a55518"
            ]
        ]
    },
    {
        "id": "6469e032.696e3",
        "type": "subflow:83c7f68e.9a469",
        "z": "cb400db2.feb1d8",
        "x": 290,
        "y": 130,
        "wires": [
            [
                "8529a1cb.65889"
            ]
        ]
    },
    {
        "id": "abe832fb.671d4",
        "type": "subflow:39871438.0ff45c",
        "z": "f48845d6.67899",
        "x": 227.92857360839844,
        "y": 248.42856979370117,
        "wires": [
            []
        ]
    },
    {
        "id": "f531072e.6b49a",
        "type": "subflow:83c7f68e.9a469",
        "z": "52457267.ef5464",
        "x": 450.5,
        "y": 281,
        "wires": [
            []
        ]
    },
    {
        "id": "bae9ada8.9e305",
        "type": "function",
        "z": "cb400db2.feb1d8",
        "name": "Set msg.user",
        "func": "msg.user = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270.5,
        "y": 210,
        "wires": [
            [
                "48922576.4442ac"
            ]
        ]
    },
    {
        "id": "56356c99.dd1294",
        "type": "function",
        "z": "39871438.0ff45c",
        "name": "Get Session",
        "func": "msg.savePayload = msg.payload\n\nmsg.payload = [msg.user]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 168.5,
        "y": 41,
        "wires": [
            [
                "9ae51648.46054"
            ]
        ]
    },
    {
        "id": "50c0bed3.1ab1e8",
        "type": "function",
        "z": "83c7f68e.9a469",
        "name": "Fix Date/ConvoPayload",
        "func": "var d = msg.payload.convoTS\n\nnewdstr = d.getMonth()+1 + \"/\" + d.getDate() + \"/\" + d.getFullYear() + \" \" + d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds() + \":\" + d.getMilliseconds()\nmsg.payload.convoTS = newdstr\n\nmsg.payload.convoPayload = JSON.stringify(msg.payload.convoPayload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 254.5,
        "y": 48,
        "wires": [
            [
                "17a347ff.7749e"
            ]
        ]
    },
    {
        "id": "9f4e53b4.242b38",
        "type": "function",
        "z": "39871438.0ff45c",
        "name": "Set Session in subflow",
        "func": "if (typeof msg.payload[0] !== \"undefined\" )\n   {\n    msg.payload[0].convoPayload = JSON.parse(msg.payload[0].convoPayload)   \n    msg.session = msg.payload[0]\n   }\nelse \n  { \n      \n}\n   \n//reset payload from channel to continue flow\nmsg.payload = msg.savePayload\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 617.5,
        "y": 41,
        "wires": [
            []
        ]
    },
    {
        "id": "708e9c33.4590a4",
        "type": "inject",
        "z": "3fad3621.99e442",
        "name": "Start",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 91.48529815673828,
        "y": 326.6764736175537,
        "wires": [
            [
                "df78684f.c6351"
            ]
        ]
    },
    {
        "id": "df78684f.c6351",
        "type": "http request",
        "z": "3fad3621.99e442",
        "name": "Get Dialog Node",
        "method": "GET",
        "ret": "obj",
        "url": "https://gateway.watsonplatform.net/conversation/api/v1/workspaces/56cfca8a-b459-447f-ab35-e94511f6f7bc/dialog_nodes/ROOT-Claim-Status?version=2017-05-26",
        "tls": "",
        "x": 273.25,
        "y": 327.50000953674316,
        "wires": [
            [
                "f3415186.409d88"
            ]
        ]
    },
    {
        "id": "f3415186.409d88",
        "type": "debug",
        "z": "3fad3621.99e442",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 446.83334732055664,
        "y": 326.958309173584,
        "wires": []
    },
    {
        "id": "831eec36.2a31d",
        "type": "function",
        "z": "87530aab.adb068",
        "name": "Test Ping",
        "func": "if (typeof msg.payload.workspaces === \"undefined\") \n   {\n    node.error(msg.region + \" WCS failed, switching region for user: \" + msg.user) \n    msg.region = \"GERMANY\"\n   }\n else  \n   {msg.region = \"US-SOUTH\"\n   } \n\nmsg.payload = msg.savePayload\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 771.8301162719727,
        "y": 35.46736526489258,
        "wires": [
            [
                "5b6b2ab4.c3115c"
            ]
        ]
    },
    {
        "id": "1fcc52c6.73e405",
        "type": "function",
        "z": "87530aab.adb068",
        "name": "Check for Session",
        "func": "msg.savePayload = msg.payload\n\nif (typeof msg.session === \"undefined\") \n  msg.checkService = \"Yes\"\nelse\n  msg.checkService = \"No\"\n\nif (msg.params.username === \"c3a84de4-c0cf-43b6-98a1-8c2bd16fdc1f\"){\n        msg.region = \"GERMANY\" \n}\nelse {\n        msg.region = \"US-SOUTH\"\n}    \n\nmsg.headers = {}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 181.5,
        "y": 37.069942474365234,
        "wires": [
            [
                "a75b0ca2.9c8918"
            ]
        ]
    },
    {
        "id": "f4f7a034.c36938",
        "type": "inject",
        "z": "5b6fab52.9eae84",
        "name": "Execute",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 135.03846740722656,
        "y": 53.23076820373535,
        "wires": [
            [
                "37d5294d.202d4e"
            ]
        ]
    },
    {
        "id": "37d5294d.202d4e",
        "type": "http request",
        "z": "5b6fab52.9eae84",
        "name": "Workspaces Ping",
        "method": "GET",
        "ret": "obj",
        "url": "https://gateway.watsonplatform.net/conversation/api/v1/workspaces?version=2017-05-26",
        "tls": "",
        "x": 319.5,
        "y": 53,
        "wires": [
            [
                "6058c888.e4335"
            ]
        ]
    },
    {
        "id": "6058c888.e4335",
        "type": "debug",
        "z": "5b6fab52.9eae84",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 512.2692337036133,
        "y": 53.30769348144531,
        "wires": []
    },
    {
        "id": "93490d5d.b3ca88",
        "type": "inject",
        "z": "cb400db2.feb1d8",
        "name": "List Tables",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 101.5,
        "y": 404,
        "wires": [
            [
                "acd6852c.5dc3b"
            ]
        ]
    },
    {
        "id": "e6903af8.80e948",
        "type": "debug",
        "z": "cb400db2.feb1d8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 828.5,
        "y": 408,
        "wires": []
    },
    {
        "id": "97951730.081798",
        "type": "http in",
        "z": "bf65cfa5.bbe868",
        "name": "SIP HTTP in",
        "url": "/SIPGateway/v1/workspaces/0000/message",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 132,
        "y": 63,
        "wires": [
            [
                "645d8238.e94aec",
                "17612f0d.9b2069"
            ]
        ]
    },
    {
        "id": "f445b5e8.04bcc",
        "type": "watson-conversation-v1",
        "z": "bf65cfa5.bbe868",
        "name": "Conversation",
        "workspaceid": "109901be-2ab8-45e5-9a63-1fc20201e5b6",
        "multiuser": false,
        "context": false,
        "default-endpoint": true,
        "service-endpoint": "",
        "x": 890,
        "y": 320,
        "wires": [
            [
                "e0ccd4d4.d60bd",
                "9063e233.441cc"
            ]
        ]
    },
    {
        "id": "4dc4187.e495de8",
        "type": "http response",
        "z": "bf65cfa5.bbe868",
        "name": "Http Response",
        "x": 1339.8791103363037,
        "y": 222.0915117263794,
        "wires": []
    },
    {
        "id": "fc1bb1d7.4db828",
        "type": "function",
        "z": "bf65cfa5.bbe868",
        "name": "Set Params",
        "func": "//node.warn(\"msg: \" + msg);\n//node.warn(\"msg.payload: \" + msg.payload);\n//node.warn(\"msg.payload.input: \" + msg.payload.input);\n//  Sip gateway is controlling wcs context and workspace\nmsg.source = \"Phone\"\n//var workspace_id = \"3f760edd-0ddc-43fa-aead-610e455fb580\";\n//var app = \"\";\nvar input = global.get(\"input\");\n//var fname = \"Jane\"\n\nif (input === \"\")\n{input =  \"Hi\"}\n  \nif ((input == \"vgwHangUp\")||(input==\"cgwHangUp\")) {\n    input = \"goodbye from SIP\"\n} \n\nif ((input == \"vgwPostResponseTimeout\")||(input == \"cgwPostResponseTimeout\")) {\n    input = \"silence\"\n} \n\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context}\n   \n\n\n//var context = msg.payload;//.context;\n//context.conversation_id = global.get(\"conversationId\");\n\nif (typeof context.vgwIsDTMF !== \"undefined\"){\n  if (context.vgwIsDTMF.trim().toUpperCase() == \"NO\") {\n      context.dtmfCount = 0\n      context.dtmfValue = \"\"\n  }\n  else {if (input.trim() ==\"#\" || input.trim() ==\"*\" ){\n          input = context.dtmfValue\n      }\n      else {\n          context.dtmfCount = context.dtmfCount + 1\n          context.dtmfValue.concat(dtmfValue)\n      }\n  }\n}\n\ncontext.cgwPostResponseTimeoutCount = \"30000\"\ncontext.cgwSessionInactivityTimeout = \"5\"\ncontext.vgwPostResponseTimeoutCount = \"30000\"\ncontext.vgwSessionInactivityTimeout = \"5\"\ncontext.vgwAllowDTMF = \"YES\"\ncontext.Device = \"FD 130\";\ncontext.Connection_Type = \"Dial\";\n\nvar params = {\n     context: context\n\n}\n\nmsg.payload = input;\n//msg.workspace_id = workspace_id;\nmsg.params = params;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 460.88883209228516,
        "y": 164.44445133209229,
        "wires": [
            [
                "446fb260.217484",
                "def89a6.63d8fe8"
            ]
        ]
    },
    {
        "id": "b4fbb367.0bac18",
        "type": "function",
        "z": "bf65cfa5.bbe868",
        "name": "Response Msg",
        "func": "var Watson_msg = JSON.stringify(msg.payload.output.text);\nvar Mymsg = Watson_msg.substring(2,Watson_msg.length-2);\n\n//Going forward, if you want to add buttons for convo for sip, use JSON only. NO []!!!!\n\nnode.log(\"start with \" + Mymsg);\n\nif (Mymsg.lastIndexOf(\"[\") >= 0 ) {\n     findindex = Mymsg.lastIndexOf(\"[\")\n     msg.payload.output.text = [Mymsg.substring(0,findindex-1)]\n     node.log(\"Found a buttons at index: \" + findindex)\n     node.log(msg.payload.output.text)\n} \nif (Mymsg.lastIndexOf(\"InsMap\") >= 0 ) {\n     findindex = Mymsg.lastIndexOf(\"InsMap\")\n     msg.payload.output.text = '[\"' + Mymsg.substring(0,findindex-1) + '\"]'\n     node.log(\"Found a maps at index: \"+ findindex)\n     node.log(msg.payload.output.text)\n} \n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1124.6569004058838,
        "y": 222.53595447540283,
        "wires": [
            [
                "4dc4187.e495de8",
                "ada60301.502dd",
                "3f2e0ca6.9a5144"
            ]
        ]
    },
    {
        "id": "ada60301.502dd",
        "type": "debug",
        "z": "bf65cfa5.bbe868",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload.output.text",
        "x": 1212.7677841186523,
        "y": 117.98038959503174,
        "wires": []
    },
    {
        "id": "446fb260.217484",
        "type": "debug",
        "z": "bf65cfa5.bbe868",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 608.6666469573975,
        "y": 95,
        "wires": []
    },
    {
        "id": "3f2e0ca6.9a5144",
        "type": "debug",
        "z": "bf65cfa5.bbe868",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1306.545735359192,
        "y": 341.0915222167969,
        "wires": []
    },
    {
        "id": "e0ccd4d4.d60bd",
        "type": "debug",
        "z": "bf65cfa5.bbe868",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 913.5457992553711,
        "y": 477.0915274620056,
        "wires": []
    },
    {
        "id": "645d8238.e94aec",
        "type": "debug",
        "z": "bf65cfa5.bbe868",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 347.16667556762695,
        "y": 64.8888931274414,
        "wires": []
    },
    {
        "id": "def89a6.63d8fe8",
        "type": "function",
        "z": "bf65cfa5.bbe868",
        "name": "Set Call ID",
        "func": "msg.call_id = \"3333333\"; //msg.payload.context.vgwSessionID;\nvar userToUser = msg.payload.context.vgwSIPCustomInviteHeader;\n//vgwSIPCustomInviteHeader: \"0430333333313938382D323431322D343263662D393364642D666131316565326263643537;encoding=hex\"\nvar conversationId = msg.payload.context.conversation_id;\nglobal.set(\"conversationId\", conversationId);\nglobal.set(\"input\", msg.payload.input.text);\n\nvar callIdHex = userToUser.toString().substring(2, 74);\nvar greetingCode = hex2a(userToUser.toString().substring(74, 78));\nvar callId = hex2a(callIdHex);\nnode.warn(\"callId: \" + callId);\nnode.warn(\"greetingCode: \" + greetingCode);\n\nmsg.call_id = callId;\nmsg.headers = {\"Content-Type\": \"application/json\"}\n//node.warn(\"msg.call_id: \" + msg.call_id);\n//node.warn(\"msg: \" + msg);\n\nmsg.url = \"https://MiddleWareApps.CATO.FDVS.1DC.COM/FDVS/Services/Hydration/WEBAPI/api/WatsonHydrate?call_id=\" + msg.call_id;\nreturn msg;\n// Need better way to do this - too resource intensive - Den/Etay\nfunction hex2a(hexx) {\n    //node.warn(\"hexx: \" + hexx);\n    var hex = hexx.toString();//force conversion\n    var str = '';\n    for (var i = 0; i < hex.length; i += 2)\n    {\n        //node.log(\"hexx val: \" + hex.substr(i, 2));\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n        \n    }\n    return str;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 240.16666412353516,
        "y": 287.7777557373047,
        "wires": [
            [
                "5527b8e0.dd3f58",
                "329b449e.0b9cbc"
            ]
        ]
    },
    {
        "id": "84cd2460.39758",
        "type": "debug",
        "z": "bf65cfa5.bbe868",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 672,
        "y": 463,
        "wires": []
    },
    {
        "id": "5527b8e0.dd3f58",
        "type": "debug",
        "z": "bf65cfa5.bbe868",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 451.0000190734863,
        "y": 254.66665649414062,
        "wires": []
    },
    {
        "id": "466271de.82cab",
        "type": "inject",
        "z": "bf65cfa5.bbe868",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 82,
        "y": 383,
        "wires": [
            [
                "61584080.eb3af"
            ]
        ]
    },
    {
        "id": "61584080.eb3af",
        "type": "function",
        "z": "bf65cfa5.bbe868",
        "name": "Test",
        "func": "var userToUser = \"0435383833346337372D336635392D343262622D623130382D3961343135336263303233373031;encoding=hex\";\n\nvar callIdHex = userToUser.toString().substring(2, 74);\nvar callId = hex2a(callIdHex);\nnode.warn(\"callId: \" + callId);\n\nmsg.call_id = callId;\nmsg.headers = {\"Content-Type\": \"application/json\"}\n\nmsg.url = \"https://MiddleWareApps.CATO.FDVS.1DC.COM/FDVS/Services/Hydration/WEBAPI/api/WatsonHydrate?call_id=\" + msg.call_id;\n//msg.payload.alternateIntents = false;\n//msg.payload.input.text = \"\";\n//msg.payload.context.vgwSIPCustomInviteHeader = \"0435383833346337372D336635392D343262622D623130382D3961343135336263303233373031;encoding=hex\";\n//msg.payload.context.vgwSessionID = \"0a4adc9ca3e7123156fb357200\";\n\nmsg.payload = { \"context\" : \n                 { \"vgwSIPCustomInviteHeader\" : \"043\",\n                   \"vgwSessionID\" : \"0a4\" },\n                 \"alternateIntents\" : false,\n                 \"input\": \"\"}\n\n\nreturn msg;\n\n// Need better way to do this - too resource intensive - Den/Etay\nfunction hex2a(hexx) {\n  //  node.warn(\"hexx: \" + hexx);\n    var hex = hexx.toString();//force conversion\n    var str = '';\n    for (var i = 0; i < hex.length; i += 2)\n    {\n      //  node.log(\"hexx val: \" + hex.substr(i, 2));\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n        \n    }\n    return str;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 216.5,
        "y": 447,
        "wires": [
            [
                "329b449e.0b9cbc",
                "d5402f0b.60926"
            ]
        ]
    },
    {
        "id": "d5402f0b.60926",
        "type": "debug",
        "z": "bf65cfa5.bbe868",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 360.5,
        "y": 523,
        "wires": []
    },
    {
        "id": "329b449e.0b9cbc",
        "type": "www-request",
        "z": "bf65cfa5.bbe868",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 448.8888931274414,
        "y": 338.33334827423096,
        "wires": [
            [
                "84cd2460.39758",
                "334e7491.49160c"
            ]
        ]
    },
    {
        "id": "17612f0d.9b2069",
        "type": "function",
        "z": "bf65cfa5.bbe868",
        "name": "Get User",
        "func": "\nmsg.user = msg.payload.context.vgwSessionID;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 113.66666030883789,
        "y": 165.33330821990967,
        "wires": [
            [
                "274b2d70.4b8d32"
            ]
        ]
    },
    {
        "id": "274b2d70.4b8d32",
        "type": "subflow:f48845d6.67899",
        "z": "bf65cfa5.bbe868",
        "x": 286.33333587646484,
        "y": 163.99997425079346,
        "wires": [
            [
                "fc1bb1d7.4db828"
            ]
        ]
    },
    {
        "id": "9063e233.441cc",
        "type": "subflow:52457267.ef5464",
        "z": "bf65cfa5.bbe868",
        "name": "",
        "x": 938.9999809265137,
        "y": 222.6666774749756,
        "wires": [
            [
                "b4fbb367.0bac18"
            ]
        ]
    },
    {
        "id": "334e7491.49160c",
        "type": "function",
        "z": "bf65cfa5.bbe868",
        "name": "Add Hydro context vars",
        "func": "\nmsg.params.context.xxx = \"xxxx\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 684.4444732666016,
        "y": 269.99998474121094,
        "wires": [
            [
                "f445b5e8.04bcc"
            ]
        ]
    },
    {
        "id": "3c007db5.49f5a2",
        "type": "function",
        "z": "be024f13.40d248",
        "name": "Redis GET",
        "func": "var redis = global.get('redis');\nvar options = {enable_offline_queue:false};\n\nvar redisClient = global.get(\"redisClient\");\n\nif (typeof redisClient == \"undefined\") {\n  redisClient = new redis('redis://admin:XFRLCLICWCFQXPXA@sl-us-south-1-portal.5.dblayer.com:35110',options);\n// redisClient = new redis('redis://admin:IVKPWZBPOAJYQCRR@bluemix-sandbox-dal-9-portal.7.dblayer.com:27247',options);\n  global.set(\"redisClient\",redisClient);\n  node.log(\"New RedisClient connection in GetSession\")\n}\n\nredisClient.on(\"error\", function (err) {\n    node.error(\"Error \" + err);\n//    client.disconnect(); \n});\n\n redisClient.get(msg.user,function (err,result) {\n  if (err) \n      node.error(\"Error \" + err);\n    else {\n      msg.payload = result;\n      if (msg.payload === null){\n          msg.payload = \"{}\";}\n//      node.log(\"payload \" + JSON.stringify(msg.payload))\n      node.send(msg);\n    }\n//  client.disconnect();\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 346.5,
        "y": 74,
        "wires": [
            [
                "92ab3b31.ce168"
            ]
        ]
    },
    {
        "id": "a0d36cca.2643b",
        "type": "function",
        "z": "99f74819.77fb08",
        "name": "Redis Set",
        "func": "var redis = global.get('redis');\nvar options = {enable_offline_queue:false};\n   \nvar redisClient = global.get(\"redisClient\");\nif (typeof redisClient == \"undefined\") {\n  redisClient = new redis('redis://admin:XFRLCLICWCFQXPXA@sl-us-south-1-portal.5.dblayer.com:35110',options);\n//  redisClient = new redis('redis://admin:IVKPWZBPOAJYQCRR@bluemix-sandbox-dal-9-portal.7.dblayer.com:27247',options);\n  global.set(\"redisClient\",redisClient);\n  node.log(\"New RedisClient connection in SetSession\")\n}\n\n\nredisClient.on(\"error\", function (err) {\n    node.error(\"Error \" + err);\n//    client.disconnect(); \n});\n\nredisClient.set(msg.payload.convoUser,JSON.stringify(msg.payload), function (err, response) {\n   if (err) \n      node.error(\"Error \" + err);\n    else \n      msg.payload = response;\n//   client.disconnect(); \n   node.send(msg);\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 181.5,
        "y": 57,
        "wires": [
            []
        ]
    },
    {
        "id": "acd6852c.5dc3b",
        "type": "function",
        "z": "cb400db2.feb1d8",
        "name": "set config",
        "func": "msg.user = \"ucgadmin\"\nmsg.password = \"Hockey1234\"\nmsg.port = \"1433\"\nmsg.server = \"ucg-mssql.database.windows.net\"\nmsg.database = \"ucg\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 283.5,
        "y": 404,
        "wires": [
            [
                "b69f8c89.55c9c",
                "e3602a5e.65bd"
            ]
        ]
    },
    {
        "id": "b69f8c89.55c9c",
        "type": "MSSQL-UCG",
        "z": "cb400db2.feb1d8",
        "mssqlCN": "fc597431.b0b028",
        "name": "New UCG MSSQL with params sent via msg",
        "query": "insert into session VALUES ('dddd15', '10/01/2017', 'load', 'test')\n\n",
        "outField": "payload",
        "x": 568.5,
        "y": 407,
        "wires": [
            [
                "e6903af8.80e948"
            ]
        ]
    },
    {
        "id": "a75b0ca2.9c8918",
        "type": "switch",
        "z": "87530aab.adb068",
        "name": "First Turn",
        "property": "checkService",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Yes",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "No",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 326.9615592956543,
        "y": 100.69231033325195,
        "wires": [
            [
                "156fdf98.a6a1f8"
            ],
            [
                "5b6b2ab4.c3115c"
            ]
        ]
    },
    {
        "id": "35b94240.b126c6",
        "type": "catch",
        "z": "87530aab.adb068",
        "name": "Catch API Errors",
        "scope": [
            "5b6b2ab4.c3115c",
            "156fdf98.a6a1f8"
        ],
        "x": 454.0237922668457,
        "y": 191.68085861206055,
        "wires": [
            [
                "a9f87d5b.6414c"
            ]
        ]
    },
    {
        "id": "a9f87d5b.6414c",
        "type": "function",
        "z": "87530aab.adb068",
        "name": "Log error and Switch Regions",
        "func": "node.error(msg.region + \" WCS failed switching region for user \" + msg.user + ' Error: '+ msg.error.message);\n\nif (msg.region === \"US-SOUTH\") {\n    msg.region = \"GERMANY\"\n} \nelse if (msg.region === \"GERMANY\"){\n    msg.region = \"US-SOUTH\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 703.7051849365234,
        "y": 193.60253715515137,
        "wires": [
            [
                "5b6b2ab4.c3115c"
            ]
        ]
    },
    {
        "id": "c19c9e60.baa25",
        "type": "function",
        "z": "73d26c58.2475cc",
        "name": "Log Error",
        "func": "var err_msg = \"UCG received an error from \" + msg.error.source.name + ' stating '+ msg.error.message;\n\nif (!msg.error.message.match(\"Can't set headers after they are sent\")){\nnode.error(err_msg);\nmsg.payload = err_msg;\n\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 186.3076992034912,
        "y": 30.4615535736084,
        "wires": [
            []
        ]
    },
    {
        "id": "9b67ecc7.c4228",
        "type": "inject",
        "z": "3fad3621.99e442",
        "name": "Start",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 83.5,
        "y": 410,
        "wires": [
            [
                "91bb250c.aab44"
            ]
        ]
    },
    {
        "id": "91bb250c.aab44",
        "type": "function",
        "z": "3fad3621.99e442",
        "name": "Get ENV",
        "func": "var process = global.get('process');\nmsg.payload = process.env\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 245.5,
        "y": 410,
        "wires": [
            [
                "690f11d9.b99eb8"
            ]
        ]
    },
    {
        "id": "690f11d9.b99eb8",
        "type": "debug",
        "z": "3fad3621.99e442",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 409.5,
        "y": 410,
        "wires": []
    },
    {
        "id": "a8fa194c.671b48",
        "type": "http in",
        "z": "15c6f20.6b9dd0e",
        "name": "Load HTTP in",
        "url": "/liveperson",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 103.57142639160156,
        "y": 98.57143020629883,
        "wires": [
            [
                "66a5be55.91598"
            ]
        ]
    },
    {
        "id": "fdcd22bf.a2fd4",
        "type": "function",
        "z": "15c6f20.6b9dd0e",
        "name": "Set Params",
        "func": "msg.source = \"LivePerson\"\nvar workspace_id = msg.req.query.workspace_id\nvar wcs_user_name = msg.req.query.wcs_username\nvar wcs_password = msg.req.query.wcs_password\n\n// Uncomment when New param is added to all front-ends and delete the default\n//var region = msg.req.query.primary_region\nmsg.region = \"US-SOUTH\";\n//Passed params are the primary config, will be used in the dynamic WCS router subflow to switch back\nmsg.primary_workspace_id = workspace_id;\nmsg.primary_wcs_user_name = wcs_user_name;\nmsg.primary_wcs_password = wcs_password;\nmsg.primary_region = msg.region;\n\nvar fname = msg.req.query.fname\n\n//create a null context and test for session existance\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context\n    wcs_user_name = msg.session.wcs_user_name\n    wcs_password  = msg.session.wcs_password\n    workspace_id  = msg.session.workspace_id \n   }\n \nvar newmsg = msg.req.query.text\nnewmsg = newmsg.replace(/'/g, \"\");  \n\nvar map = JSON.parse(\"{}\");\nvar image = JSON.parse(\"{}\");  \nvar button = JSON.parse(\"{}\");\n\nmsg.payload = newmsg\n\ncontext.fname = fname;\ncontext.map = map;\ncontext.image = image;\ncontext.button = button;\ncontext.source = msg.source\n\nvar params = {\n    context: context,\n    workspace_id : workspace_id,\n    username : wcs_user_name,\n    password : wcs_password\n};\n\n// node.log(\"User *** \" + msg.user + \" Said *** \" + newmsg)\n\nmsg.payload = newmsg\nmsg.params = params\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "x": 611.2499771118164,
        "y": 100.62500095367432,
        "wires": [
            [
                "5158954a.c30974",
                "fbc1eb00.354e18"
            ]
        ]
    },
    {
        "id": "7b72de05.798a18",
        "type": "function",
        "z": "15c6f20.6b9dd0e",
        "name": "Respone Msg",
        "func": "var Watson_msg = msg.payload;\nvar Watson_response = JSON.stringify(msg.payload.output.text);\nvar Watson_contextOBJ = msg.payload.context;\nvar belementArr = []\nvar totalText = []\nvar texts = msg.payload.output.text\n\nfor (i = 0; i < texts.length; i++) {\n\n  // Dennis added because SSML tag was escaping the \" with \\\" and the replace command fixes it!!!!\n  texts[i] = texts[i].replace(/\\\\/g, \"\");\n  //Dennis - Remove XML SSML tags from chat systems\n  texts[i] =  texts[i].replace(/<[^>]+>/g, \"\");\n \n  if (texts[i].lastIndexOf(\"InsMap\") >= 0 ) {\n     findindex = texts[i].lastIndexOf(\"InsMap\")\n     texts[i] = texts[i].substring(0,findindex)\n  } \n   totalText.push(texts[i]);\n}  \n\n\n  //simple buttons\n  if (totalText[totalText.length - 1].lastIndexOf(\"[\") >= 0 ) {\n     findindex = totalText[totalText.length - 1].lastIndexOf(\"[\");\n     findLastindex = totalText[totalText.length - 1].lastIndexOf(\"]\");\n     tempStr = totalText[totalText.length - 1];\n     totalText[totalText.length - 1]  = totalText[totalText.length - 1].substring(0,findindex); // Message without buttons\n     var buttonArr = tempStr.substring(findindex+1, findLastindex).split(\",\");\n     for (a = 0; a < buttonArr.length; a++) { \n        belementArr.push({\"type\": \"button\",\"title\": buttonArr[a],\"click\":{\"actions\":[{\"type\":\"publishText\",\"name\":buttonArr[a], \"text\": buttonArr[a]}]}});\n     }\n  }\n\n  var found_link = 0;\n  var ielementArr = [{\"type\":\"text\"}]\n  //json map\n  mapjsonObj = Watson_contextOBJ.map;\n  if (typeof mapjsonObj.values != \"undefined\") {\n      for (var c in mapjsonObj.values) {\n        imageStr = mapjsonObj.values[c] + \"&size=700x500\" ;\n        node.log(\"Found Json map str: \" + imageStr);\n       ielementArr.push({\"type\":\"image\",\"url\": imageStr});\n      }\n  }\n  \n  \n  //json image\n  imagejsonObj = Watson_contextOBJ.image;\n  if (typeof imagejsonObj.values != \"undefined\") {\n      for (var c in imagejsonObj.values) {\n        imageStr = imagejsonObj.values[c];\n       ielementArr.push({\"type\":\"image\",\"url\": imageStr});\n      }\n  }\n\n  buttonjsonObj = Watson_contextOBJ.button;\n  if (typeof buttonjsonObj.values != \"undefined\") {\n      for (var c in buttonjsonObj.values) {\n        buttonStr = buttonjsonObj.values[c];\n        if (buttonStr.lastIndexOf(\"|\") >= 0 ) {\n          found_link = 1;\n          buttonItems = buttonStr.split(\"|\");\n          button_title = buttonItems[0];\n          button_url = buttonItems[1];\n        \n          belementArr.push({\"type\": \"button\",\"title\": button_title,\"click\":{\"actions\":[{\"type\":\"link\",\"name\":button_title, \"uri\": button_url}]}}); \n        }\n        else {\n          button_title = buttonStr;  \n          belementArr.push({\"type\": \"button\",\"title\": button_title,\"click\":{\"actions\":[{\"type\":\"publishText\",\"name\":button_title, \"text\": button_title}]}}); \n        }\n      }\n  }\n\n  node.log(\"User ** \" + msg.user + \" Says ** \" +  msg.payload.input.text +  \" ** Response ** \" + totalText)\n  \n  var content = {\"type\": \"vertical\"}\n  ielementArr[0].text = totalText;\n  content.elements = ielementArr;\n\n  if (belementArr.length > 0)  {\n      content.elements[ielementArr.length] = {\"type\": \"horizontal\", \"elements\" : belementArr}\n  }\n\n  if (ielementArr.length > 1 || belementArr.length > 0) {\n      response = {content : content}; \n  }\n  else {\n      response = {text: totalText};    \n  }\n\n  msg.payload = response;\n\n\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 1140,
        "y": 200,
        "wires": [
            [
                "2a2ab63a.30e332",
                "a33b4e1.075c03"
            ]
        ]
    },
    {
        "id": "66a5be55.91598",
        "type": "function",
        "z": "15c6f20.6b9dd0e",
        "name": "Get User",
        "func": "msg.user =  msg.req.query.user_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 100,
        "wires": [
            [
                "296b89e1.f394ce"
            ]
        ]
    },
    {
        "id": "2a2ab63a.30e332",
        "type": "http response",
        "z": "15c6f20.6b9dd0e",
        "name": "Http Response",
        "x": 1377.499984741211,
        "y": 198.1249942779541,
        "wires": []
    },
    {
        "id": "4714084b.dcb8c",
        "type": "subflow:52457267.ef5464",
        "z": "15c6f20.6b9dd0e",
        "x": 950,
        "y": 200,
        "wires": [
            [
                "7b72de05.798a18"
            ]
        ]
    },
    {
        "id": "296b89e1.f394ce",
        "type": "subflow:f48845d6.67899",
        "z": "15c6f20.6b9dd0e",
        "name": "",
        "x": 435.0892868041992,
        "y": 100.71428871154785,
        "wires": [
            [
                "fdcd22bf.a2fd4"
            ]
        ]
    },
    {
        "id": "e3602a5e.65bd",
        "type": "debug",
        "z": "cb400db2.feb1d8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 510.5,
        "y": 506,
        "wires": []
    },
    {
        "id": "e4cbba6f.d6a58",
        "type": "function",
        "z": "17eb59dd.9ff326",
        "name": "Get User",
        "func": "\nmsg.user = msg.payload.context.vgwSessionID\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 249.99998474121094,
        "y": 107.85714340209961,
        "wires": [
            [
                "11d0ef84.6383a8"
            ]
        ]
    },
    {
        "id": "11d0ef84.6383a8",
        "type": "subflow:f48845d6.67899",
        "z": "17eb59dd.9ff326",
        "name": "",
        "x": 421.4285583496094,
        "y": 110.80356788635254,
        "wires": [
            [
                "6f0e4576.42ac84"
            ]
        ]
    },
    {
        "id": "2c2b72a8.c3ee7e",
        "type": "subflow:52457267.ef5464",
        "z": "17eb59dd.9ff326",
        "x": 991.2499618530273,
        "y": 228.4821376800537,
        "wires": [
            [
                "23a8e29.7be259e"
            ]
        ]
    },
    {
        "id": "c01a54c3.6e10e8",
        "type": "function",
        "z": "a0e2e197.345df",
        "name": "Find Workspace",
        "func": "\nif (msg.payload.trim().toUpperCase().substring(0,6) == \"ASK ME\"){\n    msg.params.workspace_id = \"54141f49-ffa2-4f6b-887c-aac6aea5d42d\";\n    msg.params.username = \"4acac659-e820-4ef6-8421-e88f517c9c4c\";\n    msg.params.password = \"k0gYo1FjJymP\";\n}\n//msg.payload = msg.payload.replace(/\\s+$/g,'')\nif ((msg.payload.toUpperCase().substring(0,5) == \"HELLO\") && (msg.payload.length > 5)){\n\n msg.testHello = msg.payload.toUpperCase().match(/\\b(BANK|INSURE|CALL CENTER|MONEY|HEALTH|METLIFE|FIDELITY|REGIONS|REGIONS TEST|LIBERTY|QUICKEN)\\b/g);\n if (msg.testHello !== null)\n   {msg.testHello = msg.testHello[0]}\n switch(msg.testHello) {\n    case 'BANK':\n        msg.params.workspace_id = \"d13cc96b-a323-43a1-b484-29d37679ac27\";\n        msg.params.username = \"4acac659-e820-4ef6-8421-e88f517c9c4c\";\n        msg.params.password = \"k0gYo1FjJymP\";\n        break;\n    case 'INSURE':\n        msg.params.workspace_id = \"54141f49-ffa2-4f6b-887c-aac6aea5d42d\";\n        msg.params.username = \"4acac659-e820-4ef6-8421-e88f517c9c4c\";\n        msg.params.password = \"k0gYo1FjJymP\";\n        break;\n    case 'CALL CENTER':\n        msg.params.workspace_id = \"faf6e421-43ae-474a-8f9e-e8e10e71e3df\";\n        msg.params.username = \"4acac659-e820-4ef6-8421-e88f517c9c4c\";\n        msg.params.password = \"k0gYo1FjJymP\";\n        break;\n    case 'MONEY':\n        msg.params.workspace_id = \"c2777aef-fe89-4df5-8792-46880d6a0662\";\n        msg.params.username = \"4acac659-e820-4ef6-8421-e88f517c9c4c\";\n        msg.params.password = \"k0gYo1FjJymP\";\n        break;\n    case 'HEALTH':\n        msg.params.workspace_id = \"17727c7a-6339-4bb8-a967-ccd8b12eed76\";\n        msg.params.username = \"e78c76ea-d8aa-4ed6-9fec-292455f3eb17\";\n        msg.params.password = \"UHJz4sZqu5Vq\";\n        break;    \n    case 'QUICKEN':\n        msg.params.workspace_id = \"20918e28-1c00-4611-8e88-60642ea77ebc\";\n        msg.params.username = \"0b41c42f-545b-4bb0-92a8-1824844b4e33\";\n        msg.params.password = \"S6zRVMYapwPy\";\n        break;    \n    case 'METLIFE':\n        msg.params.workspace_id = \"5fd7c1c7-9ea2-4fc8-b6fa-7920e10aad5a\";\n        msg.params.username = \"7d18e2e6-310b-4efc-9370-d9a8289e17dd\";\n        msg.params.password = \"UEVfKB4CLIyF\";\n        break;\n    case 'FIDELITY':\n        msg.params.workspace_id = \"1555159e-fa59-4d8d-bfba-b10a19144e22\";\n        msg.params.username = \"4acac659-e820-4ef6-8421-e88f517c9c4c\";\n        msg.params.password = \"k0gYo1FjJymP\";\n        break;\n     case 'REGIONS':\n        msg.params.workspace_id = \"321e996d-efee-42a0-8aed-3dc93006a026\";\n        msg.params.username = \"f40d2d94-d2e7-4dd1-a718-b57d93203aaa\";\n        msg.params.password = \"cYuHIo2dCmwf\";\n        break;\n     case 'REGIONS TEST':\n        msg.params.workspace_id = \"de1089d8-46e6-4a7d-b5ed-03c5338b7b0a\";\n        msg.params.username = \"271cc33b-4cf3-480c-8798-f4b3e980df00\";\n        msg.params.password = \"BlnizADsfAh8\";\n        break;\n    case 'LIBERTY':\n        msg.params.workspace_id = \"893ec9b6-bfc8-426a-8fd1-592a2e6ebaa8\";\n        msg.params.username = \"6c6eb782-c2ea-4b14-8912-072ac57eee3a\";\n        msg.params.password = \"Au5euZDUZBvO\";\n        break;\n    default: \n }\n}\n// check for date and compute age context vars\nif (msg.payload.lastIndexOf('/') >= 0 ) {\n     var myindex = msg.payload.lastIndexOf('/')\n     var dateString = msg.payload\n     \n     var d = new Date(dateString)\n     var now = new Date()\n     var years = now.getFullYear() - d.getFullYear()\n\n     d.setFullYear(d.getFullYear() + years)\n     var days = (now.getTime() - d.getTime()) / (3600 * 24 * 1000.00)\n     var age = years + days /365\n    \n     msg.params.context.age = Math.round(age *100)/100\n \n     var d = new Date(dateString)\n     var now = new Date()\n     now.setMonth(\"12\")\n     now.setDate(\"31\")\n     var years = now.getFullYear() - d.getFullYear()\n     d.setFullYear(d.getFullYear() + years)\n     var days = (now.getTime() - d.getTime()) / (3600 * 24 * 1000.00)\n     var ageEOY = years + days /365\n     msg.params.context.ageEOY = Math.round(ageEOY * 100)/100\n     \n     var d = new Date(dateString)\n     var now = new Date()\n     now.setMonth(\"01\")\n     now.setDate(\"01\")\n     var years = now.getFullYear() - d.getFullYear()\n     d.setFullYear(d.getFullYear() + years)\n     var days = (now.getTime() - d.getTime()) / (3600 * 24 * 1000.00)\n     var ageBOY = years + days /365\n     msg.params.context.ageBOY = Math.round(ageBOY * 100)/100\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "489a7c28.7a3e1c",
        "type": "subflow:a0e2e197.345df",
        "z": "c1e9a4dc.c42cf8",
        "x": 845.6249771118164,
        "y": 139.9999942779541,
        "wires": [
            [
                "e82d762d.da45d8"
            ]
        ]
    },
    {
        "id": "9decb34.6b0ab5",
        "type": "subflow:a0e2e197.345df",
        "z": "e85cff5a.1f786",
        "x": 1133.1249771118164,
        "y": 100.62500190734863,
        "wires": [
            [
                "ea24a25e.9d5e08"
            ]
        ]
    },
    {
        "id": "ff246159.bc5c78",
        "type": "comment",
        "z": "1b19f8b1.08de9f",
        "name": "Front-End must pass in user_id,wcs_username,wcs_password,workspace_id,text,fname",
        "info": "",
        "x": 357.5,
        "y": 396.87499237060547,
        "wires": []
    },
    {
        "id": "6b4af079.460ec8",
        "type": "comment",
        "z": "5c4d249a.7988f4",
        "name": "Front-End must pass in user_id,wcs_username,wcs_password,workspace_id,text,fname",
        "info": "",
        "x": 368.1249694824219,
        "y": 377.49999237060547,
        "wires": []
    },
    {
        "id": "f63b9768.11ed2",
        "type": "comment",
        "z": "e85cff5a.1f786",
        "name": "Front-End must pass in user_id,wcs_username,wcs_password,workspace_id,text,fname",
        "info": "",
        "x": 355.625,
        "y": 483.12499809265137,
        "wires": []
    },
    {
        "id": "99b31794.c48428",
        "type": "comment",
        "z": "c1e9a4dc.c42cf8",
        "name": "Front-End must pass in user_id,wcs_username,wcs_password,workspace_id,text,fname",
        "info": "",
        "x": 363.75,
        "y": 541.2500228881836,
        "wires": []
    },
    {
        "id": "a07022c9.caaa1",
        "type": "comment",
        "z": "d284a7e7.ca3e08",
        "name": "Front-End must pass in user_id,wcs_username,wcs_password,workspace_id,text,fname",
        "info": "",
        "x": 361,
        "y": 546.0000228881836,
        "wires": []
    },
    {
        "id": "a83ad392.2fc1",
        "type": "comment",
        "z": "17eb59dd.9ff326",
        "name": "Front-End must pass in user_id,wcs_username,wcs_password,workspace_id,text,fname",
        "info": "",
        "x": 378.12498474121094,
        "y": 375.3571357727051,
        "wires": []
    },
    {
        "id": "9e6c417.48554c",
        "type": "comment",
        "z": "17eb59dd.9ff326",
        "name": "Using new SAAS VG, we control config and session",
        "info": "",
        "x": 261.24998474121094,
        "y": 33.48214340209961,
        "wires": []
    },
    {
        "id": "80c40209.380db",
        "type": "comment",
        "z": "15c6f20.6b9dd0e",
        "name": "Front-End must pass in user_id,wcs_username,wcs_password,workspace_id,text,fname",
        "info": "",
        "x": 360.1666679382324,
        "y": 457.6666717529297,
        "wires": []
    },
    {
        "id": "5158954a.c30974",
        "type": "subflow:a0e2e197.345df",
        "z": "15c6f20.6b9dd0e",
        "x": 836.8749771118164,
        "y": 99.37500095367432,
        "wires": [
            [
                "c6e62d3f.e943c8"
            ]
        ]
    },
    {
        "id": "4c45588d.33d9f8",
        "type": "comment",
        "z": "14d2f552.3522fb",
        "name": "Front-End must pass in user_id,wcs_username,wcs_password,workspace_id,text,fname",
        "info": "",
        "x": 364.49998474121094,
        "y": 444.6666622161865,
        "wires": []
    },
    {
        "id": "cbea3e01.242f1",
        "type": "subflow:a0e2e197.345df",
        "z": "1b19f8b1.08de9f",
        "x": 850.6249771118164,
        "y": 100,
        "wires": [
            [
                "dc099fad.df4b28"
            ]
        ]
    },
    {
        "id": "23df69e2.9c5cde",
        "type": "subflow:a0e2e197.345df",
        "z": "5c4d249a.7988f4",
        "x": 1154.3749809265137,
        "y": 118.75,
        "wires": [
            [
                "eaee0d5f.355b8"
            ]
        ]
    },
    {
        "id": "359140e5.30fbf8",
        "type": "subflow:a0e2e197.345df",
        "z": "d284a7e7.ca3e08",
        "x": 874.9999771118164,
        "y": 99.37500095367432,
        "wires": [
            [
                "b43c5359.d93ff8"
            ]
        ]
    },
    {
        "id": "fbc1eb00.354e18",
        "type": "debug",
        "z": "15c6f20.6b9dd0e",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 780,
        "y": 40,
        "wires": []
    },
    {
        "id": "a33b4e1.075c03",
        "type": "debug",
        "z": "15c6f20.6b9dd0e",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1366.6827239990234,
        "y": 129.1826877593994,
        "wires": []
    },
    {
        "id": "2ca6dad1.471556",
        "type": "inject",
        "z": "5b6fab52.9eae84",
        "name": "Execute",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 133.07691955566406,
        "y": 140.00000190734863,
        "wires": [
            [
                "6e6c02c6.b45bbc"
            ]
        ]
    },
    {
        "id": "6e6c02c6.b45bbc",
        "type": "function",
        "z": "5b6fab52.9eae84",
        "name": "Flush Redis Keys",
        "func": "var redis = global.get('redis');\nvar options = {enable_offline_queue:false};\n   \nvar redisClient = global.get(\"redisClient\");\nif (typeof redisClient == \"undefined\") {\n  redisClient = new redis('redis://admin:XFRLCLICWCFQXPXA@sl-us-south-1-portal.5.dblayer.com:35110',options);\n//  redisClient = new redis('redis://admin:IVKPWZBPOAJYQCRR@bluemix-sandbox-dal-9-portal.7.dblayer.com:27247',options);\n  global.set(\"redisClient\",redisClient);\n  node.log(\"New RedisClient connection in SetSession\")\n}\n\n\nredisClient.on(\"error\", function (err) {\n    node.error(\"Error \" + err);\n//    client.disconnect(); \n});\n\nredisClient.flushdb( function (err, response) {\n   if (err) \n      node.error(\"Error \" + err);\n    else \n      msg.payload = response;\n//   client.disconnect(); \n   node.send(msg);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 316.1538391113281,
        "y": 140.0000057220459,
        "wires": [
            [
                "9b0f555d.5dc378"
            ]
        ]
    },
    {
        "id": "9b0f555d.5dc378",
        "type": "debug",
        "z": "5b6fab52.9eae84",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 511.80770111083984,
        "y": 139.69230937957764,
        "wires": []
    },
    {
        "id": "8028d1ba.6d4238",
        "type": "watson-tone-analyzer-v3",
        "z": "3c30ab94.447d3c",
        "name": "Tone",
        "tones": "all",
        "sentences": "true",
        "contentType": "false",
        "tone-method": "generalTone",
        "interface-version": "2016-05-19",
        "inputlang": "en",
        "default-endpoint": true,
        "service-endpoint": "https://gateway.watsonplatform.net/tone-analyzer/api",
        "x": 166.00000381469727,
        "y": 33.33333396911621,
        "wires": [
            [
                "9a74bd1c.3dec38"
            ]
        ]
    },
    {
        "id": "761db850.dd9db8",
        "type": "debug",
        "z": "e85cff5a.1f786",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1101.2499809265137,
        "y": 41.25000047683716,
        "wires": []
    },
    {
        "id": "b58bc39b.05dad8",
        "type": "debug",
        "z": "c1e9a4dc.c42cf8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 806.8749771118164,
        "y": 80,
        "wires": []
    },
    {
        "id": "c05e72e6.c3d9b8",
        "type": "debug",
        "z": "d284a7e7.ca3e08",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 784.3749771118164,
        "y": 36.875,
        "wires": []
    },
    {
        "id": "407147f1.d000d8",
        "type": "debug",
        "z": "17eb59dd.9ff326",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1392.2115173339844,
        "y": 146.75136375427246,
        "wires": []
    },
    {
        "id": "d607cfa4.6f61",
        "type": "debug",
        "z": "3fad3621.99e442",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 768.6470947265625,
        "y": 56.94120788574219,
        "wires": []
    },
    {
        "id": "bfe109be.2128e8",
        "type": "debug",
        "z": "3fad3621.99e442",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1268.6107177734375,
        "y": 150,
        "wires": []
    },
    {
        "id": "858b7538.3af7",
        "type": "subflow:a0e2e197.345df",
        "z": "3fad3621.99e442",
        "x": 822.84619140625,
        "y": 116.923095703125,
        "wires": [
            [
                "2106aeef.1a05a2"
            ]
        ]
    },
    {
        "id": "1c65d777.c58401",
        "type": "subflow:a0e2e197.345df",
        "z": "17eb59dd.9ff326",
        "x": 825.2197723388672,
        "y": 107.03296184539795,
        "wires": [
            [
                "7b7f3ea1.e978c8"
            ]
        ]
    },
    {
        "id": "9276e28b.47e05",
        "type": "catch",
        "z": "3fad3621.99e442",
        "name": "",
        "scope": null,
        "x": 1103,
        "y": 345,
        "wires": [
            [
                "e336bd51.ed2658"
            ]
        ]
    },
    {
        "id": "cbf85049.06ec38",
        "type": "catch",
        "z": "1b19f8b1.08de9f",
        "name": "",
        "scope": null,
        "x": 916.9166488647461,
        "y": 324.6057758331299,
        "wires": [
            [
                "df8771c3.a0d3b8"
            ]
        ]
    },
    {
        "id": "dc2067bc.5121e",
        "type": "catch",
        "z": "5c4d249a.7988f4",
        "name": "",
        "scope": null,
        "x": 1149.9615287780762,
        "y": 324.3846092224121,
        "wires": [
            [
                "1f10857b.99f073"
            ]
        ]
    },
    {
        "id": "adaf6bad.b592a8",
        "type": "catch",
        "z": "e85cff5a.1f786",
        "name": "",
        "scope": null,
        "x": 1086.5961227416992,
        "y": 202.39422607421875,
        "wires": [
            [
                "24a60928.81d1ae"
            ]
        ]
    },
    {
        "id": "e336bd51.ed2658",
        "type": "subflow:73d26c58.2475cc",
        "z": "3fad3621.99e442",
        "x": 1263.8460693359375,
        "y": 344.076904296875,
        "wires": [
            []
        ]
    },
    {
        "id": "df8771c3.a0d3b8",
        "type": "subflow:73d26c58.2475cc",
        "z": "1b19f8b1.08de9f",
        "x": 1083.278793334961,
        "y": 324.60573959350586,
        "wires": [
            []
        ]
    },
    {
        "id": "1f10857b.99f073",
        "type": "subflow:73d26c58.2475cc",
        "z": "5c4d249a.7988f4",
        "x": 1317.846176147461,
        "y": 325.009578704834,
        "wires": [
            []
        ]
    },
    {
        "id": "24a60928.81d1ae",
        "type": "subflow:73d26c58.2475cc",
        "z": "e85cff5a.1f786",
        "x": 1246.5960693359375,
        "y": 202.3942413330078,
        "wires": [
            []
        ]
    },
    {
        "id": "83cfde7e.c7acd",
        "type": "catch",
        "z": "c1e9a4dc.c42cf8",
        "name": "",
        "scope": null,
        "x": 1359.1827239990234,
        "y": 361.3461580276489,
        "wires": [
            [
                "e4beccfe.56bb28"
            ]
        ]
    },
    {
        "id": "e4beccfe.56bb28",
        "type": "subflow:73d26c58.2475cc",
        "z": "c1e9a4dc.c42cf8",
        "x": 1520.0480842590332,
        "y": 359.4711265563965,
        "wires": [
            []
        ]
    },
    {
        "id": "90358780.f552",
        "type": "catch",
        "z": "d284a7e7.ca3e08",
        "name": "",
        "scope": null,
        "x": 1284.163330078125,
        "y": 231.50961303710938,
        "wires": [
            [
                "ac7a567b.9181d8"
            ]
        ]
    },
    {
        "id": "ac7a567b.9181d8",
        "type": "subflow:73d26c58.2475cc",
        "z": "d284a7e7.ca3e08",
        "x": 1460.605697631836,
        "y": 230.75960731506348,
        "wires": [
            []
        ]
    },
    {
        "id": "8fa088d.7656af8",
        "type": "catch",
        "z": "17eb59dd.9ff326",
        "name": "",
        "scope": null,
        "x": 1065.8173522949219,
        "y": 302.18404388427734,
        "wires": [
            [
                "c9d32cbc.517e38"
            ]
        ]
    },
    {
        "id": "c9d32cbc.517e38",
        "type": "subflow:73d26c58.2475cc",
        "z": "17eb59dd.9ff326",
        "x": 1238.2692565917969,
        "y": 302.0398178100586,
        "wires": [
            []
        ]
    },
    {
        "id": "17661852.bbefc",
        "type": "catch",
        "z": "15c6f20.6b9dd0e",
        "name": "",
        "scope": null,
        "x": 947.3557739257812,
        "y": 277.35577392578125,
        "wires": [
            [
                "2e6ac22d.7878be"
            ]
        ]
    },
    {
        "id": "2e6ac22d.7878be",
        "type": "subflow:73d26c58.2475cc",
        "z": "15c6f20.6b9dd0e",
        "x": 1107.4134521484375,
        "y": 277.35577392578125,
        "wires": [
            []
        ]
    },
    {
        "id": "3c7fecf0.cb5204",
        "type": "catch",
        "z": "14d2f552.3522fb",
        "name": "",
        "scope": null,
        "x": 782.6923065185547,
        "y": 368.46154403686523,
        "wires": [
            [
                "cbecb878.53e2f8"
            ]
        ]
    },
    {
        "id": "cbecb878.53e2f8",
        "type": "subflow:73d26c58.2475cc",
        "z": "14d2f552.3522fb",
        "x": 943.4615384615382,
        "y": 368.4615384615384,
        "wires": [
            []
        ]
    },
    {
        "id": "dc099fad.df4b28",
        "type": "subflow:3c30ab94.447d3c",
        "z": "1b19f8b1.08de9f",
        "x": 478.7083511352539,
        "y": 219.00000381469727,
        "wires": [
            [
                "770fb799.812778"
            ]
        ]
    },
    {
        "id": "eaee0d5f.355b8",
        "type": "subflow:3c30ab94.447d3c",
        "z": "5c4d249a.7988f4",
        "x": 715.1666030883789,
        "y": 239.9999942779541,
        "wires": [
            [
                "6ec63494.c7597c"
            ]
        ]
    },
    {
        "id": "ea24a25e.9d5e08",
        "type": "subflow:3c30ab94.447d3c",
        "z": "e85cff5a.1f786",
        "x": 608.3749465942383,
        "y": 261.6250123977661,
        "wires": [
            [
                "f3ba8b62.706b1"
            ]
        ]
    },
    {
        "id": "e82d762d.da45d8",
        "type": "subflow:3c30ab94.447d3c",
        "z": "c1e9a4dc.c42cf8",
        "x": 725.3333129882812,
        "y": 280.6666564941406,
        "wires": [
            [
                "326e5d72.f93f62"
            ]
        ]
    },
    {
        "id": "6657e485.95345c",
        "type": "subflow:3c30ab94.447d3c",
        "z": "d284a7e7.ca3e08",
        "x": 854.9999809265137,
        "y": 443.6666851043701,
        "wires": [
            [
                "bf81c880.a608e"
            ]
        ]
    },
    {
        "id": "7b7f3ea1.e978c8",
        "type": "subflow:3c30ab94.447d3c",
        "z": "17eb59dd.9ff326",
        "x": 620.9999618530273,
        "y": 227.8571376800537,
        "wires": [
            [
                "4febfac6.ceb984"
            ]
        ]
    },
    {
        "id": "c6e62d3f.e943c8",
        "type": "subflow:3c30ab94.447d3c",
        "z": "15c6f20.6b9dd0e",
        "x": 584.3333129882812,
        "y": 200.00001525878906,
        "wires": [
            [
                "2d9f2869.207ae"
            ]
        ]
    },
    {
        "id": "49458180.53d37",
        "type": "subflow:3c30ab94.447d3c",
        "z": "14d2f552.3522fb",
        "x": 566.124942779541,
        "y": 160.0416660308838,
        "wires": [
            [
                "64ce8c38.1bc864"
            ]
        ]
    },
    {
        "id": "42211b27.44fd74",
        "type": "inject",
        "z": "6e97b3ee.89fce4",
        "name": "Inject",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 75,
        "y": 1374.375036239624,
        "wires": [
            [
                "e9700224.499d6"
            ]
        ]
    },
    {
        "id": "9ae67e78.84806",
        "type": "http request",
        "z": "6e97b3ee.89fce4",
        "name": "WDS Delete Doc",
        "method": "DELETE",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 455,
        "y": 1374.375036239624,
        "wires": [
            [
                "d3477a2b.1c4098"
            ]
        ]
    },
    {
        "id": "d3477a2b.1c4098",
        "type": "debug",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 655,
        "y": 1374.375036239624,
        "wires": []
    },
    {
        "id": "6cf13348.1d3c74",
        "type": "inject",
        "z": "6e97b3ee.89fce4",
        "name": "Inject",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 589.9999732971191,
        "y": 206.50002670288086,
        "wires": [
            [
                "f2a4db7e.78818"
            ]
        ]
    },
    {
        "id": "f2a4db7e.78818",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "Build Single JSON Doc",
        "func": "\n\n/*UCG enriched fields for WDS\n  Type  |   Fields\n--------|-----------------\nTerm    | Key = Term, Text = Definiition\nQA      | Key = Question, Text = Answer\nArticle | Key = Title, Text = Article\n*/\n\ndata = {Key  : \"Dennis Noto\",\n          Text : \"UCG Creator\",\n          Type : \"Term\",\n  }\n\nmsg.document_id = Type + \"-\" + Term\nmsg.payload =  data\nmsg.payload.filename = msg.document_id + \".json\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 791.9166870117188,
        "y": 206.50007820129395,
        "wires": [
            [
                "20794257.7ec3ae"
            ]
        ]
    },
    {
        "id": "81c6f4a.767f088",
        "type": "inject",
        "z": "6e97b3ee.89fce4",
        "name": "Inject",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 81.875,
        "y": 260.75004959106445,
        "wires": [
            [
                "5a60f1b4.5b37e8"
            ]
        ]
    },
    {
        "id": "5a60f1b4.5b37e8",
        "type": "file in",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "filename": "/data/investopedia_terms.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "x": 302.7960510253906,
        "y": 260.2237358093262,
        "wires": [
            [
                "36e2479e.52446"
            ]
        ]
    },
    {
        "id": "85ebbba8.42f1b8",
        "type": "comment",
        "z": "6e97b3ee.89fce4",
        "name": "Now in the Get Answer Subflow",
        "info": "",
        "x": 150,
        "y": 47.49999976158142,
        "wires": []
    },
    {
        "id": "ced7f006.7291e8",
        "type": "comment",
        "z": "6e97b3ee.89fce4",
        "name": "Used to delete a doc",
        "info": "",
        "x": 105,
        "y": 1314.375036239624,
        "wires": []
    },
    {
        "id": "6cf321a8.f00278",
        "type": "comment",
        "z": "6e97b3ee.89fce4",
        "name": "Used to ingest docs from a CSV file via HTTP or NFS",
        "info": "",
        "x": 226.75,
        "y": 190.75005531311035,
        "wires": []
    },
    {
        "id": "4fd4437c.7ca034",
        "type": "comment",
        "z": "6e97b3ee.89fce4",
        "name": "Used to get Collection, Training Data, and Notices information",
        "info": "",
        "x": 255,
        "y": 650.8749561309814,
        "wires": []
    },
    {
        "id": "e9700224.499d6",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "Set Delete Doc",
        "func": "\nmsg.collection_id = \"06bca61b-6cad-4573-a618-215ae55b643c\"\nmsg.environment_id = \"d40ba5ee-be86-4b59-8a67-f463f233367d\"\nmsg.doc_id = \"Article-Contact-credit-bureaus-if-are-a-victim-of-identity-theft\"\n\nmsg.url = \"https://gateway.watsonplatform.net/discovery/api/v1/environments/\" + msg.environment_id + \"/collections/\" + msg.collection_id + \"/documents/\" + msg.doc_id + \"?version=2017-11-07\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 245,
        "y": 1374.375036239624,
        "wires": [
            [
                "9ae67e78.84806"
            ]
        ]
    },
    {
        "id": "1ee523f9.033d7c",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "WDS Search",
        "func": "var watson = global.get('watson');\n\nvar discovery = new watson.DiscoveryV1({\n  username: \"578d5c5e-a713-44ad-bd8b-d3b8ba39c03c\",\n  password: \"NaFdTJluDnem\",\n  version_date: '2017-11-07'\n});\n\nvar params = {\n    natural_language_query: \"How does a adjustable rate mortgage work\",\n    environment_id: \"d40ba5ee-be86-4b59-8a67-f463f233367d\",\n    collection_id: \"35835dcf-e873-4a43-9034-786210ffebf2\",\n    configuration_id: \"1d573129-7100-4405-b6a0-439cd8af2640\",\n    passages: true, //if you want to enable passages\n    passages_fields : \"Text\",\n    count : 10\n    //sort : \"Term\"\n   //  return: ''\n  //highlight: true //if you want to enable highlight\n\n}\n\ndiscovery.query(params, (error, results) => {\n    if (error) {\n      node.error(error);\n    } else {\n      msg.WDSResults = results; //your query results\n      node.send(msg);\n        \n    }\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 100,
        "wires": [
            [
                "abdc4d10.884698"
            ]
        ]
    },
    {
        "id": "c834f012.6e23d8",
        "type": "inject",
        "z": "6e97b3ee.89fce4",
        "name": "Inject",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 84.99999618530273,
        "y": 758.1249923706055,
        "wires": [
            [
                "353979f7.53af26"
            ]
        ]
    },
    {
        "id": "d4e06cf.ec1e31",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "WDS Training data Info URL",
        "func": "\nmsg.url = \"https://gateway.watsonplatform.net/discovery/api/v1/environments/\" + msg.environment_id + \"/collections/\" + msg.collection_id + \"/training_data?version=2017-11-07\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 471.99999618530273,
        "y": 758.1249923706055,
        "wires": [
            [
                "22d38a97.effb1e"
            ]
        ]
    },
    {
        "id": "22d38a97.effb1e",
        "type": "http request",
        "z": "6e97b3ee.89fce4",
        "name": "Execute URL",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 720.9999961853027,
        "y": 757.1249923706055,
        "wires": [
            [
                "fc734934.852358"
            ]
        ]
    },
    {
        "id": "fc734934.852358",
        "type": "debug",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 906.0000190734863,
        "y": 756.1249799728394,
        "wires": []
    },
    {
        "id": "739675b8.03d35c",
        "type": "inject",
        "z": "6e97b3ee.89fce4",
        "name": "Inject",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 91,
        "y": 962.8750228881836,
        "wires": [
            [
                "83632849.dd8f9"
            ]
        ]
    },
    {
        "id": "83632849.dd8f9",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "Get doc by id",
        "func": "var watson = global.get('watson');\n\nvar discovery = new watson.DiscoveryV1({\n  username: \"578d5c5e-a713-44ad-bd8b-d3b8ba39c03c\",\n  password: \"NaFdTJluDnem\",\n  version_date: '2017-11-07'\n});\n\nvar params = {\n    query: \"_id:SIMPLE-IRA\",\n    environment_id: \"d40ba5ee-be86-4b59-8a67-f463f233367d\",\n    collection_id: \"35835dcf-e873-4a43-9034-786210ffebf2\",\n    configuration_id: \"1d573129-7100-4405-b6a0-439cd8af2640\",\n    passages: true\n}\n\ndiscovery.query(params, (error, results) => {\n    if (error) {\n      node.error(error);\n    } else {\n      msg.payload = results; //your query results\n      node.send(msg);\n        \n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 255,
        "y": 962.8750228881836,
        "wires": [
            [
                "cc370b5d.72e8b8"
            ]
        ]
    },
    {
        "id": "cc370b5d.72e8b8",
        "type": "debug",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 442,
        "y": 962.8750228881836,
        "wires": []
    },
    {
        "id": "f39832e8.fdb7d8",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "WDS Collection info URL",
        "func": "\nmsg.url = \"https://gateway.watsonplatform.net/discovery/api/v1/environments/\" + msg.environment_id + \"/collections/\" + msg.collection_id + \"?version=2017-11-07\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 469.83333587646484,
        "y": 711.4583129882812,
        "wires": [
            [
                "22d38a97.effb1e"
            ]
        ]
    },
    {
        "id": "8828eda2.dacf58",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "WDS Get Notices URL",
        "func": "\nmsg.url = \"https://gateway.watsonplatform.net/discovery/api/v1/environments/\" + msg.environment_id + \"/collections/\" + msg.collection_id + \"/notices?version=2017-11-07\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470.49999237060547,
        "y": 804.7916870117188,
        "wires": [
            [
                "22d38a97.effb1e"
            ]
        ]
    },
    {
        "id": "353979f7.53af26",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "Set Params",
        "func": "msg.collection_id = \"35835dcf-e873-4a43-9034-786210ffebf2\"\nmsg.environment_id = \"d40ba5ee-be86-4b59-8a67-f463f233367d\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 230.49999618530273,
        "y": 758.1249923706055,
        "wires": [
            [
                "d4e06cf.ec1e31",
                "f39832e8.fdb7d8",
                "8828eda2.dacf58"
            ]
        ]
    },
    {
        "id": "d8993cfe.a959d8",
        "type": "inject",
        "z": "6e97b3ee.89fce4",
        "name": "Inject",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 91.5,
        "y": 1233.1250343322754,
        "wires": [
            [
                "58f95e40.725f88"
            ]
        ]
    },
    {
        "id": "58f95e40.725f88",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "WDS Delete Training Example URL",
        "func": "msg.collection_id = \"35835dcf-e873-4a43-9034-786210ffebf2\"\nmsg.environment_id = \"d40ba5ee-be86-4b59-8a67-f463f233367d\"\nmsg.query_id = \"321177599782e7d8cbe136dc25ec1626616648af\"\nmsg.examples_id = \"034cdf93-e7ce-4bd7-ac98-60b0896202ee\"\nmsg.url = \"https://gateway.watsonplatform.net/discovery/api/v1/environments/\" + msg.environment_id + \"/collections/\" + msg.collection_id + \"/training_data/\" + msg.query_id + \"/examples/\" + msg.examples_id + \"?version=2017-11-07\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 313.5,
        "y": 1233.1250343322754,
        "wires": [
            [
                "b7906220.082db"
            ]
        ]
    },
    {
        "id": "b7906220.082db",
        "type": "http request",
        "z": "6e97b3ee.89fce4",
        "name": "Execute URL",
        "method": "DELETE",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 570.5,
        "y": 1233.1250343322754,
        "wires": [
            [
                "f1b55e1b.a76528"
            ]
        ]
    },
    {
        "id": "f1b55e1b.a76528",
        "type": "debug",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 769.5,
        "y": 1233.1250343322754,
        "wires": []
    },
    {
        "id": "77767850.bd513",
        "type": "switch",
        "z": "75456024.34a398",
        "name": "Answer Switch",
        "property": "answerType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "WCS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "WDS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 760.7586822509766,
        "y": 71.87337303161621,
        "wires": [
            [],
            [
                "831a6062.17367"
            ]
        ]
    },
    {
        "id": "78ff02b2.128ea4",
        "type": "function",
        "z": "75456024.34a398",
        "name": "Check WCS Confidence",
        "func": "msg.answerType = \"WCS\" \nmsg.highIntent = false\nmsg.highEntity = false\nvar savIntentConf = 0\nvar savEntityConf = 0\nvar intentFound = false\nvar entityFound = false\nmsg.USE_WCS_ANSWER = false\nmsg.USE_WDS_ANSWER = false\nmsg.UCG_ANSWER_ROUTING = \"WCS-WDS\"\n/*\nUCG_ANSWER_ROUTING\n  This will be used to allow engineers to change the answer routing via a context var.\n  Possible Values:\n    WCS-WDS     - the default routing that uses a canned answer that replaces WCS's output.text array\n    WCS-WDS-WCS - routes back through WCS after calling WDS with new context vars\n              WDSResults - JSON object with payload from WDS\n              answerType - either WCS or WDS to indicate what where the answer came from.\n\nUSE_WDS_ANSWER\n   Used to override flow to send utterance to WDS for an answer\n\nUSE_WCS_ANSWER\n   Used to ensure that flow retains answer from WCS, thus by passing confidence/anything else checks\n  \n  WCS engineers need to set context var USE_WCS_ANSWER if the dialog condition statement:\n     1) does not use an intent or entity, like using tone score to give back an answer\n     2) use true to force node answer and a low confidence match comes back for an intent or entity\n\n*/\nif (typeof msg.payload.context !== \"undefined\"){ \n    if (typeof msg.payload.context.USE_WCS_ANSWER !== \"undefined\"){ \n        msg.USE_WCS_ANSWER = true\n        delete msg.payload.context.USE_WCS_ANSWER\n    }\n    if (typeof msg.payload.context.USE_WDS_ANSWER !== \"undefined\"){ \n        msg.USE_WDS_ANSWER = true\n        delete msg.payload.context.USE_WDS_ANSWER\n    }\n    if (typeof msg.payload.context.UCG_ANSWER_ROUTING !== \"undefined\"){ \n        msg.UCG_ANSWER_ROUTING = msg.payload.context.UCG_ANSWER_ROUTING\n    }\n    \n}    \n\nif (typeof msg.payload.intents[0] !== \"undefined\"){ \n    if (msg.payload.intents[0].confidence > .50){\n      \n         msg.highIntent = true\n    }\n    savIntentConf = msg.payload.intents[0].confidence\n    intentFound = true\n        \n    }\n\nif (typeof msg.payload.entities[0] !== \"undefined\"){\n    if (msg.payload.entities[0].confidence > .50){\n        msg.highEntity = true\n    }\n    savEntityConf = msg.payload.entities[0].confidence\n    entityFound = true\n}\n\n//if (!msg.USE_WCS_ANSWER) {\n // if (msg.highIntent || msg.highEntity ) {\n //   msg.answerType = \"WCS\"\n // }\n if (msg.payload.output.text.length > 0) {\n        // Anything else dialog node - make sure no intent or entity\n        if (msg.payload.output.text[0].toUpperCase().match(/\\b(FUTURE TRAINING|HAVING TROUBLE|HAVEN'T BEEN TRAINED)\\b/g))  {\n                msg.answerType = \"WDS\"\n        }\n        else {msg.answerType = \"WCS\"\n            \n        }\n    \n    /* Going to comment out for now because getting in the way of good answers\n       // Low intent conf     \n        if (intentFound) {\n            if (savIntentConf < .50 ) {\n                msg.answerType = \"WDS\"\n            }\n        }\n        // Low entity conf    \n        if (entityFound) {\n            if (savEntityConf < .50 ) {\n                msg.answerType = \"WDS\"\n            }\n        }\n    */    \n    }\n  else {\n        msg.answerType = \"WDS\" \n  }\n//}\n//else {\n//  msg.answerType = \"WCS\"   \n//}\nif (msg.USE_WCS_ANSWER) {\n  msg.answerType = \"WCS\"   \n} \nif (msg.USE_WDS_ANSWER) {\n  msg.answerType = \"WDS\"   \n}    \n\nmsg.params.context.answerType =  msg.answerType\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 526.323356628418,
        "y": 72.25152778625488,
        "wires": [
            [
                "77767850.bd513"
            ]
        ]
    },
    {
        "id": "831a6062.17367",
        "type": "function",
        "z": "75456024.34a398",
        "name": "WDS Search",
        "func": "var watson = global.get('watson');\n\nvar discovery = new watson.DiscoveryV1({\n  username: \"578d5c5e-a713-44ad-bd8b-d3b8ba39c03c\",\n  password: \"NaFdTJluDnem\",\n  version_date: '2017-11-07'\n});\n\nvar params = {\n    natural_language_query: msg.payload.input.text,\n    environment_id: \"d40ba5ee-be86-4b59-8a67-f463f233367d\",\n    collection_id: \"35835dcf-e873-4a43-9034-786210ffebf2\",\n    configuration_id: \"1d573129-7100-4405-b6a0-439cd8af2640\",\n    passages: true, //if you want to enable passages\n    passages_fields : \"Text\"\n    //sort : \"Term\"\n   //  return: ''\n  //highlight: true //if you want to enable highlight\n\n}\n\ndiscovery.query(params, (error, results) => {\n    if (error) {\n      node.error(error);\n    } else {\n      msg.WDSResults = results; //your query results\n      msg.test = msg.payload.input.abc\n      node.send(msg);\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 721.5738906860352,
        "y": 159.32255268096924,
        "wires": [
            [
                "e56baa7a.49625",
                "5aa7c031.7e98c"
            ]
        ]
    },
    {
        "id": "2106aeef.1a05a2",
        "type": "subflow:75456024.34a398",
        "z": "3fad3621.99e442",
        "x": 709.7856216430664,
        "y": 235.96155738830566,
        "wires": [
            [
                "45ecefd5.b04ee8",
                "4af9f5ec.8d8fcc"
            ]
        ]
    },
    {
        "id": "67c863cf.d22444",
        "type": "subflow:87530aab.adb068",
        "z": "75456024.34a398",
        "x": 191.1904754638672,
        "y": 221.71429061889648,
        "wires": [
            []
        ]
    },
    {
        "id": "ececde02.3d2dc8",
        "type": "comment",
        "z": "75456024.34a398",
        "name": "Can replace single Convo with Dynamic Router Subflow",
        "info": "",
        "x": 241.5,
        "y": 170.3333396911621,
        "wires": []
    },
    {
        "id": "b6cdde19.f645c8",
        "type": "comment",
        "z": "75456024.34a398",
        "name": "Run through WCS first, Test confidence and go to WDS if confidence below 50%",
        "info": "",
        "x": 325,
        "y": 27.5,
        "wires": []
    },
    {
        "id": "15cfe8da.17eb4f",
        "type": "comment",
        "z": "6e97b3ee.89fce4",
        "name": "Used to get info on a single document",
        "info": "",
        "x": 175,
        "y": 910.2500267028809,
        "wires": []
    },
    {
        "id": "304ad04f.1d415",
        "type": "comment",
        "z": "6e97b3ee.89fce4",
        "name": "Used to delete an example when you get a traing error found in a notice",
        "info": "",
        "x": 295,
        "y": 1166.6250677108765,
        "wires": []
    },
    {
        "id": "25c719ea.a89abe",
        "type": "function",
        "z": "75456024.34a398",
        "name": "Enhance Answer",
        "func": "if (msg.WDSResults.matching_results > 0){\n    if (typeof msg.WDSResults.results[0].Text !== \"undefined\"){\n        msg.newOutput = []\n        msg.arrayOutput = []\n        \n        msg.testOutput = msg.WDSResults.results[0].Text.split(\"\\r\")\n        if (msg.testOutput.length > 1) {\n            msg.arrayOutput = msg.testOutput\n        }\n        else {\n            msg.arrayOutput.push(msg.WDSResults.results[0].Text)\n        }\n        \n        if (msg.WDSResults.results[0].Type == \"Term\") {\n            msg.newOutput.push(\"I found this definition in my glossary for \" + msg.WDSResults.results[0].Key + \". \")\n        }\n        else if (msg.WDSResults.results[0].Type == \"Article\") {\n            msg.newOutput.push(\"I found this article entitled  \" + msg.WDSResults.results[0].Key + \".\")  \n        }\n        else {\n            \n        }\n        \n        for (i = 0; i < msg.arrayOutput.length; i++) {\n             msg.newOutput.push(msg.arrayOutput[i])\n        }\n        msg.newOutput.push(\"Do you have more questions for me?\")\n        msg.payload.output.text = msg.newOutput\n    }  \n}\nelse {\n   msg.payload.output.text[0] = \"Sorry, I tried many sources to answer your question, can you restate your question?\" \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1022.1664772033691,
        "y": 117.0411024093628,
        "wires": [
            []
        ]
    },
    {
        "id": "25f0b61a.a69552",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "WDS Update Single Doc",
        "func": "var watson = global.get('watson');\n\nvar discovery = new watson.DiscoveryV1({\n  username: \"578d5c5e-a713-44ad-bd8b-d3b8ba39c03c\",\n  password: \"NaFdTJluDnem\",\n  version_date: '2017-11-07'\n});\n\ndata = {Term : \"Dennis Noto\",\n        Text : \"The man, the myth, the legend, he is the most masterful innovator of our time, not Steve Jobs, but Dennis Noto!\",\n        Type : \"Term\"\n  }\n\nvar params = {\n    environment_id: \"d40ba5ee-be86-4b59-8a67-f463f233367d\",\n    collection_id: \"35835dcf-e873-4a43-9034-786210ffebf2\",\n    configuration_id: \"1d573129-7100-4405-b6a0-439cd8af2640\",\n    document_id : \"6e1fab9c-7153-4646-a160-9ae1471d49ab\",\n    file : data\n\n}\n\ndiscovery.updateJsonDocument(params, (error, results) => {\n    if (error) {\n      node.error(error);\n    } else {\n      msg.payload = results;\n      node.send(msg);\n        \n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 282,
        "y": 1094.7500324249268,
        "wires": [
            [
                "19b4083a.91d4d8"
            ]
        ]
    },
    {
        "id": "1127bfa5.61d828",
        "type": "inject",
        "z": "6e97b3ee.89fce4",
        "name": "Inject",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 87,
        "y": 1094.7500324249268,
        "wires": [
            [
                "25f0b61a.a69552"
            ]
        ]
    },
    {
        "id": "19b4083a.91d4d8",
        "type": "debug",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 514.3333206176758,
        "y": 1094.7500038146973,
        "wires": []
    },
    {
        "id": "3596ca2d.31b8b6",
        "type": "comment",
        "z": "6e97b3ee.89fce4",
        "name": "Used to update a doc",
        "info": "",
        "x": 115,
        "y": 1049.7500324249268,
        "wires": []
    },
    {
        "id": "20794257.7ec3ae",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "WDS Update Doc",
        "func": "var watson = global.get('watson');\n\nvar discovery = new watson.DiscoveryV1({\n  username: \"578d5c5e-a713-44ad-bd8b-d3b8ba39c03c\",\n  password: \"NaFdTJluDnem\",\n  version_date: '2017-11-07'\n});\n\nvar params = {\n    environment_id: \"d40ba5ee-be86-4b59-8a67-f463f233367d\",\n    collection_id: \"35835dcf-e873-4a43-9034-786210ffebf2\",\n    configuration_id: \"1d573129-7100-4405-b6a0-439cd8af2640\",\n    document_id : msg.document_id,\n    file : msg.payload\n}\n\nif (msg.stop) {\n    return msg;\n}\n\ndiscovery.updateJsonDocument(params, (error, results) => {\n    if (error) {\n      node.error(error,msg);\n    } else {\n      msg.payload = results; //your query results\n      node.send(msg);\n        \n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 1067.3540420532227,
        "y": 260.4605178833008,
        "wires": [
            [
                "d200252c.82f54",
                "97116687.b1fab"
            ]
        ]
    },
    {
        "id": "97116687.b1fab",
        "type": "debug",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1284.95263671875,
        "y": 213.24243354797363,
        "wires": []
    },
    {
        "id": "f3ad2e4f.2c9fb8",
        "type": "inject",
        "z": "6e97b3ee.89fce4",
        "name": "Inject",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 81.16696166992188,
        "y": 484.50000381469727,
        "wires": [
            [
                "6227beba.b8795"
            ]
        ]
    },
    {
        "id": "6227beba.b8795",
        "type": "file in",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "filename": "/data/Articles_TrainingQueries.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "x": 308.1113967895508,
        "y": 484.4999876022339,
        "wires": [
            [
                "a04b547.f558028"
            ]
        ]
    },
    {
        "id": "a04b547.f558028",
        "type": "csv",
        "z": "6e97b3ee.89fce4",
        "name": "Convert Training CSV",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "x": 608.833625793457,
        "y": 484.5000104904175,
        "wires": [
            [
                "c3c928bc.edf9d"
            ]
        ]
    },
    {
        "id": "c3c928bc.edf9d",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "Build JSON Training",
        "func": "msg.collection_id = \"06bca61b-6cad-4573-a618-215ae55b643c\"\nmsg.environment_id = \"d40ba5ee-be86-4b59-8a67-f463f233367d\"\nvar processArray = msg.payload\nmsg.stop = false\n\nfor (i = 0; i < processArray.length + 1; i++) {\n//for (i = 0; i < 2; i++) { \n (function(i) { setTimeout(function() {\n            \n            if (i == processArray.length) {\n                     msg.stop = true\n                     msg.payload = {status : \"Finished\"}\n                     node.send(msg);\n            }\n            else {      \n                  \n                  data = {natural_language_query  : processArray[i].Query,\n                              examples : []\n                  }\n                  \n                 \n                  if (processArray[i].ReleventDoc1 != \"NA\" ) {\n                     data.examples.push({\"document_id\" : processArray[i].ReleventDoc1, \"relevance\" : processArray[i].RScore1});\n                  }\n                 \n                  if (processArray[i].ReleventDoc2 != \"NA\" ) {\n                     data.examples.push({\"document_id\" : processArray[i].ReleventDoc2, \"relevance\" : processArray[i].RScore2});\n                  }\n                \n                  if (processArray[i].ReleventDoc3 != \"NA\" ) {\n                     data.examples.push({\"document_id\" : processArray[i].ReleventDoc3, \"relevance\" : processArray[i].RScore3});\n                  }\n                 \n                  if (processArray[i].NonReleventDoc1 != \"NA\" ) {\n                     data.examples.push({\"document_id\" : processArray[i].NonReleventDoc1, \"relevance\" : processArray[i].NRScore1});\n                  }\n                  \n                  if (processArray[i].NonReleventDoc2 != \"NA\" ) {\n                     data.examples.push({\"document_id\" : processArray[i].NonReleventDoc2, \"relevance\" : processArray[i].NRScore2});\n                  }\n                  \n                  if (processArray[i].NonReleventDoc3 != \"NA\" ) {\n                     data.examples.push({\"document_id\" : processArray[i].NonReleventDoc3, \"relevance\" : processArray[i].NRScore3});\n                  }\n                  msg.url = \"https://gateway.watsonplatform.net/discovery/api/v1/environments/\" + msg.environment_id + \"/collections/\" + msg.collection_id + \"/training_data?version=2017-11-07\"\n                  msg.payload =  data;\n                  node.send(msg);\n                  \n            }\n                \n        }, 1000 * i);\n    })(i);\n}\n\n",
        "outputs": "1",
        "noerr": 0,
        "x": 862.2780838012695,
        "y": 484.50000286102295,
        "wires": [
            [
                "fafdf76e.ea7e58"
            ]
        ]
    },
    {
        "id": "9f910eb3.6ef238",
        "type": "http request",
        "z": "6e97b3ee.89fce4",
        "name": "Execute URL",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1158.2780532836914,
        "y": 692.2083835601807,
        "wires": [
            []
        ]
    },
    {
        "id": "571bc65e.039598",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "Build a single Query",
        "func": "msg.collection_id = \"a3d865d3-f2b0-4dcb-8573-4c232dcb7fbc\"\nmsg.environment_id = \"d40ba5ee-be86-4b59-8a67-f463f233367d\"\n\n\ndata = {natural_language_query  : \"What is a zero coupon bond?\",\n        examples : [\n                              \n                    {\"document_id\" : \"Term-Zero-Coupon-Bond\", \"relevance\" : 100},\n                    {\"document_id\" : \"Term-Bond\", \"relevance\" : 90},\n                    {\"document_id\" : \"Term-Bond-Discount\", \"relevance\" : 0},\n                    {\"document_id\" : \"Term-Corporate-Bond\", \"relevance\" : 0},\n                   ]\n}\n\n\nmsg.url = \"https://gateway.watsonplatform.net/discovery/api/v1/environments/\" + msg.environment_id + \"/collections/\" + msg.collection_id + \"/training_data?version=2017-11-07\"\nmsg.payload =  data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 875.7919464111328,
        "y": 425.1666593551636,
        "wires": [
            [
                "fafdf76e.ea7e58"
            ]
        ]
    },
    {
        "id": "e530271c.958fd",
        "type": "inject",
        "z": "6e97b3ee.89fce4",
        "name": "Inject",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 692.7919311523438,
        "y": 425.66666984558105,
        "wires": [
            [
                "571bc65e.039598"
            ]
        ]
    },
    {
        "id": "c69bcc46.637de8",
        "type": "comment",
        "z": "6e97b3ee.89fce4",
        "name": "Used to ingest training data from CSV file via HTTP or NFS",
        "info": "",
        "x": 245,
        "y": 417.2500591278076,
        "wires": []
    },
    {
        "id": "770fb799.812778",
        "type": "subflow:75456024.34a398",
        "z": "1b19f8b1.08de9f",
        "name": "",
        "x": 654.6250076293945,
        "y": 219.37500381469727,
        "wires": [
            [
                "1f55c4cb.9fa1e3",
                "50d015ee.25e374"
            ]
        ]
    },
    {
        "id": "6ec63494.c7597c",
        "type": "subflow:75456024.34a398",
        "z": "5c4d249a.7988f4",
        "x": 900.7856826782227,
        "y": 239.37499523162842,
        "wires": [
            [
                "3f015cc0.e030ac"
            ]
        ]
    },
    {
        "id": "f3ba8b62.706b1",
        "type": "subflow:75456024.34a398",
        "z": "e85cff5a.1f786",
        "x": 789.9285659790039,
        "y": 261.6250123977661,
        "wires": [
            [
                "e57bcf13.8ba63"
            ]
        ]
    },
    {
        "id": "326e5d72.f93f62",
        "type": "subflow:75456024.34a398",
        "z": "c1e9a4dc.c42cf8",
        "x": 909.3571548461914,
        "y": 280.28571796417236,
        "wires": [
            [
                "5c740e25.6d45b8"
            ]
        ]
    },
    {
        "id": "4febfac6.ceb984",
        "type": "subflow:75456024.34a398",
        "z": "17eb59dd.9ff326",
        "x": 800.6428527832031,
        "y": 227.85714721679688,
        "wires": [
            [
                "2c2b72a8.c3ee7e",
                "1390cf47.3c47b1"
            ]
        ]
    },
    {
        "id": "2d9f2869.207ae",
        "type": "subflow:75456024.34a398",
        "z": "15c6f20.6b9dd0e",
        "x": 763.5,
        "y": 200,
        "wires": [
            [
                "4714084b.dcb8c",
                "7cad6b1f.5edc04"
            ]
        ]
    },
    {
        "id": "64ce8c38.1bc864",
        "type": "subflow:75456024.34a398",
        "z": "14d2f552.3522fb",
        "x": 752.4999771118164,
        "y": 160.99999332427979,
        "wires": [
            [
                "7d5c4c47.719f94"
            ]
        ]
    },
    {
        "id": "bf81c880.a608e",
        "type": "subflow:75456024.34a398",
        "z": "d284a7e7.ca3e08",
        "x": 1042.6250038146973,
        "y": 442.75,
        "wires": [
            [
                "a824ce9a.796de",
                "4354f80e.dc1b8"
            ]
        ]
    },
    {
        "id": "4bc99db6.3b3c5c",
        "type": "debug",
        "z": "1b19f8b1.08de9f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1211.8750190734863,
        "y": 135.00000190734863,
        "wires": []
    },
    {
        "id": "c125793b.82fa78",
        "type": "debug",
        "z": "1b19f8b1.08de9f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 784.7916641235352,
        "y": 34.16667366027832,
        "wires": []
    },
    {
        "id": "6a2e837c.7b841c",
        "type": "function",
        "z": "75456024.34a398",
        "name": "WCS",
        "func": "/* New param to added to all front-ends - wcs_region = USSOUTH, GERMANY\nWill be used to set the url\nUSSOUTH - https://gateway.watsonplatform.net/conversation/api\nGERMANY - https://gateway-fra.watsonplatform.net/conversation/api\n*/\nvar watson = global.get('watson');\nmsg.params.input = {\n      text: msg.payload\n    };\n\nif (msg.region === \"US-SOUTH\"){ \n    msg.params.endpoint = \"https://gateway.watsonplatform.net/conversation/api\"\n}\nelse if (msg.region === \"GERMANY\"){\n    msg.params.endpoint = \"https://gateway-fra.watsonplatform.net/conversation/api\"\n}\n\nvar conversation = new watson.ConversationV1({\n  username : msg.params.username,\n  password : msg.params.password,\n  workspace_id : msg.params.workspace_id,\n  url : msg.params.endpoint,\n  version_date: '2017-05-26'\n});\n\nvar myTM = setTimeout(function() { node.error(\"WCS message API reached 15 second time out\", msg)}, 15000 );\n\nconversation.message(msg.params,function(err, response) {\n    if (err) {\n      node.error(err);\n    } else {\n      msg.payload = response;\n      node.send(msg);\n      clearTimeout(myTM)\n     // console.log(JSON.stringify(response, null, 2));\n    }\n  }\n);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 157.1660919189453,
        "y": 74.16399717330933,
        "wires": [
            [
                "c8aa104.1b48f7"
            ]
        ]
    },
    {
        "id": "5b6b2ab4.c3115c",
        "type": "function",
        "z": "87530aab.adb068",
        "name": "WCS",
        "func": "var watson = global.get('watson');\nmsg.params.input = {\n      text: msg.payload\n    };\n\nif (msg.region === \"US-SOUTH\"){ \n    msg.params.workspace_id = msg.primary_workspace_id\n    msg.params.username = msg.primary_wcs_user_name\n    msg.params.password = msg.primary_wcs_password\n    msg.params.endpoint = \"https://gateway.watsonplatform.net/conversation/api\"\n   \n}\nelse if (msg.region === \"GERMANY\"){\n    msg.params.workspace_id = \"a003413f-2973-4dba-b1ba-550b3fa09a71\";\n    msg.params.username = \"c3a84de4-c0cf-43b6-98a1-8c2bd16fdc1f\";\n    msg.params.password = \"GaZagvcNP3VG\";\n    msg.params.endpoint = \"https://gateway-fra.watsonplatform.net/conversation/api\"\n}\n\nvar conversation = new watson.ConversationV1({\n  username : msg.params.username,\n  password : msg.params.password,\n  url : msg.params.endpoint,\n  version_date: '2017-05-26'\n});\n\nvar myTM = setTimeout(function() { node.error(\"WCS message API reached 15 second time out\", msg)}, 15000 );\n\nconversation.message(msg.params,function(err, response) {\n    if (err) {\n      node.error(err);\n    } else {\n      msg.payload = response;\n      node.send(msg);\n      clearTimeout(myTM)\n     // console.log(JSON.stringify(response, null, 2));\n    }\n  }\n);",
        "outputs": 1,
        "noerr": 0,
        "x": 932.083309173584,
        "y": 106.6666612625122,
        "wires": [
            []
        ]
    },
    {
        "id": "1532d79c.35cdd",
        "type": "debug",
        "z": "87530aab.adb068",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 132.91666666666666,
        "y": 218.33333333333331,
        "wires": []
    },
    {
        "id": "1e5a78.ec8cf588",
        "type": "comment",
        "z": "87530aab.adb068",
        "name": "Assumes US-SOUTH as the primary region, will remove when region goes into the session and front-ends start sending region param to set primary-region",
        "info": "",
        "x": 602.0833435058594,
        "y": 289.16669273376465,
        "wires": []
    },
    {
        "id": "156fdf98.a6a1f8",
        "type": "function",
        "z": "87530aab.adb068",
        "name": "WCS Workspaces Ping",
        "func": "var watson = global.get('watson');\n\nif (msg.region === \"US-SOUTH\"){ \n    msg.params.username = msg.primary_wcs_user_name\n    msg.params.password = msg.primary_wcs_password\n    msg.params.endpoint = \"https://gateway.watsonplatform.net/conversation/api\"\n   \n}\nelse if (msg.region === \"GERMANY\"){\n    msg.params.username = \"c3a84de4-c0cf-43b6-98a1-8c2bd16fdc1f\";\n    msg.params.password = \"GaZagvcNP3VG\";\n    msg.params.endpoint = \"https://gateway-fra.watsonplatform.net/conversation/api\"\n}\n\nvar conversation = new watson.ConversationV1({\n  username : msg.params.username,\n  password : msg.params.password,\n  url : msg.params.endpoint,\n  version_date: '2017-05-26'\n});\n\nvar myTM = setTimeout(function() { node.error(\"WCS ListWorkSpaces API reached 15 second time out\", msg)}, 15000 );\n\nconversation.listWorkspaces(msg.params,function(err, response) {\n    if (err) {\n      node.error(err);\n    } else {\n      msg.payload = response;\n      node.send(msg);\n      clearTimeout(myTM)\n     // console.log(JSON.stringify(response, null, 2));\n    }\n  }\n);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 552.0834503173828,
        "y": 34.99998378753662,
        "wires": [
            [
                "831eec36.2a31d"
            ]
        ]
    },
    {
        "id": "692cffe0.4b8fe",
        "type": "inject",
        "z": "3fad3621.99e442",
        "name": "Start",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 82.91666412353516,
        "y": 472.49999809265137,
        "wires": [
            [
                "bc5e8ab6.62b75"
            ]
        ]
    },
    {
        "id": "bc5e8ab6.62b75",
        "type": "function",
        "z": "3fad3621.99e442",
        "name": "List workspaces",
        "func": "var watson = global.get('watson');\nmsg.region = \"GERMANY\"\nmsg.primary_wcs_user_name = \"4acac659-e820-4ef6-8421-e88f517c9c4c\"\nmsg.primary_wcs_password = \"k0gYo1FjJymP\"\nmsg.params = {}\n\nif (msg.region === \"US-SOUTH\"){ \n    msg.params.username = msg.primary_wcs_user_name\n    msg.params.password = msg.primary_wcs_password\n    msg.params.endpoint = \"https://gateway.watsonplatform.net/conversation/api\"\n   \n}\nelse if (msg.region === \"GERMANY\"){\n    msg.params.username = \"c3a84de4-c0cf-43b6-98a1-8c2bd16fdc1f\";\n    msg.params.password = \"GaZagvcNP3VG\";\n    msg.params.endpoint = \"https://gateway-fra.watsonplatform.net/conversation/api\"\n}\n\nvar conversation = new watson.ConversationV1({\n  username : msg.params.username,\n  password : msg.params.password,\n  url : msg.params.endpoint,\n  version_date: '2017-05-26'\n});\n\nvar myTM = setTimeout(function() { node.error(\"We timed out\", msg)}, 15000 );\n\nconversation.listWorkspaces(msg.params,function(err, response) {\n    if (err) {\n      node.error(err);\n    } else {\n      msg.payload = response;\n      node.send(msg);\n      clearTimeout(myTM)\n     // console.log(JSON.stringify(response, null, 2));\n    }\n  }\n);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 251.24999237060547,
        "y": 473.3333320617676,
        "wires": [
            [
                "3444603d.0fa178"
            ]
        ]
    },
    {
        "id": "3444603d.0fa178",
        "type": "debug",
        "z": "3fad3621.99e442",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 443.541690826416,
        "y": 473.3333110809326,
        "wires": []
    },
    {
        "id": "81abcdc8.710a2",
        "type": "http in",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "url": "/LoadWDSTrainingData",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 145,
        "y": 550.9381408691406,
        "wires": [
            [
                "4b3f0e49.c89a38"
            ]
        ]
    },
    {
        "id": "4b3f0e49.c89a38",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "Get File Buffer",
        "func": "msg.payload = msg.req.files[0].buffer.toString('utf8')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 383.9052429199219,
        "y": 550.552809715271,
        "wires": [
            [
                "a04b547.f558028",
                "dc16de0f.a056e8"
            ]
        ]
    },
    {
        "id": "f1586d5c.5ba118",
        "type": "debug",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1329.2943534851074,
        "y": 446.38232612609863,
        "wires": []
    },
    {
        "id": "503e57b.d2120a8",
        "type": "multipart-encoder",
        "z": "6e97b3ee.89fce4",
        "name": "Stream HTTP Response",
        "statusCode": "",
        "ignoreMessages": true,
        "outputIfSingle": false,
        "outputIfAll": false,
        "globalHeaders": {
            "Context-Type": "text/html"
        },
        "partHeaders": {},
        "destination": "single",
        "x": 1514.521198272705,
        "y": 545.2918138504028,
        "wires": [
            []
        ]
    },
    {
        "id": "dc16de0f.a056e8",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "Send Start Msg",
        "func": "msg.payload = \"Start Training data ingestion\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 629.5628051757812,
        "y": 549.4584045410156,
        "wires": [
            [
                "503e57b.d2120a8"
            ]
        ]
    },
    {
        "id": "507b3236.8c7c94",
        "type": "http in",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "url": "/LoadWDSContent",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 128.64584350585938,
        "y": 311.2500877380371,
        "wires": [
            [
                "2d32d16b.966f06"
            ]
        ]
    },
    {
        "id": "2d32d16b.966f06",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "Get File Buffer",
        "func": "msg.payload = msg.req.files[0].buffer.toString('utf8')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 353.645845413208,
        "y": 311.8750867843628,
        "wires": [
            [
                "d402eb6b.b7df58",
                "36e2479e.52446"
            ]
        ]
    },
    {
        "id": "bf2a3026.9081a8",
        "type": "multipart-encoder",
        "z": "6e97b3ee.89fce4",
        "name": "Stream HTTP Response",
        "statusCode": "",
        "ignoreMessages": true,
        "outputIfSingle": false,
        "outputIfAll": false,
        "globalHeaders": {
            "Content-Type": "text/html"
        },
        "partHeaders": {},
        "destination": "single",
        "x": 1512.479248046875,
        "y": 311.0000514984131,
        "wires": [
            []
        ]
    },
    {
        "id": "d402eb6b.b7df58",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "Send Start Msg",
        "func": "msg.payload = \"Start Content data ingestion\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 602.3958511352539,
        "y": 312.70840072631836,
        "wires": [
            [
                "bf2a3026.9081a8"
            ]
        ]
    },
    {
        "id": "d200252c.82f54",
        "type": "json",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "pretty": false,
        "x": 1269.8890800476074,
        "y": 277.5556125640869,
        "wires": [
            [
                "bf2a3026.9081a8"
            ]
        ]
    },
    {
        "id": "fafdf76e.ea7e58",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "WDS Add Training",
        "func": "var watson = global.get('watson');\n\nvar discovery = new watson.DiscoveryV1({\n  username: \"578d5c5e-a713-44ad-bd8b-d3b8ba39c03c\",\n  password: \"NaFdTJluDnem\",\n  version_date: '2017-11-07'\n});\n\nvar params = {\n    environment_id: \"d40ba5ee-be86-4b59-8a67-f463f233367d\",\n    collection_id: \"35835dcf-e873-4a43-9034-786210ffebf2\",\n    natural_language_query : msg.payload.natural_language_query,\n    examples : msg.payload.examples\n}\n\nif (msg.stop) {\n    return msg;\n}\n\ndiscovery.addTrainingData(params, (error, results) => {\n    if (error) {\n      node.error(error, msg);\n    } else {\n      msg.payload = results; \n      node.send(msg);\n        \n    }\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1115.388931274414,
        "y": 484.00008964538574,
        "wires": [
            [
                "f1586d5c.5ba118",
                "fb320d88.55d978"
            ]
        ]
    },
    {
        "id": "ca6aace6.bd061",
        "type": "catch",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "scope": [
            "c3c928bc.edf9d",
            "a04b547.f558028",
            "fafdf76e.ea7e58"
        ],
        "x": 1117.888874053955,
        "y": 575.5555267333984,
        "wires": [
            [
                "f1d432f1.660068"
            ]
        ]
    },
    {
        "id": "f1d432f1.660068",
        "type": "subflow:73d26c58.2475cc",
        "z": "6e97b3ee.89fce4",
        "x": 1289.8890380859375,
        "y": 575.555567741394,
        "wires": [
            [
                "503e57b.d2120a8"
            ]
        ]
    },
    {
        "id": "63ef0673.12005",
        "type": "catch",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "scope": [
            "dd71f6cf.414a08",
            "f2a4db7e.78818",
            "20794257.7ec3ae"
        ],
        "x": 1098.5555801391602,
        "y": 342.66669178009033,
        "wires": [
            [
                "f06ea73e.2eca9"
            ]
        ]
    },
    {
        "id": "f06ea73e.2eca9",
        "type": "subflow:73d26c58.2475cc",
        "z": "6e97b3ee.89fce4",
        "x": 1259.2222061157227,
        "y": 341.55559730529785,
        "wires": [
            [
                "bf2a3026.9081a8"
            ]
        ]
    },
    {
        "id": "fb320d88.55d978",
        "type": "json",
        "z": "6e97b3ee.89fce4",
        "name": "",
        "pretty": false,
        "x": 1307.22216796875,
        "y": 504.8888854980469,
        "wires": [
            [
                "503e57b.d2120a8"
            ]
        ]
    },
    {
        "id": "7cad6b1f.5edc04",
        "type": "debug",
        "z": "15c6f20.6b9dd0e",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 834.6078850241265,
        "y": 388.4313830207374,
        "wires": []
    },
    {
        "id": "e9f3be23.0573b",
        "type": "inject",
        "z": "5b6fab52.9eae84",
        "name": "Execute",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 129.90196990966797,
        "y": 222.15686893463135,
        "wires": [
            [
                "92fc1b9f.746a3"
            ]
        ]
    },
    {
        "id": "92fc1b9f.746a3",
        "type": "function",
        "z": "5b6fab52.9eae84",
        "name": "Add Doc",
        "func": "var d = new Date();\nvar milliMST = 6*60*60*1000;\nvar localeDate = new Date(d.getTime()-milliMST);\n\nvar addDoc = {\n    convoUser : \"QuickenLoansProfile\",\n    convoTS : localeDate,\n    Mortgage_Type : \"7 Year Fixed Rate Mortgage\",\n    Balance : \"$350,000\",\n    Payment : \"$300\",\n    Interest_Rate : \"4.5%\",\n    \n}\n    \nmsg.payload = addDoc\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 308.13726806640625,
        "y": 223.92156791687012,
        "wires": [
            [
                "f88596ce.c487a"
            ]
        ]
    },
    {
        "id": "f88596ce.c487a",
        "type": "http request",
        "z": "5b6fab52.9eae84",
        "name": "Write Cloudant",
        "method": "POST",
        "ret": "txt",
        "url": "https://bdea5362-c793-408b-9b0a-698c42002903-bluemix.cloudant.com/session",
        "tls": "",
        "x": 485.19602966308594,
        "y": 223.7132339477539,
        "wires": [
            [
                "122f68f5.3c1fdf"
            ]
        ]
    },
    {
        "id": "122f68f5.3c1fdf",
        "type": "debug",
        "z": "5b6fab52.9eae84",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 698.1372528076172,
        "y": 224.31372451782227,
        "wires": []
    },
    {
        "id": "91702f43.cb74f8",
        "type": "inject",
        "z": "5b6fab52.9eae84",
        "name": "Execute",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 125.19608306884766,
        "y": 286.27450942993164,
        "wires": [
            [
                "4976d8b0.8f02f8"
            ]
        ]
    },
    {
        "id": "4976d8b0.8f02f8",
        "type": "function",
        "z": "5b6fab52.9eae84",
        "name": "Get Doc",
        "func": "msg.headers = {\"Content-type\" : \"application/json\"}\n\nmsg.payload = {selector: {\n     convoUser: {$eq: \"QuickenLoansProfile\"}     },\n     sort: [{convoUser:\"desc\"},{convoTS: \"desc\"}],  \n     limit: 5\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 306.96078300476074,
        "y": 285.8823833465576,
        "wires": [
            [
                "c26c17d0.889778"
            ]
        ]
    },
    {
        "id": "c26c17d0.889778",
        "type": "http request",
        "z": "5b6fab52.9eae84",
        "name": "Read Cloudant",
        "method": "POST",
        "ret": "obj",
        "url": "https://bdea5362-c793-408b-9b0a-698c42002903-bluemix.cloudant.com/session/_find",
        "tls": "",
        "x": 492.25490951538086,
        "y": 286.07845306396484,
        "wires": [
            [
                "5aaf0386.5598e4"
            ]
        ]
    },
    {
        "id": "5aaf0386.5598e4",
        "type": "debug",
        "z": "5b6fab52.9eae84",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 686.9608573913574,
        "y": 287.2549133300781,
        "wires": []
    },
    {
        "id": "e7f48a58.728088",
        "type": "function",
        "z": "16730253.13013e",
        "name": "Check Actions",
        "func": "\n/* UCG Action JSON Object - type server is for open Whisk\n\"UCGactions\": [\n    {\n      \"name\":\"<actionName>\",\n      \"type\":\"client | server\",\n      \"parameters\": {\n        \"<parameter_name>\":\"<parameter_value>\",\n        \"<parameter_name>\":\"<parameter_value>\"\n      },\n      \"result_variable\": \"<result_variable_name>\",\n      \"credentials\": \"<reference_to_credentials>\"\n    }\n  ]\n*/\n\nmsg.savePayload = msg.payload\n\nif (typeof msg.payload.context !== \"undefined\"){ \n    if (typeof msg.payload.context.UCGactions !== \"undefined\"){ \n        \n       msg.UCGActions =  msg.payload.context.UCGactions\n       delete msg.payload.context.UCGactions\n       \n       for (i = 0; i < msg.UCGActions.length; i++) {\n \n        (function(i) { setTimeout(function() {\n            \n           if (msg.UCGActions[i].type == \"client\") {\n               msg.doAction = msg.UCGActions[i].name\n               msg.UCGAction = msg.UCGActions[i]\n               node.send(msg);\n                  \n            }\n                \n         }, 300 * i);\n        })(i);\n       }  \n    }\n} \n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 197.54907899744353,
        "y": 80.1960970093221,
        "wires": [
            [
                "a772042b.0f792"
            ]
        ]
    },
    {
        "id": "a772042b.0f792",
        "type": "switch",
        "z": "16730253.13013e",
        "name": "Action Router",
        "property": "doAction",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GetProfile",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 405.19620513916016,
        "y": 80.78432321548462,
        "wires": [
            [
                "2391adf1.58de3a"
            ],
            []
        ]
    },
    {
        "id": "2391adf1.58de3a",
        "type": "function",
        "z": "16730253.13013e",
        "name": "GetProfile Action",
        "func": "\n\nmsg.payload = {selector: {\n     convoUser: {$eq: \"QuickenLoansProfile\"}     },\n     sort: [{convoUser:\"desc\"},{convoTS: \"desc\"}],  \n     limit: 5\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 641.0785266651824,
        "y": 55.68628112007576,
        "wires": [
            [
                "3ff9e0be.28ba58"
            ]
        ]
    },
    {
        "id": "3ff9e0be.28ba58",
        "type": "http request",
        "z": "16730253.13013e",
        "name": "Read Cloudant",
        "method": "POST",
        "ret": "obj",
        "url": "https://bdea5362-c793-408b-9b0a-698c42002903-bluemix.cloudant.com/session/_find",
        "tls": "",
        "x": 851.6667556762695,
        "y": 55.294151306152344,
        "wires": [
            [
                "ccea10b3.40dd48"
            ]
        ]
    },
    {
        "id": "ccea10b3.40dd48",
        "type": "function",
        "z": "16730253.13013e",
        "name": "Set WCS Context",
        "func": "myAnswer = msg.payload\nmsg.payload = msg.savePayload\n\nmsg.payload.context[msg.UCGAction.result_variable] = myAnswer.docs[0]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1082.8433456420898,
        "y": 55.098082542419434,
        "wires": [
            []
        ]
    },
    {
        "id": "c8aa104.1b48f7",
        "type": "subflow:16730253.13013e",
        "z": "75456024.34a398",
        "x": 310.66673278808594,
        "y": 72.88049507141113,
        "wires": [
            [
                "78ff02b2.128ea4"
            ]
        ]
    },
    {
        "id": "dd71f6cf.414a08",
        "type": "function",
        "z": "6e97b3ee.89fce4",
        "name": "Build JSON Doc",
        "func": "\nprocessArray = msg.payload\nmsg.stop = false\n/*UCG enriched fields for WDS\n  Type  |   Fields\n--------|-----------------\nTerm    | Key = Term, Text = Definiition\nQA      | Key = Question, Text = Answer\nArticle | Key = Title, Text = Article\n*/\n//for (i = 0; i < 100; i++) { \nfor (i = 0; i < processArray.length + 1; i++) {\n \n (function(i) { setTimeout(function() {\n               \n            if (i == processArray.length) {\n                msg.stop = true\n                msg.payload = {status : \"Finished\"}\n                node.send(msg);\n            }\n            else {\n                var myType = processArray[i].Type;\n                msg.data = {}\n                msg.myfields = Object.keys(processArray[i])\n                for (j = 0; j < msg.myfields.length + 1; j++) {\n                   \n                   msg.data[msg.myfields[j]] = processArray[i][msg.myfields[j]]\n                 \n                 \n               }\n\n                  msg.document_id = msg.data.Document_id\n                  \n                  msg.payload =  msg.data;\n                  msg.payload.filename = msg.document_id + \".json\";\n                  node.send(msg); \n                  \n            } \n                \n        }, 1000 * i);\n    })(i);\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 821.0785064697266,
        "y": 260.39215660095215,
        "wires": [
            [
                "20794257.7ec3ae"
            ]
        ]
    },
    {
        "id": "4354f80e.dc1b8",
        "type": "debug",
        "z": "d284a7e7.ca3e08",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1179.3137314740345,
        "y": 523.3333318373734,
        "wires": []
    },
    {
        "id": "36e2479e.52446",
        "type": "csv to json ext",
        "z": "6e97b3ee.89fce4",
        "name": "Convert Content CSV",
        "version": "0.1",
        "source": "payload",
        "delimiter": ",",
        "quote": "\"",
        "escape": "\"",
        "ignoreEmpty": false,
        "checkType": false,
        "trim": false,
        "noheader": false,
        "includeColumns": "",
        "headers": "",
        "debug": false,
        "x": 590.1345596313477,
        "y": 258.11702156066895,
        "wires": [
            [
                "dd71f6cf.414a08"
            ]
        ]
    },
    {
        "id": "839b527a.195d2",
        "type": "debug",
        "z": "d284a7e7.ca3e08",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 229.5,
        "y": 184,
        "wires": []
    },
    {
        "id": "50d015ee.25e374",
        "type": "debug",
        "z": "1b19f8b1.08de9f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 906.2500152587891,
        "y": 426.6250065565109,
        "wires": []
    },
    {
        "id": "e56baa7a.49625",
        "type": "switch",
        "z": "75456024.34a398",
        "name": "Router",
        "property": "UCG_ANSWER_ROUTING",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "WCS-WDS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "WCS-WDS-WCS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 867.44482421875,
        "y": 153.35375785827637,
        "wires": [
            [
                "25c719ea.a89abe"
            ],
            [
                "b2802e3f.24e75"
            ]
        ]
    },
    {
        "id": "b2802e3f.24e75",
        "type": "function",
        "z": "75456024.34a398",
        "name": "Add WDS Context",
        "func": "\n\nif (typeof msg.WDSResults.results[0].Text !== \"undefined\"){\n        msg.newOutput = []\n        msg.arrayOutput = []\n        \n        msg.testOutput = msg.WDSResults.results[0].Text.split(\"\\r\")\n        if (msg.testOutput.length > 1) {\n            msg.arrayOutput = msg.testOutput\n        }\n        else {\n            msg.arrayOutput.push(msg.WDSResults.results[0].Text)\n        }\n}\nmsg.WDSResults.output = msg.arrayOutput\nmsg.params.context.WDSResults = msg.WDSResults\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1006.1377487182617,
        "y": 211.7402000427246,
        "wires": [
            [
                "ba2d0095.8d8fd8"
            ]
        ]
    },
    {
        "id": "ba2d0095.8d8fd8",
        "type": "function",
        "z": "75456024.34a398",
        "name": "WCS for WDS",
        "func": "/* New param to added to all front-ends - wcs_region = USSOUTH, GERMANY\nWill be used to set the url\nUSSOUTH - https://gateway.watsonplatform.net/conversation/api\nGERMANY - https://gateway-fra.watsonplatform.net/conversation/api\n*/\nvar watson = global.get('watson');\nmsg.params.input = {\n      text: \"Process WDS Answer\"\n    };\n\nif (msg.region === \"US-SOUTH\"){ \n    msg.params.endpoint = \"https://gateway.watsonplatform.net/conversation/api\"\n}\nelse if (msg.region === \"GERMANY\"){\n    msg.params.endpoint = \"https://gateway-fra.watsonplatform.net/conversation/api\"\n}\n\nvar conversation = new watson.ConversationV1({\n  username : msg.params.username,\n  password : msg.params.password,\n  workspace_id : msg.params.workspace_id,\n  url : msg.params.endpoint,\n  version_date: '2017-05-26'\n});\n\nvar myTM = setTimeout(function() { node.error(\"WCS message API reached 15 second time out\", msg)}, 15000 );\n\nconversation.message(msg.params,function(err, response) {\n    if (err) {\n      node.error(err);\n    } else {\n      msg.payload = response;\n      node.send(msg);\n      clearTimeout(myTM)\n     // console.log(JSON.stringify(response, null, 2));\n    }\n  }\n);",
        "outputs": 1,
        "noerr": 0,
        "x": 1199.046257019043,
        "y": 211.28268432617188,
        "wires": [
            [
                "a6f4e402.de9dd8"
            ]
        ]
    },
    {
        "id": "5aa7c031.7e98c",
        "type": "debug",
        "z": "75456024.34a398",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 808.6126708984375,
        "y": 377.5327453613281,
        "wires": []
    },
    {
        "id": "a6f4e402.de9dd8",
        "type": "function",
        "z": "75456024.34a398",
        "name": "Add Ans Array",
        "func": "var testArray = msg.payload.output.text\nmsg.fixOutput = []\nfor (i = 0; i < testArray.length; i++) {\n    if (testArray[i]== \"UCGWDSANSWER\"){\n        for (j = 0; j < msg.WDSResults.output.length; j++) {\n           msg.fixOutput.push(msg.WDSResults.output[j])\n        }\n    }\n    else {\n       msg.fixOutput.push(testArray[i]) \n    }\n}\nmsg.payload.output.text = msg.fixOutput\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1382.6469268798828,
        "y": 209.41176509857178,
        "wires": [
            []
        ]
    },
    {
        "id": "3b00d552.c60472",
        "type": "http in",
        "z": "19f40361.5ecea5",
        "name": "GoogleHome",
        "url": "/GoogleHomeV2",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 118,
        "y": 140.125,
        "wires": [
            [
                "35ee5c56.b157b4",
                "1a979a7c.7298ce"
            ]
        ]
    },
    {
        "id": "807d04af.36ff3",
        "type": "function",
        "z": "19f40361.5ecea5",
        "name": "Response Msg",
        "func": "/* Example Payload for Google\n{\n  \"speech\": \"...\",  // ASCII characters only\n  \"displayText\": \"...\",\n  \"data\": {\n    \"google\": {\n      \"expect_user_response\": true,\n      \"is_ssml\": true,\n      \"permissions_request\": {\n        \"opt_context\": \"...\",\n        \"permissions\": [\n          \"NAME\",\n          \"DEVICE_COARSE_LOCATION\",\n          \"DEVICE_PRECISE_LOCATION\"\n        ]\n      }\n    }\n  },\n  \"contextOut\": [...],\n}*/\n\nmsg.headers = {\"Content-type\" : \"application/json\"}\nvar input = msg.payload.input.text\nvar texts = msg.payload.output.text\n\nvar myEndSession = true;    \n\ntotalText = \"\"\nfor (i = 0; i < texts.length; i++) {\n    \n    if (texts[i].lastIndexOf(\"[\") >= 0 ) {\n       findindex = texts[i].lastIndexOf(\"[\");\n       texts[i] = texts[i].substring(0,findindex);\n    } \n  totalText = totalText + \" \" + texts[i]\n}\n\nif (msg.tellGoogleNoWorries) \n{totalText = \"Okay, you're information is safe with me.\" + totalText\n  msg.tellGoogleNoWorries = false  \n}\n\n\nif (input.toUpperCase().substring(0,5) == \"LATER\" ||\n    totalText.lastIndexOf(\"wonderful day\") >= 0 ||\n    totalText.lastIndexOf(\"great day\") >= 0\n)\n   {myEndSession = false}\n\n\n\nmyResponse = {\n    \"speech\": totalText,  // ASCII characters only\n    \"displayText\": \"\",\n    \"data\": {\n      \"google\": {\n        \"expect_user_response\": myEndSession,\n        \"is_ssml\": false\n        }\n     }\n}\n\nnode.log(\"User ** \" + msg.user + \" Says ** \" +  msg.payload.input.text +  \" ** Response ** \" + totalText)\nmsg.payload = myResponse \nnode.send(msg);\n    \n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1465.7916297912598,
        "y": 481.2083435058594,
        "wires": [
            [
                "d4405207.b95828",
                "9c311098.708df"
            ]
        ]
    },
    {
        "id": "d4405207.b95828",
        "type": "http response",
        "z": "19f40361.5ecea5",
        "name": "Http Response",
        "statusCode": "",
        "headers": {},
        "x": 1687.8749885559082,
        "y": 342.24999618530273,
        "wires": []
    },
    {
        "id": "2a1eec1.ac5c614",
        "type": "function",
        "z": "19f40361.5ecea5",
        "name": "Set Params",
        "func": "msg.source = \"GoogleHome\"\nvar workspace_id = msg.req.query.workspace_id\nvar wcs_user_name = msg.req.query.wcs_username\nvar wcs_password = msg.req.query.wcs_password\n\n// Uncomment when New param is added to all front-ends and delete the default\n//var region = msg.req.query.primary_region\nmsg.region = \"US-SOUTH\";\n//Passed params are the primary config, will be used in the dynamic WCS router subflow to switch back\nmsg.primary_workspace_id = workspace_id;\nmsg.primary_wcs_user_name = wcs_user_name;\nmsg.primary_wcs_password = wcs_password;\nmsg.primary_region = msg.region;\n\nvar fname = msg.req.query.fname;\n\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context\n    wcs_user_name = msg.session.wcs_user_name\n    wcs_password  = msg.session.wcs_password\n    workspace_id  = msg.session.workspace_id    \n   }\n\ncontext.flowName = \"GoogleHome\"\n\n\nvar params = {\n    context : context,\n    workspace_id : workspace_id,\n    username : wcs_user_name,\n    password : wcs_password,\n    source : msg.source\n};\n\nvar additional_context = {};\nvar googleIntent = \"\"\nvar googleIName = \"\"\nvar googleContext = \"\"\nif (typeof msg.payload.originalRequest.data.user.profile !== \"undefined\"){\n     context.fname = msg.payload.originalRequest.data.user.profile.givenName   \n    }\n\nif (typeof msg.payload.originalRequest.data.inputs !== \"undefined\"){\n     googleIntent = msg.payload.originalRequest.data.inputs[0].intent\n    }\n/*\nif (typeof msg.payload.originalRequest.data.inputs[0].arguments[0] !== \"undefined\"){\n     \n     if (typeof msg.payload.originalRequest.data.inputs[0].arguments[0].name !== \"undefined\"){\n       googleIName =  msg.payload.originalRequest.data.inputs[0].arguments[0].name \n     }\n    }\n*/\nif (typeof msg.payload.result.contexts[0] !== \"undefined\") {\n    \n     if (msg.payload.result.contexts[0].name.lastIndexOf(\"actions\") >= 0) {\n        \n        if (typeof msg.payload.result.contexts[1] !== \"undefined\"){\n           googleContext = msg.payload.result.contexts[1].name \n        }\n     }\n     else {\n        googleContext = msg.payload.result.contexts[0].name \n     }\n}\n\nmsg.payload = msg.payload.result.resolvedQuery\nmsg.params = params\nmsg.googleIntent = googleIntent\nmsg.googleIName = googleIName\nmsg.googleContext = googleContext\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 682.9999771118164,
        "y": 140.125,
        "wires": [
            [
                "9788c6fb.dc9e98",
                "7edbd2b5.e01c14"
            ]
        ]
    },
    {
        "id": "9c311098.708df",
        "type": "debug",
        "z": "19f40361.5ecea5",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1693.6249885559082,
        "y": 478.916654586792,
        "wires": []
    },
    {
        "id": "fa9bc2b7.77d0a",
        "type": "switch",
        "z": "19f40361.5ecea5",
        "name": "Intents",
        "property": "googleIntent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "actions.intent.PERMISSION",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "actions.intent.MAIN",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "claim-status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "claim-process",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "deductibles",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 6,
        "x": 273.625,
        "y": 406.99999618530273,
        "wires": [
            [
                "e27f5036.e2d3e8"
            ],
            [
                "81a46a5f.99018"
            ],
            [
                "c6a83e8.82473c"
            ],
            [
                "c6a83e8.82473c"
            ],
            [
                "c6a83e8.82473c"
            ],
            [
                "c9d80e15.18d26"
            ]
        ]
    },
    {
        "id": "81a46a5f.99018",
        "type": "function",
        "z": "19f40361.5ecea5",
        "name": "Ask Permission",
        "func": "\nmsg.headers = {\"Content-type\" : \"application/json\"}\n\nmyResponse = {\n  \"conversationToken\": \"{\\\"state\\\":null,\\\"data\\\":{}}\",\n  \"expectUserResponse\": true,\n  \"expectedInputs\": [\n    {\n      \"inputPrompt\": {\n        \"initialPrompts\": [\n          {\n            \"textToSpeech\": \"PLACEHOLDER_FOR_PERMISSION\"\n          }\n        ],\n        \"noInputPrompts\": []\n      },\n      \"possibleIntents\": [\n        {\n          \"intent\": \"actions.intent.PERMISSION\",\n          \"inputValueData\": {\n            \"@type\": \"type.googleapis.com/google.actions.v2.PermissionValueSpec\",\n            \"optContext\": \"To deliver your order\",\n            \"permissions\": [\n              \"NAME\",\n              \"DEVICE_PRECISE_LOCATION\"\n            ]\n          }\n        }\n      ]\n    }\n  ]\n}\n\n\n\nmsg.payload = myResponse \nnode.send(msg);\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 763.75,
        "y": 358.25,
        "wires": [
            [
                "d4405207.b95828",
                "6086a3a8.3a3984"
            ]
        ]
    },
    {
        "id": "e27f5036.e2d3e8",
        "type": "function",
        "z": "19f40361.5ecea5",
        "name": "Handle Permission",
        "func": "if (msg.payload.toUpperCase().lastIndexOf(\"NO\") >= 0 \n)\n   {msg.tellGoogleNoWorries = true}\nelse\n   {msg.tellGoogleNoWorries = false}\n   \nif (msg.googleContext.lastIndexOf(\"claim-status\") >= 0 ) {\n    msg.payload = \"get a status of my claim\"\n}\n\nelse if (msg.googleContext.lastIndexOf(\"claim-process\") >= 0 ) {\n    msg.payload = \"how do claims work\"\n}\nelse if (msg.googleContext.lastIndexOf(\"claim-deductible\") >= 0 ) {\n    msg.payload = \"what are my deductibles and limits\"\n}\n\n\nelse {\n    msg.payload =  \"Hello\"\n}    \n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 773.75,
        "y": 314.5,
        "wires": [
            [
                "c9d80e15.18d26"
            ]
        ]
    },
    {
        "id": "c6a83e8.82473c",
        "type": "switch",
        "z": "19f40361.5ecea5",
        "name": "trigger?",
        "property": "googleIName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "trigger_query",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 608,
        "y": 420.125,
        "wires": [
            [
                "81a46a5f.99018"
            ],
            [
                "c9d80e15.18d26"
            ]
        ]
    },
    {
        "id": "35ee5c56.b157b4",
        "type": "function",
        "z": "19f40361.5ecea5",
        "name": "Get User",
        "func": "\nmsg.user = msg.payload.sessionId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 321.75,
        "y": 140.12500095367432,
        "wires": [
            [
                "7d2401a6.911418"
            ]
        ]
    },
    {
        "id": "aa5d415c.c60dd",
        "type": "comment",
        "z": "19f40361.5ecea5",
        "name": "Front-End must pass in user_id,wcs_username,wcs_password,workspace_id,text,fname",
        "info": "",
        "x": 389,
        "y": 586.1250228881836,
        "wires": []
    },
    {
        "id": "9788c6fb.dc9e98",
        "type": "subflow:a0e2e197.345df",
        "z": "19f40361.5ecea5",
        "x": 902.9999771118164,
        "y": 139.50000095367432,
        "wires": [
            [
                "fa9bc2b7.77d0a"
            ]
        ]
    },
    {
        "id": "7edbd2b5.e01c14",
        "type": "debug",
        "z": "19f40361.5ecea5",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 812.3749771118164,
        "y": 77,
        "wires": []
    },
    {
        "id": "68a95b42.4ae634",
        "type": "catch",
        "z": "19f40361.5ecea5",
        "name": "",
        "scope": null,
        "x": 1312.163330078125,
        "y": 271.6346130371094,
        "wires": [
            [
                "9360249b.4c3bd"
            ]
        ]
    },
    {
        "id": "9360249b.4c3bd",
        "type": "subflow:73d26c58.2475cc",
        "z": "19f40361.5ecea5",
        "x": 1488.605697631836,
        "y": 270.8846073150635,
        "wires": [
            []
        ]
    },
    {
        "id": "c9d80e15.18d26",
        "type": "subflow:3c30ab94.447d3c",
        "z": "19f40361.5ecea5",
        "x": 882.9999809265137,
        "y": 483.7916851043701,
        "wires": [
            [
                "e9a8e005.10d978"
            ]
        ]
    },
    {
        "id": "45708447.a75724",
        "type": "debug",
        "z": "19f40361.5ecea5",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1207.3137314740343,
        "y": 563.4583318373734,
        "wires": []
    },
    {
        "id": "1a979a7c.7298ce",
        "type": "debug",
        "z": "19f40361.5ecea5",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 257.5,
        "y": 224.125,
        "wires": []
    },
    {
        "id": "5fc21154.ed6ce8",
        "type": "function",
        "z": "19f40361.5ecea5",
        "name": "Ask Permission V2",
        "func": "\nmsg.headers = {\"Content-type\" : \"application/json\"}\n\nmyResponse = {\n  \"conversationToken\": \"{\\\"state\\\":null,\\\"data\\\":{}}\",\n  \"expectUserResponse\": true,\n  \"expectedInputs\": [\n    {\n      \"inputPrompt\": {\n        \"initialPrompts\": [\n          {\n            \"textToSpeech\": \"PLACEHOLDER_FOR_PERMISSION\"\n          }\n        ],\n        \"noInputPrompts\": []\n      },\n      \"possibleIntents\": [\n        {\n          \"intent\": \"actions.intent.PERMISSION\",\n          \"inputValueData\": {\n            \"@type\": \"type.googleapis.com/google.actions.v2.PermissionValueSpec\",\n            \"optContext\": \"To deliver your order\",\n            \"permissions\": [\n              \"NAME\",\n              \"DEVICE_PRECISE_LOCATION\"\n            ]\n          }\n        }\n      ]\n    }\n  ]\n}\n\n\n\nmsg.payload = myResponse \nnode.send(msg);\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 663.5,
        "y": 688.125,
        "wires": [
            []
        ]
    },
    {
        "id": "e9a8e005.10d978",
        "type": "subflow:75456024.34a398",
        "z": "19f40361.5ecea5",
        "x": 1076.5,
        "y": 484,
        "wires": [
            [
                "ed8bc9a7.c4cd9"
            ]
        ]
    },
    {
        "id": "ed8bc9a7.c4cd9",
        "type": "subflow:52457267.ef5464",
        "z": "19f40361.5ecea5",
        "x": 1271.5,
        "y": 486,
        "wires": [
            [
                "807d04af.36ff3"
            ]
        ]
    },
    {
        "id": "7d2401a6.911418",
        "type": "subflow:f48845d6.67899",
        "z": "19f40361.5ecea5",
        "x": 485.5,
        "y": 138,
        "wires": [
            [
                "2a1eec1.ac5c614"
            ]
        ]
    },
    {
        "id": "6086a3a8.3a3984",
        "type": "debug",
        "z": "19f40361.5ecea5",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1060.5,
        "y": 409,
        "wires": []
    },
    {
        "id": "1390cf47.3c47b1",
        "type": "debug",
        "z": "17eb59dd.9ff326",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 857.4999847412109,
        "y": 358.8571434020996,
        "wires": []
    },
    {
        "id": "16fe4579.e7b423",
        "type": "debug",
        "z": "17eb59dd.9ff326",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 312.49998474121094,
        "y": 245.8571434020996,
        "wires": []
    },
    {
        "id": "4af9f5ec.8d8fcc",
        "type": "debug",
        "z": "3fad3621.99e442",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 839.5,
        "y": 473,
        "wires": []
    },
    {
        "id": "e906d92d.83697",
        "type": "switch",
        "z": "5b6fab52.9eae84",
        "name": "Universal",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "a",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "b",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "c",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 75.19831848144531,
        "y": 464.6825485229492,
        "wires": [
            [
                "c271b181.018ba"
            ],
            [
                "44c0b667.43de1"
            ],
            [
                "f5448311.706e88"
            ]
        ]
    },
    {
        "id": "fbc45a0d.ecdaa",
        "type": "function",
        "z": "5b6fab52.9eae84",
        "name": "Gateway",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 408.7699089050293,
        "y": 464.6825656890869,
        "wires": [
            []
        ]
    },
    {
        "id": "f5448311.706e88",
        "type": "watson-conversation-v1",
        "z": "5b6fab52.9eae84",
        "name": "Conversation",
        "workspaceid": "",
        "multiuser": false,
        "context": true,
        "empty-payload": false,
        "default-endpoint": true,
        "service-endpoint": "https://gateway.watsonplatform.net/conversation/api",
        "x": 233.92852783203125,
        "y": 502.0635528564453,
        "wires": [
            [
                "fbc45a0d.ecdaa"
            ]
        ]
    },
    {
        "id": "c271b181.018ba",
        "type": "natural-language-understanding",
        "z": "5b6fab52.9eae84",
        "name": "Connection",
        "categories": false,
        "concepts": false,
        "maxconcepts": "8",
        "doc-emotion": false,
        "doc-emotion-target": "",
        "doc-sentiment": false,
        "doc-sentiment-target": "",
        "entity": false,
        "entity-emotion": false,
        "entity-sentiment": false,
        "maxentities": "50",
        "keyword": false,
        "keyword-emotion": false,
        "keyword-sentiment": false,
        "maxkeywords": "50",
        "metadata": false,
        "relation": false,
        "semantic": false,
        "semantic-entities": false,
        "semantic-keywords": false,
        "maxsemantics": "50",
        "default-endpoint": true,
        "service-endpoint": "https://gateway.watsonplatform.net/natural-language-understanding/api",
        "x": 233.9285888671875,
        "y": 427.9364824295044,
        "wires": [
            [
                "fbc45a0d.ecdaa"
            ]
        ]
    },
    {
        "id": "44c0b667.43de1",
        "type": "visual-recognition-util-v3",
        "z": "5b6fab52.9eae84",
        "name": "     Cognitive  ",
        "apikey": "",
        "image-feature": "",
        "x": 234.48411178588867,
        "y": 464.6825485229492,
        "wires": [
            [
                "fbc45a0d.ecdaa"
            ]
        ]
    },
    {
        "id": "57e44375.c4c024",
        "type": "comment",
        "z": "5b6fab52.9eae84",
        "name": "Display only - UCG Logo",
        "info": "",
        "x": 143.05555725097656,
        "y": 371.6666793823242,
        "wires": []
    },
    {
        "id": "630a48ef.c6867",
        "type": "function",
        "z": "5b6fab52.9eae84",
        "name": "",
        "func": "var request = global.get(\"request\");\n\nvar myUrl = `http://localhost:1880/load?user_id=\"testme\"&wcs_username=4acac659-e820-4ef6-8421-e88f517c9c4c&wcs_password=k0gYo1FjJymP&workspace_id=d13cc96b-a323-43a1-b484-29d37679ac27&text=\\'hello\\'&fname=dennis`\nvar myTM = setTimeout(function() { node.error(\"WCS message API reached 15 second time out\", msg)}, 15000 );\n\nrequest.post(myUrl,function (err, response, body) {\n    if (err) {\n      node.error(err);\n    } else {\n      msg.statusCode = response && response.statusCode; // Print the response status code if a response was received;\n      msg.body =  JSON.parse(body);\n      msg.payload = msg.body;\n      node.send(msg);\n      clearTimeout(myTM)\n     // console.log(JSON.stringify(response, null, 2));\n    }\n  }\n);",
        "outputs": 1,
        "noerr": 0,
        "x": 258.5,
        "y": 608,
        "wires": [
            [
                "c520e384.c00f2"
            ]
        ]
    },
    {
        "id": "4ad621ee.e30808",
        "type": "inject",
        "z": "5b6fab52.9eae84",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 108.5,
        "y": 603,
        "wires": [
            [
                "630a48ef.c6867"
            ]
        ]
    },
    {
        "id": "c520e384.c00f2",
        "type": "debug",
        "z": "5b6fab52.9eae84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 465.5,
        "y": 598,
        "wires": []
    }
]