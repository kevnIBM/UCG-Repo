[
    {
        "id": "5f8257f4.6085d8",
        "type": "subflow",
        "name": "SetNodeRedSession",
        "info": "",
        "in": [
            {
                "x": 53.5,
                "y": 55,
                "wires": [
                    {
                        "id": "79956486.46ed6c"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "79956486.46ed6c",
        "type": "function",
        "z": "5f8257f4.6085d8",
        "name": "Set Session",
        "func": "global.set(\"session_\" + msg.payload.convoUser, msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 179.5,
        "y": 54,
        "wires": [
            []
        ]
    },
    {
        "id": "18b15d09.ae994b",
        "type": "subflow",
        "name": "SetCloundantSession",
        "info": "",
        "in": [
            {
                "x": 35,
                "y": 46,
                "wires": [
                    {
                        "id": "25e9f410.0b2604"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "25e9f410.0b2604",
        "type": "http request",
        "z": "18b15d09.ae994b",
        "name": "Cloudant-HTTPS",
        "method": "POST",
        "ret": "txt",
        "url": "https://6edb4533-845a-480b-ba6e-efbc3e50ceef-bluemix.cloudant.com/session",
        "tls": "",
        "x": 205,
        "y": 46,
        "wires": [
            []
        ]
    },
    {
        "id": "ddc92215.86cb8",
        "type": "subflow",
        "name": "SetRedisSession",
        "info": "",
        "in": [
            {
                "x": 25,
                "y": 55.38446044921875,
                "wires": [
                    {
                        "id": "2476bdb.32d8742"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "2476bdb.32d8742",
        "type": "function",
        "z": "ddc92215.86cb8",
        "name": "Set Session-Cache",
        "func": "\nmsg.payload = [msg.payload.convoUser, JSON.stringify(msg.payload)]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 195,
        "y": 55.38446044921875,
        "wires": [
            [
                "5547fc95.c9c514"
            ]
        ]
    },
    {
        "id": "5547fc95.c9c514",
        "type": "redis-command",
        "z": "ddc92215.86cb8",
        "server": "8d255ef1.21185",
        "command": "set",
        "name": "",
        "topic": "",
        "x": 380.00006103515625,
        "y": 54.957977294921875,
        "wires": [
            []
        ]
    },
    {
        "id": "8d255ef1.21185",
        "type": "redis-config",
        "z": "",
        "host": "bluemix-sandbox-dal-9-portal.7.dblayer.com",
        "port": "27247",
        "dbase": "0",
        "pass": "IVKPWZBPOAJYQCRR"
    },
    {
        "id": "8c0b0e67.7c9d5",
        "type": "subflow",
        "name": "Set Session",
        "info": "",
        "in": [
            {
                "x": 64.9444580078125,
                "y": 40.222259521484375,
                "wires": [
                    {
                        "id": "5f62b842.05ff38"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 384.9444580078125,
                "y": 40.222259521484375,
                "wires": [
                    {
                        "id": "5f62b842.05ff38",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "5f62b842.05ff38",
        "type": "function",
        "z": "8c0b0e67.7c9d5",
        "name": "Define Session",
        "func": "//New Database Seesion Mgt\n// convoUser - Unique user id across channels\n// ConvoTS - Timestamp of actual WCS Call\n// convoSource - Source Channel Name, will be used in Convo\n//             - Examples (Alexa,Google Home, Slack, Phone, WebChat, Mobile)\n//convoPayload - actual return from WCS\n// Database document will be calles session\n// -- Index on convoUser and convoTS\n// -- We will write all WCS turns into the table\n// -- On retrieval  of the user session\n//    -- We will search by index put back last 5 documents sorted by convoTS descending\n//    -- assures first document will be the latest WCS user convo\n\n\nvar sessionMsg = {\n    payload : {\n    convoUser : msg.user,\n    convoTS : Date(),\n    convoSource : msg.source,\n    convoPayload : msg.payload\n    }\n}\n\nreturn [msg,sessionMsg];",
        "outputs": "2",
        "noerr": 0,
        "x": 224.9444580078125,
        "y": 40.222259521484375,
        "wires": [
            [],
            [
                "69867456.a631e4"
            ]
        ]
    },
    {
        "id": "69867456.a631e4",
        "type": "subflow:ddc92215.86cb8",
        "z": "8c0b0e67.7c9d5",
        "x": 441.9765625,
        "y": 101.17121887207031,
        "wires": []
    },
    {
        "id": "7d26924c.353e0c",
        "type": "subflow:18b15d09.ae994b",
        "z": "8c0b0e67.7c9d5",
        "name": "SetCloudantSession",
        "x": 456,
        "y": 156,
        "wires": []
    },
    {
        "id": "c150a291.2b6358",
        "type": "subflow:5f8257f4.6085d8",
        "z": "8c0b0e67.7c9d5",
        "x": 456.5,
        "y": 214,
        "wires": []
    },
    {
        "id": "464d68f2.66b8c8",
        "type": "comment",
        "z": "8c0b0e67.7c9d5",
        "name": "Wire up a Session storage subflow",
        "info": "For prototyping use SetNodeRedSession\n\nFor Enterprise use either Redis or Cloudant\n\nNote you will need a Redis/Cloudant service if\npick one of the Enterprise methods.",
        "x": 164.5,
        "y": 148,
        "wires": []
    },
    {
        "id": "53e2434d.b0246c",
        "type": "subflow",
        "name": "GetNodeRedSession",
        "info": "",
        "in": [
            {
                "x": 65.5,
                "y": 62,
                "wires": [
                    {
                        "id": "5371d272.db7d44"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 365.5,
                "y": 62,
                "wires": [
                    {
                        "id": "5371d272.db7d44",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "5371d272.db7d44",
        "type": "function",
        "z": "53e2434d.b0246c",
        "name": "Get Session",
        "func": "msg.session = global.get(\"session_\" + msg.user); \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 215.5,
        "y": 62,
        "wires": [
            []
        ]
    },
    {
        "id": "6834abbd.59cdd4",
        "type": "subflow",
        "name": "GetCloudantSession",
        "info": "",
        "in": [
            {
                "x": 41,
                "y": 45,
                "wires": [
                    {
                        "id": "c8d70706.42bc7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 734,
                "y": 45,
                "wires": [
                    {
                        "id": "efcdc7b4.58a2f",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "20c055a1.043382",
        "type": "comment",
        "z": "6834abbd.59cdd4",
        "name": "Must have cloudant Index on convoUser and convoTS ",
        "info": "",
        "x": 329.48028564453125,
        "y": 99.02044677734375,
        "wires": []
    },
    {
        "id": "c8d70706.42bc7",
        "type": "function",
        "z": "6834abbd.59cdd4",
        "name": "Get Session",
        "func": "msg.savePayload = msg.payload\n\nmsg.headers = {\"Content-type\" : \"application/json\"}\nmsg.url = \"https://bdea5362-c793-408b-9b0a-698c42002903-bluemix.cloudant.com/session/_find\"\n\n//testing new users\n//msg.user = \"dennisnoto@gmail.com\"\n\nmsg.payload = {selector: {\n     convoUser: {$eq: msg.user}     },\n     sort: [{convoUser:\"desc\"},{convoTS: \"desc\"}],    \n     limit: 5\n}\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 161,
        "y": 46,
        "wires": [
            [
                "a8e3a5b3.4f9638"
            ]
        ]
    },
    {
        "id": "efcdc7b4.58a2f",
        "type": "function",
        "z": "6834abbd.59cdd4",
        "name": "Set Session",
        "func": "//sesion object from Cloudant DB\n\nif (typeof msg.payload.docs !== \"undefined\")\n  {msg.session = msg.payload.docs[0]}\nelse \n  { msg.session = {};\n      \n}\n   \n//reset payload from channel to continue flow\nmsg.payload = msg.savePayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 584,
        "y": 45,
        "wires": [
            []
        ]
    },
    {
        "id": "a8e3a5b3.4f9638",
        "type": "http request",
        "z": "6834abbd.59cdd4",
        "name": "Cloudant-HTTPS",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 392,
        "y": 46,
        "wires": [
            [
                "efcdc7b4.58a2f"
            ]
        ]
    },
    {
        "id": "a4bbd9f9.0f30b",
        "type": "subflow",
        "name": "GetRedisSession",
        "info": "",
        "in": [
            {
                "x": 33.48760986328125,
                "y": 71.6234130859375,
                "wires": [
                    {
                        "id": "78f736b9.b2d0c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 790.480224609375,
                "y": 71.38070678710938,
                "wires": [
                    {
                        "id": "2bd47cff.4edf8c",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "78f736b9.b2d0c",
        "type": "function",
        "z": "a4bbd9f9.0f30b",
        "name": "Get Session",
        "func": "msg.savePayload = msg.payload\n\nmsg.payload = [msg.user]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 183.48760986328125,
        "y": 71.6234130859375,
        "wires": [
            [
                "6720536.dc2a22c"
            ]
        ]
    },
    {
        "id": "6720536.dc2a22c",
        "type": "redis-command",
        "z": "a4bbd9f9.0f30b",
        "server": "8d255ef1.21185",
        "command": "get",
        "name": "",
        "topic": "",
        "x": 350.49127197265625,
        "y": 71.60504150390625,
        "wires": [
            [
                "771cd95e.1ddae8"
            ]
        ]
    },
    {
        "id": "2bd47cff.4edf8c",
        "type": "function",
        "z": "a4bbd9f9.0f30b",
        "name": "Set Session",
        "func": "if (typeof msg.payload.convoUser !== \"undefined\" )\n  {msg.session = msg.payload}\nelse \n  { \n      \n}\n   \n//reset payload from channel to continue flow\nmsg.payload = msg.savePayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640.480224609375,
        "y": 71.38070678710938,
        "wires": [
            []
        ]
    },
    {
        "id": "771cd95e.1ddae8",
        "type": "json",
        "z": "a4bbd9f9.0f30b",
        "name": "",
        "x": 490.4765930175781,
        "y": 71.85501098632812,
        "wires": [
            [
                "2bd47cff.4edf8c"
            ]
        ]
    },
    {
        "id": "8d255ef1.21185",
        "type": "redis-config",
        "z": "",
        "host": "bluemix-sandbox-dal-9-portal.7.dblayer.com",
        "port": "27247",
        "dbase": "0",
        "pass": "IVKPWZBPOAJYQCRR"
    },
    {
        "id": "5fa9e96c.b0465",
        "type": "subflow",
        "name": "Get Session",
        "info": "",
        "in": [
            {
                "x": 53.983917236328125,
                "y": 43.61785888671875,
                "wires": [
                    {
                        "id": "7c4400c3.ddc1a8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 393.9839172363281,
                "y": 43.61785888671875,
                "wires": [
                    {
                        "id": "7c4400c3.ddc1a8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "7c4400c3.ddc1a8",
        "type": "subflow:a4bbd9f9.0f30b",
        "z": "5fa9e96c.b0465",
        "name": "",
        "x": 223.98391723632812,
        "y": 43.61785888671875,
        "wires": [
            []
        ]
    },
    {
        "id": "2b03a660.633b82",
        "type": "subflow:6834abbd.59cdd4",
        "z": "5fa9e96c.b0465",
        "x": 230.5,
        "y": 114.01022338867188,
        "wires": [
            []
        ]
    },
    {
        "id": "8b74a1b9.e443a8",
        "type": "subflow:53e2434d.b0246c",
        "z": "5fa9e96c.b0465",
        "name": "",
        "x": 226.5,
        "y": 185,
        "wires": [
            []
        ]
    },
    {
        "id": "aeabbb9b.db72b8",
        "type": "comment",
        "z": "5fa9e96c.b0465",
        "name": "Wire up at least one of the Session functions",
        "info": "Choose \n   GetNodeRedSession for prototyping\n   \nEnterprise use\nChoose \n   GetCloudantSeesion for DB Session\nor\n   GetRedisSession for Memory Cache\n   \nPlease note that you will need to wire up the\ncorresponding Set Session subflow",
        "x": 227.5,
        "y": 249,
        "wires": []
    },
    {
        "id": "16e7adb5.42e032",
        "type": "http in",
        "z": "bb690510.29c448",
        "name": "Slack HTTP in",
        "url": "/slack",
        "method": "post",
        "swaggerDoc": "",
        "x": 75,
        "y": 295.4999532699585,
        "wires": [
            [
                "c056387c.f3bbf"
            ]
        ]
    },
    {
        "id": "c056387c.f3bbf",
        "type": "function",
        "z": "bb690510.29c448",
        "name": "slackVars",
        "func": "var channel = msg.payload.channel_name;\nvar username = msg.payload.user_name;\nvar team = msg.payload.team_domain;\nvar text = msg.payload.text;\n\nnode.log(\"Team:\" + team);\nnode.log(\"username:\" + username);\nnode.log(\"channel:\" + channel);\nnode.log(\"text:\" + text);\n\nif(username == \"slackbot\") {\n    global.set(\"tlength\",0);}\nelse\n{global.set(\"tlength\",text.length); }\n\nvar test = global.get(\"tlength\")\nnode.log(\"length:\" + test);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 183.05555725097656,
        "y": 366.16664123535156,
        "wires": [
            [
                "cdc421ab.314628"
            ]
        ]
    },
    {
        "id": "cdc421ab.314628",
        "type": "switch",
        "z": "bb690510.29c448",
        "name": "",
        "property": "tlength",
        "propertyType": "global",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 275.5000114440918,
        "y": 297.27772998809814,
        "wires": [
            [
                "46032f62.3adff8"
            ],
            [
                "d8edfc6a.e1892"
            ]
        ]
    },
    {
        "id": "930ceef2.622398",
        "type": "function",
        "z": "bb690510.29c448",
        "name": "Set Params",
        "func": "msg.source = \"Slace\"\nvar channel = msg.payload.channel_name;\nvar team = msg.payload.team_domain;\nvar workspace_id = msg.req.query.workspace_id;\nvar fname = msg.req.query.fname;\n\nnode.log(\"Team:\" + team);\nnode.log(\"username:\" + msg.user);\nnode.log(\"channel:\" + channel);\n\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context}\n   \nvar temp_msg = msg.payload.text;\nvar newmsg = temp_msg.replace(\"Watson\", \"\");\nmsg.payload = newmsg;\n\nglobal.set(\"last_question\",newmsg);\nglobal.set(\"user\",msg.user);\n\nif ((temp_msg.toUpperCase().substring(0,5) == \"HELLO\") && (temp_msg.length > 5)){\nswitch(temp_msg.toUpperCase()) {\n    case 'HELLO BANK ASSIST':\n        workspace_id = \"243f96fc-e98d-46d4-918c-4ee0c801d102\";\n        app = \"BankAssist\";\n        break;\n    case 'HELLO INSURE ASSIST':\n        workspace_id = \"56cfca8a-b459-447f-ab35-e94511f6f7bc\";\n        app = \"InsureAssist\";\n        break;\n    case 'HELLO INSURE CALL CENTER ASSIST':\n        workspace_id = \"18dd89b3-aea7-4a55-9ca8-98704387a7f3\";\n        app = \"InsureCCAssist\";\n        break;\n    case 'HELLO WEALTH ASSIST':\n        workspace_id = \"549ef6e1-ffc8-427b-b356-603c02e44d8e\";\n        app = \"WealthAssist\";\n        break;\n    case 'HELLO METLIFE ASSIST':\n        workspace_id = \"5fd7c1c7-9ea2-4fc8-b6fa-7920e10aad5a\";\n        app = \"MetLifeAssist\";\n        break;\n    case 'HELLO FIDELITY ASSIST':\n        workspace_id = \"46975d17-120f-4757-8fe8-4a6649b3a257\";\n        app = \"FidelityAssist\";\n        break;\n    default: \n        workspace_id = \"56cfca8a-b459-447f-ab35-e94511f6f7bc\";\n        app = \"InsureAssist\";\n }\n global.set(\"app\",app);\n global.set(\"workspace_id\",workspace_id);\n //Uncomment if you want the convo to start at begining when Hello is detected\n //context = {}\n}\n\nmsg.app = global.get(\"app\");\nworkspace_id = global.get(\"workspace_id\");\n\nvar params = {\n    context: context,\n    workspace_id : workspace_id\n};\n\nmsg.payload = newmsg\nmsg.params = params\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 752.9444580078125,
        "y": 290.72216796875,
        "wires": [
            [
                "1832f2bc.f61175",
                "96563ed2.ae37f"
            ]
        ]
    },
    {
        "id": "d8edfc6a.e1892",
        "type": "function",
        "z": "bb690510.29c448",
        "name": "unhandled chat",
        "func": "node.log(msg.payload.text);",
        "outputs": 1,
        "noerr": 0,
        "x": 455.5,
        "y": 350.8332824707031,
        "wires": [
            []
        ]
    },
    {
        "id": "bca7066a.0940a",
        "type": "watson-conversation-v1",
        "z": "bb690510.29c448",
        "name": "",
        "workspaceid": "56cfca8a-b459-447f-ab35-e94511f6f7bc",
        "multiuser": true,
        "context": false,
        "x": 1223.3887939453125,
        "y": 293.1388244628906,
        "wires": [
            [
                "dc3935cf.b09f08"
            ]
        ]
    },
    {
        "id": "1832f2bc.f61175",
        "type": "debug",
        "z": "bb690510.29c448",
        "name": "Slack inbound",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 947.166748046875,
        "y": 214.99998474121094,
        "wires": []
    },
    {
        "id": "96563ed2.ae37f",
        "type": "watson-tone-analyzer-v3",
        "z": "bb690510.29c448",
        "name": "Tone",
        "tones": "all",
        "sentences": "true",
        "contentType": "false",
        "x": 916.3888549804688,
        "y": 290.611083984375,
        "wires": [
            [
                "56871719.ba4fc8"
            ]
        ]
    },
    {
        "id": "e3aeff02.dc302",
        "type": "function",
        "z": "bb690510.29c448",
        "name": "1st Level msg",
        "func": "//var Watson_msg = msg.payload;\n//var Watson_response = JSON.stringify(msg.payload.output.text);\n//Myresponse = Watson_response.substring(2,Watson_response.length-2);\n// Dennis added because SSML tag was escaping the \" with \\\" and the replace command fixes it!!!!\n//Myresponse = Myresponse.replace(/\\\\/g, \"\");\n//Dennis - Remove XML SSML tags from chat systems\n//Myresponse = Myresponse.replace(/<[^>]+>/g, \"\");\n//var texts = Myresponse.split(\"\\\",\\\"\");\n\nvar texts = msg.payload.output.text\n\nfor (i = 0; i < texts.length; i++) {\n   Myresponse = texts[i];\n   node.log(\"**********  length ******* \" + texts.length);\n\n// causing issues for multiple output responses\n//if (Myresponse.match(\"\\\",\\\"\")) {\n  if (Myresponse.substring(0,Myresponse,2) == \"\\\",\\\"\") {\n     Myresponse = Myresponse.substring(3,Myresponse.length)\n     node.log(\"Found a comma\")\n     node.log(Myresponse)\n}\n \nif (Myresponse.lastIndexOf(\"[\") >= 0 ) {\n     findindex = Myresponse.lastIndexOf(\"[\")\n     Myresponse = Myresponse.substring(0,findindex)\n     node.log(\"Found a buttons at index:\", findindex)\n     node.log(Myresponse)\n} \nif (Myresponse.lastIndexOf(\"InsMap\") >= 0 ) {\n     findindex = Myresponse.lastIndexOf(\"InsMap\")\n     Myresponse = Myresponse.substring(0,findindex)\n     node.log(\"Found a maps at index:\", findindex)\n     node.log(Myresponse)\n} \n\n\nif (Myresponse.lastIndexOf(\"future training\") >= 0) {\n var response = {\n    text: \"Sorry I can't answer this question. Escalating to Second Level Support, please stand by\" ,\n    question: Myresponse,\n    escalate: \"Yes\",\n    username: \"Watson\",\n    icon_url: \"https://developer.ibm.com/watson/wp-content/uploads/sites/19/2015/01/IBM_Watson_avatar_pos.png\"\n};}\n\nelse {\n var response = {\n    text: Myresponse,\n    username: \"Watson\",\n    icon_url: \"https://developer.ibm.com/watson/wp-content/uploads/sites/19/2015/01/IBM_Watson_avatar_pos.png\"\n};}\n\nmsg.payload = response;\n\nnode.send([msg,msg]);\n}\nreturn null;\n",
        "outputs": "2",
        "noerr": 0,
        "x": 916.0555419921875,
        "y": 426.833251953125,
        "wires": [
            [
                "a37f475e.892a3",
                "4b551e0b.78d78"
            ],
            [
                "969a1515.ac80a"
            ]
        ]
    },
    {
        "id": "a37f475e.892a3",
        "type": "http request",
        "z": "bb690510.29c448",
        "name": "Slack Response",
        "method": "POST",
        "ret": "txt",
        "url": "https://hooks.slack.com/services/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",
        "tls": "",
        "x": 1170.833396911621,
        "y": 421.27772521972656,
        "wires": [
            []
        ]
    },
    {
        "id": "4b551e0b.78d78",
        "type": "debug",
        "z": "bb690510.29c448",
        "name": "Level 1 message",
        "active": true,
        "console": "false",
        "complete": "payload.text",
        "x": 1178.0556869506836,
        "y": 471.1110382080078,
        "wires": []
    },
    {
        "id": "969a1515.ac80a",
        "type": "function",
        "z": "bb690510.29c448",
        "name": "2nd Level Msg",
        "func": "\nnode.log(\"text:\" + msg.payload.text);\n\nif (msg.payload.escalate == \"Yes\"){\n  \nvar response = {\n    text: \"Level 1 Support member, \" + global.get(\"user\") + \", asked: \" + global.get(\"last_question\"),\n    username: \"Watson\",\n    icon_url: \"https://developer.ibm.com/watson/wp-content/uploads/sites/19/2015/01/IBM_Watson_avatar_pos.png\"\n};\n\nvar newMsg = {payload: response};}\n\nelse {\n    newMsg = null;\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1014.6111068725586,
        "y": 536.6110382080078,
        "wires": [
            [
                "40834ada.21d4d4",
                "4248f13a.b968b"
            ]
        ]
    },
    {
        "id": "40834ada.21d4d4",
        "type": "http request",
        "z": "bb690510.29c448",
        "name": "Escalate 2ndLevell",
        "method": "POST",
        "ret": "txt",
        "url": "https://hooks.slack.com/services/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",
        "tls": "",
        "x": 1227.3889389038086,
        "y": 537.7221832275391,
        "wires": [
            []
        ]
    },
    {
        "id": "4248f13a.b968b",
        "type": "debug",
        "z": "bb690510.29c448",
        "name": "Level 2 message",
        "active": true,
        "console": "false",
        "complete": "payload.text",
        "x": 1231.833396911621,
        "y": 593.8888092041016,
        "wires": []
    },
    {
        "id": "56871719.ba4fc8",
        "type": "function",
        "z": "bb690510.29c448",
        "name": "Add Tone",
        "func": "\nnode.log(\"*********Found Tone ********\" + msg.response.document_tone.tone_categories[0].tones[0].tone_id);\nnode.log(\"*********Found Tone **Score*****\" + msg.response.document_tone.tone_categories[0].tones[0].score.toFixed(3));\n\nmsg.params.context.angerName = msg.response.document_tone.tone_categories[0].tones[0].tone_name;\nmsg.params.context.angerScore = msg.response.document_tone.tone_categories[0].tones[0].score.toFixed(3);\nmsg.params.context.disgustName = msg.response.document_tone.tone_categories[0].tones[1].tone_name;\nmsg.params.context.disgustScore = msg.response.document_tone.tone_categories[0].tones[1].score.toFixed(3);\nmsg.params.context.fearName = msg.response.document_tone.tone_categories[0].tones[2].tone_name;\nmsg.params.context.fearScore = msg.response.document_tone.tone_categories[0].tones[2].score.toFixed(3);\nmsg.params.context.joyName = msg.response.document_tone.tone_categories[0].tones[3].tone_name;\nmsg.params.context.joyScore = msg.response.document_tone.tone_categories[0].tones[3].score.toFixed(3);\nmsg.params.context.sadnessName = msg.response.document_tone.tone_categories[0].tones[4].tone_name;\nmsg.params.context.sadnessScore = msg.response.document_tone.tone_categories[0].tones[4].score.toFixed(3);\n\nmsg.params.context.analyticalName = msg.response.document_tone.tone_categories[1].tones[0].tone_name;\nmsg.params.context.analyticalScore = msg.response.document_tone.tone_categories[1].tones[0].score.toFixed(3);\nmsg.params.context.confidentName = msg.response.document_tone.tone_categories[1].tones[1].tone_name;\nmsg.params.context.confidentScore = msg.response.document_tone.tone_categories[1].tones[1].score.toFixed(3);\nmsg.params.context.tentativeName = msg.response.document_tone.tone_categories[1].tones[2].tone_name;\nmsg.params.context.tentativeScore = msg.response.document_tone.tone_categories[1].tones[2].score.toFixed(3);\n\nmsg.params.context.OpenName = msg.response.document_tone.tone_categories[2].tones[0].tone_name;\nmsg.params.context.OpenScore = msg.response.document_tone.tone_categories[2].tones[0].score.toFixed(3);\nmsg.params.context.conTitle = msg.response.document_tone.tone_categories[2].tones[1].tone_name;\nmsg.params.context.conScore = msg.response.document_tone.tone_categories[2].tones[1].score.toFixed(3);\nmsg.params.context.extName = msg.response.document_tone.tone_categories[2].tones[2].tone_name;\nmsg.params.context.extScore = msg.response.document_tone.tone_categories[2].tones[2].score.toFixed(3);\nmsg.params.context.agreeName = msg.response.document_tone.tone_categories[2].tones[3].tone_name;\nmsg.params.context.agreeScore = msg.response.document_tone.tone_categories[2].tones[3].score.toFixed(3);\nmsg.params.context.emoName = msg.response.document_tone.tone_categories[2].tones[4].tone_name;\nmsg.params.context.emoScore = msg.response.document_tone.tone_categories[2].tones[4].score.toFixed(3);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1058.9999389648438,
        "y": 291.16668701171875,
        "wires": [
            [
                "bca7066a.0940a"
            ]
        ]
    },
    {
        "id": "46032f62.3adff8",
        "type": "function",
        "z": "bb690510.29c448",
        "name": "Get User",
        "func": "//msg.user = msg.payload.user_name;\nmsg.user = msg.payload.user_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 438.5,
        "y": 291,
        "wires": [
            [
                "e27ff03a.1b6d58"
            ]
        ]
    },
    {
        "id": "e27ff03a.1b6d58",
        "type": "subflow:5fa9e96c.b0465",
        "z": "bb690510.29c448",
        "name": "",
        "x": 590.5,
        "y": 290,
        "wires": [
            [
                "930ceef2.622398"
            ]
        ]
    },
    {
        "id": "dc3935cf.b09f08",
        "type": "subflow:8c0b0e67.7c9d5",
        "z": "bb690510.29c448",
        "x": 727.5,
        "y": 427,
        "wires": [
            [
                "e3aeff02.dc302"
            ]
        ]
    }
]