[
    {
        "id": "53e2434d.b0246c",
        "type": "subflow",
        "name": "GetNodeRedSession",
        "info": "",
        "in": [
            {
                "x": 65.5,
                "y": 62,
                "wires": [
                    {
                        "id": "5371d272.db7d44"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 365.5,
                "y": 62,
                "wires": [
                    {
                        "id": "5371d272.db7d44",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "5371d272.db7d44",
        "type": "function",
        "z": "53e2434d.b0246c",
        "name": "Get Session",
        "func": "msg.session = global.get(\"session_\" + msg.user); \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 215.5,
        "y": 62,
        "wires": [
            []
        ]
    },
    {
        "id": "6834abbd.59cdd4",
        "type": "subflow",
        "name": "GetCloudantSession",
        "info": "",
        "in": [
            {
                "x": 41,
                "y": 45,
                "wires": [
                    {
                        "id": "c8d70706.42bc7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 734,
                "y": 45,
                "wires": [
                    {
                        "id": "efcdc7b4.58a2f",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "20c055a1.043382",
        "type": "comment",
        "z": "6834abbd.59cdd4",
        "name": "Must have cloudant Index on convoUser and convoTS ",
        "info": "",
        "x": 329.48028564453125,
        "y": 99.02044677734375,
        "wires": []
    },
    {
        "id": "c8d70706.42bc7",
        "type": "function",
        "z": "6834abbd.59cdd4",
        "name": "Get Session",
        "func": "msg.savePayload = msg.payload\n\nmsg.headers = {\"Content-type\" : \"application/json\"}\nmsg.url = \"https://bdea5362-c793-408b-9b0a-698c42002903-bluemix.cloudant.com/session/_find\"\n\n//testing new users\n//msg.user = \"dennisnoto@gmail.com\"\n\nmsg.payload = {selector: {\n     convoUser: {$eq: msg.user}     },\n     sort: [{convoUser:\"desc\"},{convoTS: \"desc\"}],    \n     limit: 5\n}\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 161,
        "y": 46,
        "wires": [
            [
                "a8e3a5b3.4f9638"
            ]
        ]
    },
    {
        "id": "efcdc7b4.58a2f",
        "type": "function",
        "z": "6834abbd.59cdd4",
        "name": "Set Session",
        "func": "//sesion object from Cloudant DB\n\nif (typeof msg.payload.docs !== \"undefined\")\n  {msg.session = msg.payload.docs[0]}\nelse \n  { msg.session = {};\n      \n}\n   \n//reset payload from channel to continue flow\nmsg.payload = msg.savePayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 584,
        "y": 45,
        "wires": [
            []
        ]
    },
    {
        "id": "a8e3a5b3.4f9638",
        "type": "http request",
        "z": "6834abbd.59cdd4",
        "name": "Cloudant-HTTPS",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 392,
        "y": 46,
        "wires": [
            [
                "efcdc7b4.58a2f"
            ]
        ]
    },
    {
        "id": "a4bbd9f9.0f30b",
        "type": "subflow",
        "name": "GetRedisSession",
        "info": "",
        "in": [
            {
                "x": 33.48760986328125,
                "y": 71.6234130859375,
                "wires": [
                    {
                        "id": "78f736b9.b2d0c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 790.480224609375,
                "y": 71.38070678710938,
                "wires": [
                    {
                        "id": "2bd47cff.4edf8c",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "78f736b9.b2d0c",
        "type": "function",
        "z": "a4bbd9f9.0f30b",
        "name": "Get Session",
        "func": "msg.savePayload = msg.payload\n\nmsg.payload = [msg.user]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 183.48760986328125,
        "y": 71.6234130859375,
        "wires": [
            [
                "6720536.dc2a22c"
            ]
        ]
    },
    {
        "id": "6720536.dc2a22c",
        "type": "redis-command",
        "z": "a4bbd9f9.0f30b",
        "server": "8d255ef1.21185",
        "command": "get",
        "name": "",
        "topic": "",
        "x": 350.49127197265625,
        "y": 71.60504150390625,
        "wires": [
            [
                "771cd95e.1ddae8"
            ]
        ]
    },
    {
        "id": "2bd47cff.4edf8c",
        "type": "function",
        "z": "a4bbd9f9.0f30b",
        "name": "Set Session",
        "func": "if (typeof msg.payload.convoUser !== \"undefined\" )\n  {msg.session = msg.payload}\nelse \n  { \n      \n}\n   \n//reset payload from channel to continue flow\nmsg.payload = msg.savePayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640.480224609375,
        "y": 71.38070678710938,
        "wires": [
            []
        ]
    },
    {
        "id": "771cd95e.1ddae8",
        "type": "json",
        "z": "a4bbd9f9.0f30b",
        "name": "",
        "x": 490.4765930175781,
        "y": 71.85501098632812,
        "wires": [
            [
                "2bd47cff.4edf8c"
            ]
        ]
    },
    {
        "id": "8d255ef1.21185",
        "type": "redis-config",
        "z": "",
        "host": "bluemix-sandbox-dal-9-portal.7.dblayer.com",
        "port": "27247",
        "dbase": "0",
        "pass": "IVKPWZBPOAJYQCRR"
    },
    {
        "id": "5fa9e96c.b0465",
        "type": "subflow",
        "name": "Get Session",
        "info": "",
        "in": [
            {
                "x": 53.983917236328125,
                "y": 43.61785888671875,
                "wires": [
                    {
                        "id": "7c4400c3.ddc1a8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 393.9839172363281,
                "y": 43.61785888671875,
                "wires": [
                    {
                        "id": "7c4400c3.ddc1a8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "7c4400c3.ddc1a8",
        "type": "subflow:a4bbd9f9.0f30b",
        "z": "5fa9e96c.b0465",
        "name": "",
        "x": 223.98391723632812,
        "y": 43.61785888671875,
        "wires": [
            []
        ]
    },
    {
        "id": "2b03a660.633b82",
        "type": "subflow:6834abbd.59cdd4",
        "z": "5fa9e96c.b0465",
        "x": 230.5,
        "y": 114.01022338867188,
        "wires": [
            []
        ]
    },
    {
        "id": "8b74a1b9.e443a8",
        "type": "subflow:53e2434d.b0246c",
        "z": "5fa9e96c.b0465",
        "name": "",
        "x": 226.5,
        "y": 185,
        "wires": [
            []
        ]
    },
    {
        "id": "aeabbb9b.db72b8",
        "type": "comment",
        "z": "5fa9e96c.b0465",
        "name": "Wire up at least one of the Session functions",
        "info": "Choose \n   GetNodeRedSession for prototyping\n   \nEnterprise use\nChoose \n   GetCloudantSeesion for DB Session\nor\n   GetRedisSession for Memory Cache\n   \nPlease note that you will need to wire up the\ncorresponding Set Session subflow",
        "x": 227.5,
        "y": 249,
        "wires": []
    },
    {
        "id": "5f8257f4.6085d8",
        "type": "subflow",
        "name": "SetNodeRedSession",
        "info": "",
        "in": [
            {
                "x": 53.5,
                "y": 55,
                "wires": [
                    {
                        "id": "79956486.46ed6c"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "79956486.46ed6c",
        "type": "function",
        "z": "5f8257f4.6085d8",
        "name": "Set Session",
        "func": "global.set(\"session_\" + msg.payload.convoUser, msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 179.5,
        "y": 54,
        "wires": [
            []
        ]
    },
    {
        "id": "18b15d09.ae994b",
        "type": "subflow",
        "name": "SetCloundantSession",
        "info": "",
        "in": [
            {
                "x": 35,
                "y": 46,
                "wires": [
                    {
                        "id": "25e9f410.0b2604"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "25e9f410.0b2604",
        "type": "http request",
        "z": "18b15d09.ae994b",
        "name": "Cloudant-HTTPS",
        "method": "POST",
        "ret": "txt",
        "url": "https://6edb4533-845a-480b-ba6e-efbc3e50ceef-bluemix.cloudant.com/session",
        "tls": "",
        "x": 205,
        "y": 46,
        "wires": [
            []
        ]
    },
    {
        "id": "ddc92215.86cb8",
        "type": "subflow",
        "name": "SetRedisSession",
        "info": "",
        "in": [
            {
                "x": 25,
                "y": 55.38446044921875,
                "wires": [
                    {
                        "id": "2476bdb.32d8742"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "2476bdb.32d8742",
        "type": "function",
        "z": "ddc92215.86cb8",
        "name": "Set Session-Cache",
        "func": "\nmsg.payload = [msg.payload.convoUser, JSON.stringify(msg.payload)]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 195,
        "y": 55.38446044921875,
        "wires": [
            [
                "5547fc95.c9c514"
            ]
        ]
    },
    {
        "id": "5547fc95.c9c514",
        "type": "redis-command",
        "z": "ddc92215.86cb8",
        "server": "8d255ef1.21185",
        "command": "set",
        "name": "",
        "topic": "",
        "x": 380.00006103515625,
        "y": 54.957977294921875,
        "wires": [
            []
        ]
    },
    {
        "id": "8d255ef1.21185",
        "type": "redis-config",
        "z": "",
        "host": "bluemix-sandbox-dal-9-portal.7.dblayer.com",
        "port": "27247",
        "dbase": "0",
        "pass": "IVKPWZBPOAJYQCRR"
    },
    {
        "id": "8c0b0e67.7c9d5",
        "type": "subflow",
        "name": "Set Session",
        "info": "",
        "in": [
            {
                "x": 64.9444580078125,
                "y": 40.222259521484375,
                "wires": [
                    {
                        "id": "5f62b842.05ff38"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 384.9444580078125,
                "y": 40.222259521484375,
                "wires": [
                    {
                        "id": "5f62b842.05ff38",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "5f62b842.05ff38",
        "type": "function",
        "z": "8c0b0e67.7c9d5",
        "name": "Define Session",
        "func": "//New Database Seesion Mgt\n// convoUser - Unique user id across channels\n// ConvoTS - Timestamp of actual WCS Call\n// convoSource - Source Channel Name, will be used in Convo\n//             - Examples (Alexa,Google Home, Slack, Phone, WebChat, Mobile)\n//convoPayload - actual return from WCS\n// Database document will be calles session\n// -- Index on convoUser and convoTS\n// -- We will write all WCS turns into the table\n// -- On retrieval  of the user session\n//    -- We will search by index put back last 5 documents sorted by convoTS descending\n//    -- assures first document will be the latest WCS user convo\n\n\nvar sessionMsg = {\n    payload : {\n    convoUser : msg.user,\n    convoTS : Date(),\n    convoSource : msg.source,\n    convoPayload : msg.payload\n    }\n}\n\nreturn [msg,sessionMsg];",
        "outputs": "2",
        "noerr": 0,
        "x": 224.9444580078125,
        "y": 40.222259521484375,
        "wires": [
            [],
            [
                "69867456.a631e4"
            ]
        ]
    },
    {
        "id": "69867456.a631e4",
        "type": "subflow:ddc92215.86cb8",
        "z": "8c0b0e67.7c9d5",
        "x": 441.9765625,
        "y": 101.17121887207031,
        "wires": []
    },
    {
        "id": "7d26924c.353e0c",
        "type": "subflow:18b15d09.ae994b",
        "z": "8c0b0e67.7c9d5",
        "name": "SetCloudantSession",
        "x": 456,
        "y": 156,
        "wires": []
    },
    {
        "id": "c150a291.2b6358",
        "type": "subflow:5f8257f4.6085d8",
        "z": "8c0b0e67.7c9d5",
        "x": 456.5,
        "y": 214,
        "wires": []
    },
    {
        "id": "464d68f2.66b8c8",
        "type": "comment",
        "z": "8c0b0e67.7c9d5",
        "name": "Wire up a Session storage subflow",
        "info": "For prototyping use SetNodeRedSession\n\nFor Enterprise use either Redis or Cloudant\n\nNote you will need a Redis/Cloudant service if\npick one of the Enterprise methods.",
        "x": 164.5,
        "y": 148,
        "wires": []
    },
    {
        "id": "763194b.d31c86c",
        "type": "http in",
        "z": "b0003967.6d0e08",
        "name": "Load HTTP in",
        "url": "/load",
        "method": "post",
        "swaggerDoc": "",
        "x": 92,
        "y": 85,
        "wires": [
            [
                "71a83d2d.ded5ac"
            ]
        ]
    },
    {
        "id": "f2d23e1a.119238",
        "type": "function",
        "z": "b0003967.6d0e08",
        "name": "Set Params",
        "func": "msg.source = \"Load\"\nvar user_name = msg.req.query.user_name;\n//var user_id = msg.payload.user_id;\nvar workspace_id = msg.req.query.workspace_id;\nvar fname = msg.req.query.fname;\n\n//create a null context and test for session existance\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context}\n   \nvar newmsg = msg.req.query.text;\nmsg.payload = newmsg;\n\ncontext.fname = fname\n\nvar params = {\n    context: context,\n    workspace_id : workspace_id\n   \n};\n\n node.log(\"User *** \" + msg.user + \" Said *** \" + newmsg)\n\nmsg.payload = newmsg\nmsg.params = params\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "x": 598.9444580078125,
        "y": 83.22225952148438,
        "wires": [
            [
                "512e32c0.446cd4"
            ]
        ]
    },
    {
        "id": "512e32c0.446cd4",
        "type": "watson-conversation-v1",
        "z": "b0003967.6d0e08",
        "name": "",
        "workspaceid": "56cfca8a-b459-447f-ab35-e94511f6f7bc",
        "multiuser": true,
        "context": false,
        "x": 771.388916015625,
        "y": 82.6388931274414,
        "wires": [
            [
                "5b9d0d2b.f300a4"
            ]
        ]
    },
    {
        "id": "6a70006e.a16a38",
        "type": "function",
        "z": "b0003967.6d0e08",
        "name": "Respone Msg",
        "func": "var Watson_msg = msg.payload;\nvar Watson_response = JSON.stringify(msg.payload.output.text);\n\nMyresponse = Watson_response.substring(2,Watson_response.length-2);\n\n//var texts = Myresponse.split(\"\\\",\\\"\");\nvar texts = msg.payload.output.text\nfor (i = 0; i < texts.length; i++) {\n   Myresponse = texts[i];\n  \n\n// causing issues for multiple output responses\n//if (Myresponse.match(\"\\\",\\\"\")) {\n  if (Myresponse.substring(0,Myresponse,2) == \"\\\",\\\"\") {\n     Myresponse = Myresponse.substring(3,Myresponse.length)\n\n}\n\n \nif (Myresponse.lastIndexOf(\"[\") >= 0 ) {\n     findindex = Myresponse.lastIndexOf(\"[\")\n     Myresponse = Myresponse.substring(0,findindex)\n\n} \nif (Myresponse.lastIndexOf(\"InsMap\") >= 0 ) {\n     findindex = Myresponse.lastIndexOf(\"InsMap\")\n     Myresponse = Myresponse.substring(0,findindex)\n    \n     \n} \n\n// Dennis added because SSML tag was escaping the \" with \\\" and the replace command fixes it!!!!\nMyresponse = Myresponse.replace(/\\\\/g, \"\");\n//Dennis - Remove XML SSML tags from chat systems\nMyresponse = Myresponse.replace(/<[^>]+>/g, \"\");\n\n node.log(\"User *** \" + msg.user +\" Response *** \" + Myresponse)\n\nmsg.payload = Myresponse;\n\nnode.send(msg);\n}\nreturn null;\n",
        "outputs": "1",
        "noerr": 0,
        "x": 1118.0556640625,
        "y": 82.33332824707031,
        "wires": [
            [
                "90a08aee.a31c78"
            ]
        ]
    },
    {
        "id": "71a83d2d.ded5ac",
        "type": "function",
        "z": "b0003967.6d0e08",
        "name": "Get User",
        "func": "\nmsg.user =  msg.req.query.user_id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 260.9444274902344,
        "y": 84.22225952148438,
        "wires": [
            [
                "3385243.7a224dc"
            ]
        ]
    },
    {
        "id": "90a08aee.a31c78",
        "type": "http response",
        "z": "b0003967.6d0e08",
        "name": "Http Response",
        "x": 1307.5,
        "y": 82.2222671508789,
        "wires": []
    },
    {
        "id": "5b9d0d2b.f300a4",
        "type": "subflow:8c0b0e67.7c9d5",
        "z": "b0003967.6d0e08",
        "name": "",
        "x": 940.72216796875,
        "y": 82.11112976074219,
        "wires": [
            [
                "6a70006e.a16a38"
            ]
        ]
    },
    {
        "id": "3385243.7a224dc",
        "type": "subflow:5fa9e96c.b0465",
        "z": "b0003967.6d0e08",
        "name": "",
        "x": 425.2419738769531,
        "y": 84.30892944335938,
        "wires": [
            [
                "f2d23e1a.119238"
            ]
        ]
    }
]