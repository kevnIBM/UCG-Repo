[
    {
        "id": "5f8257f4.6085d8",
        "type": "subflow",
        "name": "SetNodeRedSession",
        "info": "",
        "in": [
            {
                "x": 53.5,
                "y": 55,
                "wires": [
                    {
                        "id": "79956486.46ed6c"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "79956486.46ed6c",
        "type": "function",
        "z": "5f8257f4.6085d8",
        "name": "Set Session",
        "func": "global.set(\"session_\" + msg.payload.convoUser, msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 179.5,
        "y": 54,
        "wires": [
            []
        ]
    },
    {
        "id": "18b15d09.ae994b",
        "type": "subflow",
        "name": "SetCloundantSession",
        "info": "",
        "in": [
            {
                "x": 35,
                "y": 46,
                "wires": [
                    {
                        "id": "25e9f410.0b2604"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "25e9f410.0b2604",
        "type": "http request",
        "z": "18b15d09.ae994b",
        "name": "Cloudant-HTTPS",
        "method": "POST",
        "ret": "txt",
        "url": "https://6edb4533-845a-480b-ba6e-efbc3e50ceef-bluemix.cloudant.com/session",
        "tls": "",
        "x": 205,
        "y": 46,
        "wires": [
            []
        ]
    },
    {
        "id": "ddc92215.86cb8",
        "type": "subflow",
        "name": "SetRedisSession",
        "info": "",
        "in": [
            {
                "x": 25,
                "y": 55.38446044921875,
                "wires": [
                    {
                        "id": "2476bdb.32d8742"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "2476bdb.32d8742",
        "type": "function",
        "z": "ddc92215.86cb8",
        "name": "Set Session-Cache",
        "func": "\nmsg.payload = [msg.payload.convoUser, JSON.stringify(msg.payload)]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 195,
        "y": 55.38446044921875,
        "wires": [
            [
                "5547fc95.c9c514"
            ]
        ]
    },
    {
        "id": "5547fc95.c9c514",
        "type": "redis-command",
        "z": "ddc92215.86cb8",
        "server": "8d255ef1.21185",
        "command": "set",
        "name": "",
        "topic": "",
        "x": 380.00006103515625,
        "y": 54.957977294921875,
        "wires": [
            []
        ]
    },
    {
        "id": "8d255ef1.21185",
        "type": "redis-config",
        "z": "",
        "host": "bluemix-sandbox-dal-9-portal.7.dblayer.com",
        "port": "27247",
        "dbase": "0",
        "pass": "IVKPWZBPOAJYQCRR"
    },
    {
        "id": "8c0b0e67.7c9d5",
        "type": "subflow",
        "name": "Set Session",
        "info": "",
        "in": [
            {
                "x": 64.9444580078125,
                "y": 40.222259521484375,
                "wires": [
                    {
                        "id": "5f62b842.05ff38"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 384.9444580078125,
                "y": 40.222259521484375,
                "wires": [
                    {
                        "id": "5f62b842.05ff38",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "5f62b842.05ff38",
        "type": "function",
        "z": "8c0b0e67.7c9d5",
        "name": "Define Session",
        "func": "//New Database Seesion Mgt\n// convoUser - Unique user id across channels\n// ConvoTS - Timestamp of actual WCS Call\n// convoSource - Source Channel Name, will be used in Convo\n//             - Examples (Alexa,Google Home, Slack, Phone, WebChat, Mobile)\n//convoPayload - actual return from WCS\n// Database document will be calles session\n// -- Index on convoUser and convoTS\n// -- We will write all WCS turns into the table\n// -- On retrieval  of the user session\n//    -- We will search by index put back last 5 documents sorted by convoTS descending\n//    -- assures first document will be the latest WCS user convo\n\n\nvar sessionMsg = {\n    payload : {\n    convoUser : msg.user,\n    convoTS : Date(),\n    convoSource : msg.source,\n    convoPayload : msg.payload\n    }\n}\n\nreturn [msg,sessionMsg];",
        "outputs": "2",
        "noerr": 0,
        "x": 224.9444580078125,
        "y": 40.222259521484375,
        "wires": [
            [],
            [
                "69867456.a631e4"
            ]
        ]
    },
    {
        "id": "69867456.a631e4",
        "type": "subflow:ddc92215.86cb8",
        "z": "8c0b0e67.7c9d5",
        "x": 441.9765625,
        "y": 101.17121887207031,
        "wires": []
    },
    {
        "id": "7d26924c.353e0c",
        "type": "subflow:18b15d09.ae994b",
        "z": "8c0b0e67.7c9d5",
        "name": "SetCloudantSession",
        "x": 456,
        "y": 156,
        "wires": []
    },
    {
        "id": "c150a291.2b6358",
        "type": "subflow:5f8257f4.6085d8",
        "z": "8c0b0e67.7c9d5",
        "x": 456.5,
        "y": 214,
        "wires": []
    },
    {
        "id": "464d68f2.66b8c8",
        "type": "comment",
        "z": "8c0b0e67.7c9d5",
        "name": "Wire up a Session storage subflow",
        "info": "For prototyping use SetNodeRedSession\n\nFor Enterprise use either Redis or Cloudant\n\nNote you will need a Redis/Cloudant service if\npick one of the Enterprise methods.",
        "x": 164.5,
        "y": 148,
        "wires": []
    },
    {
        "id": "53e2434d.b0246c",
        "type": "subflow",
        "name": "GetNodeRedSession",
        "info": "",
        "in": [
            {
                "x": 65.5,
                "y": 62,
                "wires": [
                    {
                        "id": "5371d272.db7d44"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 365.5,
                "y": 62,
                "wires": [
                    {
                        "id": "5371d272.db7d44",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "5371d272.db7d44",
        "type": "function",
        "z": "53e2434d.b0246c",
        "name": "Get Session",
        "func": "msg.session = global.get(\"session_\" + msg.user); \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 215.5,
        "y": 62,
        "wires": [
            []
        ]
    },
    {
        "id": "6834abbd.59cdd4",
        "type": "subflow",
        "name": "GetCloudantSession",
        "info": "",
        "in": [
            {
                "x": 41,
                "y": 45,
                "wires": [
                    {
                        "id": "c8d70706.42bc7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 734,
                "y": 45,
                "wires": [
                    {
                        "id": "efcdc7b4.58a2f",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "20c055a1.043382",
        "type": "comment",
        "z": "6834abbd.59cdd4",
        "name": "Must have cloudant Index on convoUser and convoTS ",
        "info": "",
        "x": 329.48028564453125,
        "y": 99.02044677734375,
        "wires": []
    },
    {
        "id": "c8d70706.42bc7",
        "type": "function",
        "z": "6834abbd.59cdd4",
        "name": "Get Session",
        "func": "msg.savePayload = msg.payload\n\nmsg.headers = {\"Content-type\" : \"application/json\"}\nmsg.url = \"https://bdea5362-c793-408b-9b0a-698c42002903-bluemix.cloudant.com/session/_find\"\n\n//testing new users\n//msg.user = \"dennisnoto@gmail.com\"\n\nmsg.payload = {selector: {\n     convoUser: {$eq: msg.user}     },\n     sort: [{convoUser:\"desc\"},{convoTS: \"desc\"}],    \n     limit: 5\n}\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 161,
        "y": 46,
        "wires": [
            [
                "a8e3a5b3.4f9638"
            ]
        ]
    },
    {
        "id": "efcdc7b4.58a2f",
        "type": "function",
        "z": "6834abbd.59cdd4",
        "name": "Set Session",
        "func": "//sesion object from Cloudant DB\n\nif (typeof msg.payload.docs !== \"undefined\")\n  {msg.session = msg.payload.docs[0]}\nelse \n  { msg.session = {};\n      \n}\n   \n//reset payload from channel to continue flow\nmsg.payload = msg.savePayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 584,
        "y": 45,
        "wires": [
            []
        ]
    },
    {
        "id": "a8e3a5b3.4f9638",
        "type": "http request",
        "z": "6834abbd.59cdd4",
        "name": "Cloudant-HTTPS",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 392,
        "y": 46,
        "wires": [
            [
                "efcdc7b4.58a2f"
            ]
        ]
    },
    {
        "id": "a4bbd9f9.0f30b",
        "type": "subflow",
        "name": "GetRedisSession",
        "info": "",
        "in": [
            {
                "x": 33.48760986328125,
                "y": 71.6234130859375,
                "wires": [
                    {
                        "id": "78f736b9.b2d0c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 790.480224609375,
                "y": 71.38070678710938,
                "wires": [
                    {
                        "id": "2bd47cff.4edf8c",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "78f736b9.b2d0c",
        "type": "function",
        "z": "a4bbd9f9.0f30b",
        "name": "Get Session",
        "func": "msg.savePayload = msg.payload\n\nmsg.payload = [msg.user]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 183.48760986328125,
        "y": 71.6234130859375,
        "wires": [
            [
                "6720536.dc2a22c"
            ]
        ]
    },
    {
        "id": "6720536.dc2a22c",
        "type": "redis-command",
        "z": "a4bbd9f9.0f30b",
        "server": "8d255ef1.21185",
        "command": "get",
        "name": "",
        "topic": "",
        "x": 350.49127197265625,
        "y": 71.60504150390625,
        "wires": [
            [
                "771cd95e.1ddae8"
            ]
        ]
    },
    {
        "id": "2bd47cff.4edf8c",
        "type": "function",
        "z": "a4bbd9f9.0f30b",
        "name": "Set Session",
        "func": "if (typeof msg.payload.convoUser !== \"undefined\" )\n  {msg.session = msg.payload}\nelse \n  { \n      \n}\n   \n//reset payload from channel to continue flow\nmsg.payload = msg.savePayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640.480224609375,
        "y": 71.38070678710938,
        "wires": [
            []
        ]
    },
    {
        "id": "771cd95e.1ddae8",
        "type": "json",
        "z": "a4bbd9f9.0f30b",
        "name": "",
        "x": 490.4765930175781,
        "y": 71.85501098632812,
        "wires": [
            [
                "2bd47cff.4edf8c"
            ]
        ]
    },
    {
        "id": "8d255ef1.21185",
        "type": "redis-config",
        "z": "",
        "host": "bluemix-sandbox-dal-9-portal.7.dblayer.com",
        "port": "27247",
        "dbase": "0",
        "pass": "IVKPWZBPOAJYQCRR"
    },
    {
        "id": "5fa9e96c.b0465",
        "type": "subflow",
        "name": "Get Session",
        "info": "",
        "in": [
            {
                "x": 53.983917236328125,
                "y": 43.61785888671875,
                "wires": [
                    {
                        "id": "7c4400c3.ddc1a8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 393.9839172363281,
                "y": 43.61785888671875,
                "wires": [
                    {
                        "id": "7c4400c3.ddc1a8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "7c4400c3.ddc1a8",
        "type": "subflow:a4bbd9f9.0f30b",
        "z": "5fa9e96c.b0465",
        "name": "",
        "x": 223.98391723632812,
        "y": 43.61785888671875,
        "wires": [
            []
        ]
    },
    {
        "id": "2b03a660.633b82",
        "type": "subflow:6834abbd.59cdd4",
        "z": "5fa9e96c.b0465",
        "x": 230.5,
        "y": 114.01022338867188,
        "wires": [
            []
        ]
    },
    {
        "id": "8b74a1b9.e443a8",
        "type": "subflow:53e2434d.b0246c",
        "z": "5fa9e96c.b0465",
        "name": "",
        "x": 226.5,
        "y": 185,
        "wires": [
            []
        ]
    },
    {
        "id": "aeabbb9b.db72b8",
        "type": "comment",
        "z": "5fa9e96c.b0465",
        "name": "Wire up at least one of the Session functions",
        "info": "Choose \n   GetNodeRedSession for prototyping\n   \nEnterprise use\nChoose \n   GetCloudantSeesion for DB Session\nor\n   GetRedisSession for Memory Cache\n   \nPlease note that you will need to wire up the\ncorresponding Set Session subflow",
        "x": 227.5,
        "y": 249,
        "wires": []
    },
    {
        "id": "a39727b1.eea4a8",
        "type": "http in",
        "z": "2ae3a835.8e6ba8",
        "name": "Alexa Request",
        "url": "/Alexa",
        "method": "post",
        "swaggerDoc": "",
        "x": 94,
        "y": 160.44444274902344,
        "wires": [
            [
                "12735a7a.d6a7de"
            ]
        ]
    },
    {
        "id": "12735a7a.d6a7de",
        "type": "switch",
        "z": "2ae3a835.8e6ba8",
        "name": "Sort Request",
        "property": "payload.request.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "LaunchRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IntentRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SessionEndedRequest",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 4,
        "x": 271.11112213134766,
        "y": 160.55556297302246,
        "wires": [
            [
                "474f08ef.803b28"
            ],
            [
                "6e280b67.aa7e54"
            ],
            [],
            []
        ]
    },
    {
        "id": "372c9425.bdc65c",
        "type": "function",
        "z": "2ae3a835.8e6ba8",
        "name": "Set Params",
        "func": "msg.source = \"Alexa\"\nvar fname = msg.req.query.fname;\nvar workspace_id = msg.req.query.workspace_id;\n//var user_temp = msg.payload.session.user.userId;\n//user = user_temp.substring(user_temp.length-10, user_temp.length);\nvar context = {}\n\nif (typeof msg.session !== \"undefined\") \n   {context = msg.session.convoPayload.context}\n   \nnode.log(\"alexa user:\" + msg.user);\n\nif (msg.payload.request.type ==\"LaunchRequest\") {\n   var temp_msg = \"Hello\";\n   //Uncomment if you want the convo to start at begining when a Launch is dedected\n   //context = {}\n}\nelse {\n   var temp_msg = msg.payload.request.intent.slots.command.value; \n}\n\nnode.log(\"alexa utterance:\" + temp_msg);\n//Zero out maps \nvar map = JSON.parse(\"{}\");  \n\nvar newmsg = temp_msg.replace(\"Watson\", \"\");\nmsg.payload = newmsg;\n\n\nglobal.set(\"last_question\",newmsg);\n\ncontext.fname = fname\ncontext.map = map\n\nvar params = {\n    context : context,\n    workspace_id : workspace_id\n};\n\nmsg.payload = newmsg\nmsg.params = params\n\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 893,
        "y": 142.5555419921875,
        "wires": [
            [
                "665c7754.b27908",
                "9ac692c1.c48908"
            ]
        ]
    },
    {
        "id": "6e280b67.aa7e54",
        "type": "switch",
        "z": "2ae3a835.8e6ba8",
        "name": "Sort by Intent",
        "property": "payload.request.intent.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CallWatson",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Fradulent_Trancation",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 424.3332824707031,
        "y": 268.1111145019531,
        "wires": [
            [
                "474f08ef.803b28"
            ],
            [
                "474f08ef.803b28"
            ],
            []
        ]
    },
    {
        "id": "665c7754.b27908",
        "type": "debug",
        "z": "2ae3a835.8e6ba8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1013.111083984375,
        "y": 58,
        "wires": []
    },
    {
        "id": "b493e430.801f2",
        "type": "watson-conversation-v1",
        "z": "2ae3a835.8e6ba8",
        "name": "",
        "workspaceid": "",
        "multiuser": true,
        "context": false,
        "x": 1360.1666259765625,
        "y": 143.30557250976562,
        "wires": [
            [
                "c172ce1f.b36b3"
            ]
        ]
    },
    {
        "id": "1116394a.2bb8df",
        "type": "function",
        "z": "2ae3a835.8e6ba8",
        "name": "Response Msg",
        "func": "//var Watson_msg = msg.payload;\n//var Watson_response = JSON.stringify(msg.payload.output.text);\n//var Watson_context = JSON.stringify(msg.payload.context);\nvar Watson_contextOBJ = msg.payload.context;\n//node.log(Watson_response);\n//Myresponse = Watson_response.substring(2,Watson_response.length-2);\n\nvar texts = msg.payload.output.text\n\ntotalText = \"\"\nfor (i = 0; i < texts.length; i++) {\n    \n    if (texts[i].lastIndexOf(\"[\") >= 0 ) {\n       findindex = texts[i].lastIndexOf(\"[\");\n       texts[i] = texts[i].substring(0,findindex);\n    } \n  \n  texts[i] = texts[i].replace(/\\\\/g, \"\");\n  texts[i] = texts[i].replace('=\\\"number\\\" format=\\\"telephone\\\"', '=\\\"digits\\\"');\n  \n  totalText = totalText + \" \" + texts[i]\n}\n\nvar myquestion = global.get(\"last_question\");\nnode.log(\"last question:\"+ myquestion);\n\nvar myEndSession = false;    \n\nif (myquestion.lastIndexOf(\"goodbye\") >= 0 )\n   {myEndSession = true}\n\n\nvar response = {\n    version : \"1.0\",\n    response : { \n       outputSpeech : { \n          //type : \"PlainText\",\n          type : \"SSML\",\n          ssml: \"<speak>\" + totalText + \"</speak>\"\n        },        \n    shouldEndSession : myEndSession,\n   // context: Watson_context\n    }\n};\n\n\n//json map\n//var mapjsonStr = Watson_context.match(/\\\"map.*Yes\\\"/);\nvar mapjsonObj = Watson_contextOBJ.map;\nif (typeof mapjsonObj.values != \"undefined\") {\n//node.log(\"mapjson: \" + mapjsonStr);\n//if (mapjsonStr  !== null){\n    component = \"map\";\n    for (var c in mapjsonObj.values) {\n      mapStr = mapjsonObj.values[c] + \"&size=500x300\";\n      node.log(\"Found Json map str: \" + mapStr);\n    \n    response = {\n      version : \"1.0\",\n      response : { \n         outputSpeech : { \n            type : \"SSML\",\n            ssml: \"<speak>\" + Myresponse + \" Check your Alexa app for the map\" + \"</speak>\"\n          },        \n      card: {\n        type: \"Standard\",\n        title: \"Google Map\",\n        text: \"\",\n        image: {\n          smallImageUrl: mapjsonObj.values[c] + \"&size=500x300\",\n          largeImageUrl: mapjsonObj.values[c] + \"&size=600x400\"\n        }\n      },\n      shouldEndSession : myEndSession,\n   // context: Watson_context\n      }\n    \n     };   \n    \n   }\n}\n\nnode.log(JSON.stringify(response));\n\nmsg.payload = response\n\nreturn  msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1218.6666259765625,
        "y": 266.5555725097656,
        "wires": [
            [
                "44c306ae.44337",
                "ff13a9ea.d55368"
            ]
        ]
    },
    {
        "id": "44c306ae.44337",
        "type": "http response",
        "z": "2ae3a835.8e6ba8",
        "name": "Alexa Response",
        "x": 1426.4443359375,
        "y": 266.66668701171875,
        "wires": []
    },
    {
        "id": "ff13a9ea.d55368",
        "type": "debug",
        "z": "2ae3a835.8e6ba8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1371.7777099609375,
        "y": 347.55560302734375,
        "wires": []
    },
    {
        "id": "8a0ca8cb.3b814",
        "type": "function",
        "z": "2ae3a835.8e6ba8",
        "name": "Add Tone",
        "func": "\nnode.log(\"*********Found Tone ********\" + msg.response.document_tone.tone_categories[0].tones[0].tone_id);\nnode.log(\"*********Found Tone **Score*****\" + msg.response.document_tone.tone_categories[0].tones[0].score.toFixed(3));\n\nmsg.params.context.angerName = msg.response.document_tone.tone_categories[0].tones[0].tone_name;\nmsg.params.context.angerScore = msg.response.document_tone.tone_categories[0].tones[0].score.toFixed(3);\nmsg.params.context.disgustName = msg.response.document_tone.tone_categories[0].tones[1].tone_name;\nmsg.params.context.disgustScore = msg.response.document_tone.tone_categories[0].tones[1].score.toFixed(3);\nmsg.params.context.fearName = msg.response.document_tone.tone_categories[0].tones[2].tone_name;\nmsg.params.context.fearScore = msg.response.document_tone.tone_categories[0].tones[2].score.toFixed(3);\nmsg.params.context.joyName = msg.response.document_tone.tone_categories[0].tones[3].tone_name;\nmsg.params.context.joyScore = msg.response.document_tone.tone_categories[0].tones[3].score.toFixed(3);\nmsg.params.context.sadnessName = msg.response.document_tone.tone_categories[0].tones[4].tone_name;\nmsg.params.context.sadnessScore = msg.response.document_tone.tone_categories[0].tones[4].score.toFixed(3);\n\nmsg.params.context.analyticalName = msg.response.document_tone.tone_categories[1].tones[0].tone_name;\nmsg.params.context.analyticalScore = msg.response.document_tone.tone_categories[1].tones[0].score.toFixed(3);\nmsg.params.context.confidentName = msg.response.document_tone.tone_categories[1].tones[1].tone_name;\nmsg.params.context.confidentScore = msg.response.document_tone.tone_categories[1].tones[1].score.toFixed(3);\nmsg.params.context.tentativeName = msg.response.document_tone.tone_categories[1].tones[2].tone_name;\nmsg.params.context.tentativeScore = msg.response.document_tone.tone_categories[1].tones[2].score.toFixed(3);\n\nmsg.params.context.OpenName = msg.response.document_tone.tone_categories[2].tones[0].tone_name;\nmsg.params.context.OpenScore = msg.response.document_tone.tone_categories[2].tones[0].score.toFixed(3);\nmsg.params.context.conTitle = msg.response.document_tone.tone_categories[2].tones[1].tone_name;\nmsg.params.context.conScore = msg.response.document_tone.tone_categories[2].tones[1].score.toFixed(3);\nmsg.params.context.extName = msg.response.document_tone.tone_categories[2].tones[2].tone_name;\nmsg.params.context.extScore = msg.response.document_tone.tone_categories[2].tones[2].score.toFixed(3);\nmsg.params.context.agreeName = msg.response.document_tone.tone_categories[2].tones[3].tone_name;\nmsg.params.context.agreeScore = msg.response.document_tone.tone_categories[2].tones[3].score.toFixed(3);\nmsg.params.context.emoName = msg.response.document_tone.tone_categories[2].tones[4].tone_name;\nmsg.params.context.emoScore = msg.response.document_tone.tone_categories[2].tones[4].score.toFixed(3);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1203.22216796875,
        "y": 143.11109924316406,
        "wires": [
            [
                "b493e430.801f2"
            ]
        ]
    },
    {
        "id": "9ac692c1.c48908",
        "type": "watson-tone-analyzer-v3",
        "z": "2ae3a835.8e6ba8",
        "name": "Tone",
        "tones": "all",
        "sentences": "true",
        "contentType": "false",
        "x": 1052.33349609375,
        "y": 143.00003051757812,
        "wires": [
            [
                "8a0ca8cb.3b814"
            ]
        ]
    },
    {
        "id": "474f08ef.803b28",
        "type": "function",
        "z": "2ae3a835.8e6ba8",
        "name": "Get User",
        "func": "var user_temp = msg.payload.session.user.userId;\nmsg.user =  user_temp.substring(user_temp.length-10, user_temp.length);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 559.5,
        "y": 142,
        "wires": [
            [
                "83b08e95.ee0d48"
            ]
        ]
    },
    {
        "id": "83b08e95.ee0d48",
        "type": "subflow:5fa9e96c.b0465",
        "z": "2ae3a835.8e6ba8",
        "name": "",
        "x": 722.5,
        "y": 142,
        "wires": [
            [
                "372c9425.bdc65c"
            ]
        ]
    },
    {
        "id": "c172ce1f.b36b3",
        "type": "subflow:8c0b0e67.7c9d5",
        "z": "2ae3a835.8e6ba8",
        "name": "",
        "x": 1040.5,
        "y": 266,
        "wires": [
            [
                "1116394a.2bb8df"
            ]
        ]
    }
]